.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OBO::OBOTerm 3"
.TH OBO::OBOTerm 3 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
OBO::OBOTerm.pm
.SH "VERSION"
.IX Header "VERSION"
1.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OBO::OBOTerm;
my \f(CW$obj\fR = new OBO::OBOTerm($id, \f(CW$name\fR, \f(CW$def\fR, \f(CW$is_obsolete\fR);
\&\f(CW$obj\fR\->writeRecord($fileHandle1);
.SH "AUTHOR"
.IX Header "AUTHOR"
Jay Sundaram
sundaram@jcvi.org
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "new($id, $name\fR, \f(CW$def\fR, \f(CW$is_obsolete)" 4
.el .IP "new($id, \f(CW$name\fR, \f(CW$def\fR, \f(CW$is_obsolete\fR)" 4
.IX Item "new($id, $name, $def, $is_obsolete)"
\&\fBDescription:\fR Instantiate OBORecord object
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 4
\& $id          - id
\& $name        - name
\& $def         - def
\& $is_obsolete - is_obsolete
.Ve
.Sp
\&\fBReturns:\fR reference to the OBORecord
.IP "$self\->\fI_init()\fR" 4
.IX Item "$self->_init()"
\&\fBDescription:\fR Not being used at this time.
.Sp
\&\fBParameters:\fR None at this time.
.Sp
\&\fBReturns:\fR Nothing at this time.
.IP "\s-1DESTROY\s0" 4
.IX Item "DESTROY"
\&\fBDescription:\fR OBORecord class destructor
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIgetId()\fR" 4
.IX Item "$obj->getId()"
\&\fBDescription:\fR Retrieves the \s-1ID\s0 attribute for the OBOTerm
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR Scalar/string that is the \s-1ID\s0 assigned to the OBOTerm
.IP "$obj\->\fIsetId()\fR" 4
.IX Item "$obj->setId()"
\&\fBDescription:\fR Set the id for the OBOTerm
.Sp
\&\fBParameters:\fR \f(CW$id\fR \- scalar
.Sp
\&\fBReturns:\fR none
.IP "$obj\->\fIgetName()\fR" 4
.IX Item "$obj->getName()"
\&\fBDescription:\fR Retrieves the name for the OBOTerm
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$name\fR \- scalar
.IP "$obj\->\fIsetName()\fR" 4
.IX Item "$obj->setName()"
\&\fBDescription:\fR Set the name for the OBOTerm
.Sp
\&\fBParameters:\fR \f(CW$name\fR \- scalar
.Sp
\&\fBReturns:\fR none
.IP "$obj\->\fIgetNamespace()\fR" 4
.IX Item "$obj->getNamespace()"
\&\fBDescription:\fR Retrieves the namespace for the OBOTerm
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$namespace\fR \- scalar
.IP "$obj\->\fIhasNamespace()\fR" 4
.IX Item "$obj->hasNamespace()"
\&\fBDescription:\fR Checks whether the OBOTerm has a namespace value
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\&  0 - false (scalar)
\&  1 - true  (scalar)
.Ve
.IP "$obj\->\fIsetNamespace()\fR" 4
.IX Item "$obj->setNamespace()"
\&\fBDescription:\fR Set the namespace for the OBOTerm
.Sp
\&\fBParameters:\fR \f(CW$namespace\fR \- scalar
.Sp
\&\fBReturns:\fR none
.IP "$obj\->\fIgetDef()\fR" 4
.IX Item "$obj->getDef()"
\&\fBDescription:\fR Retrieves the def for the OBOTerm
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$def\fR \- scalar
.IP "$obj\->\fIsetDef()\fR" 4
.IX Item "$obj->setDef()"
\&\fBDescription:\fR Set the def for the OBOTerm
.Sp
\&\fBParameters:\fR \f(CW$def\fR \- scalar
.Sp
\&\fBReturns:\fR none
.IP "$obj\->\fIgetComment()\fR" 4
.IX Item "$obj->getComment()"
\&\fBDescription:\fR Retrieves the comment for the OBOTerm
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$comment\fR \- scalar
.IP "$obj\->\fIsetComment()\fR" 4
.IX Item "$obj->setComment()"
\&\fBDescription:\fR Set the comment for the OBOTerm
.Sp
\&\fBParameters:\fR \f(CW$comment\fR \- scalar
.Sp
\&\fBReturns:\fR none
.IP "$obj\->\fIaddAltId()\fR" 4
.IX Item "$obj->addAltId()"
\&\fBDescription:\fR Add alt_id for the OBOTerm
.Sp
\&\fBParameters:\fR \f(CW$alt_id\fR \- scalar
.Sp
\&\fBReturns:\fR none
.IP "$obj\->\fIhasAltId()\fR" 4
.IX Item "$obj->hasAltId()"
\&\fBDescription:\fR Check whether this OBOTerm has any alt_id attributes
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\&  0 - false, scalar
\&  1 - true, scalar
.Ve
.IP "$obj\->\fIaddExactSynonym()\fR" 4
.IX Item "$obj->addExactSynonym()"
\&\fBDescription:\fR Add exact synonym for the OBOTerm
.Sp
\&\fBParameters:\fR \f(CW$synonym\fR \- scalar
.Sp
\&\fBReturns:\fR none
.IP "$obj\->\fIaddSynonym()\fR" 4
.IX Item "$obj->addSynonym()"
\&\fBDescription:\fR Add synonym for the OBOTerm
.Sp
\&\fBParameters:\fR \f(CW$synonym\fR \- scalar
.Sp
\&\fBReturns:\fR none
.IP "$obj\->\fIhasSynonym()\fR" 4
.IX Item "$obj->hasSynonym()"
\&\fBDescription:\fR Check whether this OBOTerm has any synonym attributes
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\&  0 - false, scalar
\&  1 - true, scalar
.Ve
.IP "$obj\->\fIaddNarrowSynonym()\fR" 4
.IX Item "$obj->addNarrowSynonym()"
\&\fBDescription:\fR Add narrow synonym for the OBOTerm
.Sp
\&\fBParameters:\fR \f(CW$synonym\fR \- scalar
.Sp
\&\fBReturns:\fR none
.IP "$obj\->\fIhasNarrowSynonym()\fR" 4
.IX Item "$obj->hasNarrowSynonym()"
\&\fBDescription:\fR Check whether this OBOTerm has any \s-1NARRROW\s0 synonym attributes
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\&  0 - false, scalar
\&  1 - true, scalar
.Ve
.IP "$obj\->\fIaddBroadSynonym()\fR" 4
.IX Item "$obj->addBroadSynonym()"
\&\fBDescription:\fR Add broad synonym for the OBOTerm
.Sp
\&\fBParameters:\fR \f(CW$synonym\fR \- scalar
.Sp
\&\fBReturns:\fR none
.IP "$obj\->\fIhasBroardSynonym()\fR" 4
.IX Item "$obj->hasBroardSynonym()"
\&\fBDescription:\fR Check whether this OBOTerm has any \s-1BROAD\s0 synonym attributes
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\&  0 - false, scalar
\&  1 - true, scalar
.Ve
.IP "$obj\->\fIaddXref()\fR" 4
.IX Item "$obj->addXref()"
\&\fBDescription:\fR Add xref for the OBOTerm
.Sp
\&\fBParameters:\fR \f(CW$xref\fR \- scalar
.Sp
\&\fBReturns:\fR none
.IP "$obj\->\fIhasXref()\fR" 4
.IX Item "$obj->hasXref()"
\&\fBDescription:\fR Check whether this OBOTerm has any xef attributes
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\&  0 - false, scalar
\&  1 - true, scalar
.Ve
.IP "$obj\->addIsA($id)" 4
.IX Item "$obj->addIsA($id)"
\&\fBDescription:\fR Add is_a to the OBOTerm object
.Sp
\&\fBParameters:\fR \f(CW$id\fR \- scalar
.Sp
\&\fBReturns:\fR None
.IP "$obj\->addRelationship($reltype,$value)" 4
.IX Item "$obj->addRelationship($reltype,$value)"
\&\fBDescription:\fR Add a relationship to the OBOTerm object
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 2
\&  $reltype - scalar
\&  $value   - scalar
.Ve
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIhasRelationship()\fR" 4
.IX Item "$obj->hasRelationship()"
\&\fBDescription:\fR Checks whether the OBOTerm has at least one relationship value
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\&  0 - false (scalar)
\&  1 - true  (scalar)
.Ve
.IP "$obj\->\fInextRelationship()\fR" 4
.IX Item "$obj->nextRelationship()"
\&\fBDescription:\fR Return the next relationship tuple
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 3
\&  Reference to two-element array
\&  element 1 == $id - id of related Term (scalar)
\&  element 2 == $reltype - relationship type (scalar)
.Ve
.IP "$obj\->setComment($comment)" 4
.IX Item "$obj->setComment($comment)"
\&\fBDescription:\fR Set the comment for the OBOTerm object
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 1
\&  $comment - scalar
.Ve
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIhasComment()\fR" 4
.IX Item "$obj->hasComment()"
\&\fBDescription:\fR Checks whether the Term has a comment
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\& 0 - false (scalar)
\& 1 - true  (scalar)
.Ve
.IP "$obj\->\fIgetIsObsolete()\fR" 4
.IX Item "$obj->getIsObsolete()"
\&\fBDescription:\fR Returns the is_obsolete value for the OBOTerm
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR  is_obsolete value (scalar)
.IP "$obj\->\fIhasIsObsolete()\fR" 4
.IX Item "$obj->hasIsObsolete()"
\&\fBDescription:\fR Determine whether a value exists for the is_obsolete attribute
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR  
.Sp
.Vb 2
\& 0 - false
\& 1 - true
.Ve
.IP "$obj\->\fIsetIsObsolete()\fR" 4
.IX Item "$obj->setIsObsolete()"
\&\fBDescription:\fR Sets the is_obsolete value for the OBOTerm
.Sp
\&\fBParameters:\fR \f(CW$is_obsolete\fR (scalar)
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->writeRecord($fh)" 4
.IX Item "$obj->writeRecord($fh)"
\&\fBDescription:\fR Method that writes the \s-1OBO\s0 record to the filehandle fh.
.Sp
\&\fBParameters:\fR
.Sp
.Vb 1
\& $fh     - filehandle for output file
.Ve
.Sp
\&\fBReturns:\fR  None
.IP "$obj\->writeSynonyms($fh)" 4
.IX Item "$obj->writeSynonyms($fh)"
\&\fBDescription:\fR Method that writes the synonyms for the \s-1OBO\s0 record to the filehandle fh.
.Sp
\&\fBParameters:\fR
.Sp
.Vb 1
\& $fh     - filehandle for output file
.Ve
.Sp
\&\fBReturns:\fR  None
.IP "$obj\->writeIsA($fh)" 4
.IX Item "$obj->writeIsA($fh)"
\&\fBDescription:\fR Method that writes the is_a relationships for the \s-1OBO\s0 record to the filehandle fh.
.Sp
\&\fBParameters:\fR
.Sp
.Vb 1
\& $fh     - filehandle for output file
.Ve
.Sp
\&\fBReturns:\fR  None
.IP "$obj\->writeRelationships($fh)" 4
.IX Item "$obj->writeRelationships($fh)"
\&\fBDescription:\fR Method that writes the relationships for the \s-1OBO\s0 record to the filehandle fh.
.Sp
\&\fBParameters:\fR
.Sp
.Vb 1
\& $fh     - filehandle for output file
.Ve
.Sp
\&\fBReturns:\fR  None
.IP "$obj\->\fInextXref()\fR" 4
.IX Item "$obj->nextXref()"
\&\fBDescription:\fR Iteratively returns each xref
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$xref\fR \- scalar
.IP "$obj\->\fInextAltId()\fR" 4
.IX Item "$obj->nextAltId()"
\&\fBDescription:\fR Iteratively returns each alt_id
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$alt_id\fR \- scalar
.IP "$obj\->\fInextSynonym()\fR" 4
.IX Item "$obj->nextSynonym()"
\&\fBDescription:\fR Iteratively returns each synonym
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$synonym\fR \- scalar
.IP "$obj\->\fIhasSynonym()\fR" 4
.IX Item "$obj->hasSynonym()"
\&\fBDescription:\fR Determine whether there are any synonym values
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\& 0 - false
\& 1 - true
.Ve
.IP "$obj\->\fInextExactSynonym()\fR" 4
.IX Item "$obj->nextExactSynonym()"
\&\fBDescription:\fR Iteratively returns each exact synonym
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$exactSynonym\fR \- scalar
.IP "$obj\->\fIhasExactSynonym()\fR" 4
.IX Item "$obj->hasExactSynonym()"
\&\fBDescription:\fR Determine whether there are any exact_synonym values
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\& 0 - false
\& 1 - true
.Ve
.IP "$obj\->\fInextNarrowSynonym()\fR" 4
.IX Item "$obj->nextNarrowSynonym()"
\&\fBDescription:\fR Iteratively returns each narrow synonym
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$narrowSynonym\fR \- scalar
.IP "$obj\->\fIhasNarrowSynonym()\fR" 4
.IX Item "$obj->hasNarrowSynonym()"
\&\fBDescription:\fR Determine whether there are any narrow_synonym values
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\& 0 - false
\& 1 - true
.Ve
.IP "$obj\->\fInextBroadSynonym()\fR" 4
.IX Item "$obj->nextBroadSynonym()"
\&\fBDescription:\fR Iteratively returns each broad synonym
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$broadSynonym\fR \- scalar
.IP "$obj\->\fIhasBroadSynonym()\fR" 4
.IX Item "$obj->hasBroadSynonym()"
\&\fBDescription:\fR Determine whether there are any broad_synonym values
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\& 0 - false
\& 1 - true
.Ve
