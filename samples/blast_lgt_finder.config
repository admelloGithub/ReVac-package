[interface]
classification = LGT

[parameters]
;Location of the ncbi taxonomy files (nodes.dmp and names.dmp
$;NCBITAX$; = /local/db/repository/ncbi/blast/20110831_122720/taxonomy/taxdump/
;Location of the gi_taxid_nucl.dmp file for nucleotides or gi_taxid_prot.dmp file for proteins
$;GI2TAX$; = /local/db/repository/ncbi/blast/20110831_122720/taxonomy/gi_taxid_nucl.dmp
;Host name of the mongo database
$;HOST$; = tettelin-lx.igs.umaryland.edu
;Name of the gi database in mongo
$;TAXONDB$; = gi2taxon
;;Name of the gi collection in mongo.
;;This should match with the paths specified in the $;NCBITAX$; and $;GI2TAX$; so that different version will not overwrite each other.
$;TAXONCOLL$; = gi2taxonnuc_20110831_122720
;;Set to 0 if you want to have results written to the stdout file. 
;;Leave at 1 if you want to overwrite the existing input file with the one that has taxon info.
$;OVERWRITE$;=0
;Location to write ncbi taxonomy index files. Leave this blank if they are in the same location as the nodes/names files.
$;IDX_DIRECTORY$;=$;TMP_DIR$;
;A mapping file of clone/matepair to trace/read. If this is not present it will look for _1/_2 at the end of the name to determine pairs.
$;MAPPING_FILE$;=
;Reference lineage (Homo for instance). This is only necessary if you are looking for LGT within a trace/read. Also must provide a Query lineage.
$;LINEAGE1$;=
;Query lineage (Bacteria for instance). This is only necessary if you are looking for LGT within a trace/read. Also must provide a Reference lineage.
$;LINEAGE2$;=
;Lineage to filter out as bad (example would be 'vector' to filter out anything that has a best hit to vector or where a hit overlaps vector by more than the filter_min_overlap).
$;FILTER_LINEAGE$;=
;Minimum overlap length between a trace/read hit and the filter_lineage. More than this and a clone/matepair will be filtered out. Only applicable if filter_lineage is set.
$;FILTER_MIN_OVERLAP$;=50
;Minimum hit length. 
$;MIN_LENGTH$;=
;Maximum overlap between hits within a trace/read. (Only applicable if looking for LGT within a read/trace).
$;MAX_OVERLAP$;=0
;Append links to wwwblast results (generated elsewhere).
$;APPEND_LINKS$;=0

[input]
$;INPUT_FILE_LIST$; = 
$;INPUT_FILE$; = 
$;INPUT_DIRECTORY$; = 
;; the following is only used when iterating over an INPUT_DIRECTORY
$;INPUT_EXTENSION$; = raw

[output]
$;OUTPUT_TOKEN$; = default
$;OUTPUT_DIRECTORY$; = $;REPOSITORY_ROOT$;/output_repository/$;COMPONENT_NAME$;/$;PIPELINEID$;_$;OUTPUT_TOKEN$;
$;STDOUT_LIST$; = $;REPOSITORY_ROOT$;/output_repository/$;COMPONENT_NAME$;/$;PIPELINEID$;_$;OUTPUT_TOKEN$;/stdout.list

[component]
$;COMPONENT_NAME$; = blast_lgt_finder
$;DESCRIPTION$; = none
$;WORKFLOW_REPOSITORY$; = $;REPOSITORY_ROOT$;/workflow/runtime/$;COMPONENT_NAME$;/$;PIPELINEID$;_$;OUTPUT_TOKEN$;
$;PIPELINE_TOKEN$; = unnamed
;;
;;To only produce raw blast output add;
;;$;SKIP_WF_COMMAND$;=add create bsml list,convert btab to bsml,store config params,dtd validation
;;
$;SKIP_WF_COMMAND$;=


;The version,revision,tag here is set by an interpolated CVS tag
$;VERSION$; = $Name$
$;RELEASE_TAG$; = $Name$
$;REVISION$;            = $Revision: 6529 $

$;TEMPLATE_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.xml
$;ITERATOR1$; = i1
$;ITERATOR1_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.$;ITERATOR1$;.xml

;Distributed options
$;GROUP_COUNT$; = 150
$;NODISTRIB$; = 0

;the following keys are replaced at runtime by the invocation script
$;COMPONENT_CONFIG$; = 
$;COMPONENT_XML$; = 
$;PIPELINE_XML$; = 
$;PIPELINEID$; = 

[include]
$;PROJECT_CONFIG$;=


