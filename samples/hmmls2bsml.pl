#!/usr/bin/perl

eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell

=head1  NAME 

hmmls2bsml.pl - convert hmmpfam raw output to BSML

=head1 SYNOPSIS

USAGE: hmmls2bsml.pl 
        --input=/path/to/somefile.hmmls.raw 
        --output=/path/to/somefile.hmmls.bsml
        --model_name=boxA_repeat
      [ --search_method=hmmls
        --query_mol_type=aa
        --query_mol_class=polypeptide
        --model_mol_type=aa
        --model_mol_class=polypeptide
        --fasta_input=/path/to/hmmls/input.fsa
        --gzip_output=1
        --log=/path/to/some.log
        --debug=4 
        --help
      ]

=head1 OPTIONS

B<--input,-i> 
    Input raw alignment file from an hmmls search.

B<--output,-o> 
    Output BSML file

B<--model_name,-m> 
    Uniquename of the model searched. 

B<--query_mol_type,-qt> 
    Query molecule type (like 'aa' or 'dna'). 

B<--query_mol_class,-qc> 
    Query molecule type (like 'polypeptide' or 'DNA'). 

B<--model_mol_type,-mt> 
    Model molecule type (like 'aa' or 'dna'). 

B<--model_mol_class,-mc> 
    Query molecule type (like 'polypeptide' or 'DNA'). 

B<--fasta_input,-f>
    Optional.  If included, will make a seq data import element and include the 
    defline with the sequences.

B<--gzip_output,-g>
    Optional.  If given a non-zero value, will compress the output and give the output
    file a .gz extension.  If the file already contains one, it won't add another.

B<--debug,-d> 
    Debug level.  Use a large number to turn on verbose debugging. 

B<--log,-l> 
    Log file

B<--help,-h> 
    This help message

=head1   DESCRIPTION

This script is used to convert the raw alignment output from an hmmls search into BSML.

=head1 INPUT

The input file passed to this script must be a raw alignment file generated by hmmls.
Define the input file using the --input option.

Illegal characters will be removed from the IDs for the query sequence and subject hit
if necessary to create legal XML id names.  For each element, the original, unmodified 
name will be stored in the "title" attribute of the Sequence element.  You should make 
sure that your ids don't begin with a number.  This script will successfully create a 
BSML document regardless of your ID names, but the resulting document may not pass DTD 
validation.

=head1 OUTPUT

The BSML file to be created is defined using the --output option.  If the file already exists
it will be overwritten.

Because the hmmls executable is used to perform a variety of searches, including hmmsmart
and hmmtigr, the user may pass a value using --search_method, which will create the
appropriate titles in the BSML Analysis element.  If not passed, the default 'hmmls' is used.

=head1 CONTACT

    Joshua Orvis
    jorvis@tigr.org

=cut

use strict;
use Getopt::Long qw(:config no_ignore_case no_auto_abbrev);
use Pod::Usage;
use Ergatis::Logger;
use BSML::BsmlRepository;
use BSML::BsmlBuilder;
use BSML::BsmlParserTwig;

my $fasta_input;

my %options = ();
my $results = GetOptions (\%options, 
              'input|i=s',
              'output|o=s',
              'model_name|m=s',
              'query_mol_type|qt=s',
              'query_mol_class|qc=s',
              'model_mol_type|mt=s',
              'model_mol_class|mc=s',
              'fasta_input|f=s',
              'gzip_output|g=s',
              'log|l=s',
              'debug=s',
              'help|h') || pod2usage();

my $logfile = $options{'log'} || Ergatis::Logger::get_default_logfilename();
my $logger = new Ergatis::Logger('LOG_FILE'=>$logfile,
                  'LOG_LEVEL'=>$options{'debug'});
$logger = $logger->get_logger();

# display documentation
if( $options{'help'} ){
    pod2usage( {-exitval=>0, -verbose => 2, -output => \*STDOUT} );
}

## make sure all passed options are peachy
&check_parameters(\%options);

## we want a new doc
my $doc = new BSML::BsmlBuilder();

## open the input file for parsing
open (my $ifh, $options{'input'}) || $logger->logdie("can't open input file for reading");

## go through the top of the file and get a few things.
my ($hmm_file, $sequence_file);
while (<$ifh>) {
    if (/HMM file\:\s+(\S+)/) {
        $hmm_file = $1;
    } elsif (/Sequence database\:\s+(\S+)/) {
        $sequence_file = $1;
        last;
    }
}

## fetch deflines
my $deflines = get_deflines($sequence_file);

my $model = $options{'model_name'};
## check that these were successfully parsed
unless ($hmm_file)      { $logger->logdie("HMM file definition not found in input file.") }
unless ($sequence_file) { $logger->logdie("Sequence file definition not found in input file.") }

my $seq = $doc->createAndAddSequence($model, $model, undef, $options{'model_mol_type'}, $options{'model_mol_class'});
$seq->addBsmlLink('analysis', "\#$options{search_method}_analysis", 'input_of');

my %alignments;
my $qry_id;
while (<$ifh>) {

# Expected format:   
#    43.78  (bits) f:157245 t:157289 Target: sp187300.assembly.6002.0  

    if (/(\S+)\s+\(bits\)\s+f:(\S+)\s+t:(\S+)\s+Target:\s+(\S+)/) {
        my($score, $qry_start, $qry_stop, $qry_id) = ($1, $2, $3, $4);
        print STDERR "$model $score $qry_start $qry_stop $qry_id\n";
        ## the query sequence only counts up the first whitespace
        if ($qry_id =~ /(.+?)\s+/) {
            $qry_id = $1;
        }
        unless ($qry_id) { $logger->logdie("Query sequence definition not found in input file.") }
        
        ## add the query sequence file to the doc
        ##  the use of 'aa' is not guaranteed here, but we're not using it anyway in loading
        my $identifier = $qry_id;
        #$doc->createAndAddSeqDataImport($seq, 'fasta', $fasta_input, '', $1) if($options{'fasta_input'});
        #$doc->createAndAddBsmlAttribute($seq, 'defline', $deflines->{$qry_id}) if($deflines->{$qry_id});

                # If we have a seq-pair run we'll make sure we have an alignment to add the run to. If not we'll create it here.
                if(!$alignments{$qry_id}) {
                    $doc->createAndAddSequence($qry_id, $qry_id, undef, $options{'query_mol_type'}, $options{'model_mol_class'});
                    $alignments{$qry_id} = $doc->createAndAddSequencePairAlignment(
                                                                           refseq => $qry_id,
                                                                           refstart => 0,
                                                                           #refend => $cols[2] - 1,
                                                                           #reflength => $cols[2],
                                                                           compseq => $model,
                                                                           class => 'match'
                                                                              );
                    ## add a link element inside this seq-pair-alignment
                    $alignments{$qry_id}->addBsmlLink('analysis', "\#$options{search_method}_analysis", 'computed_by');

                } 

                # NOTE: The position of the comppos and comprunlength is a HACK. The position of the hit in the model is not
                # reported for hmmls.
                my $run = $doc->createAndAddSequencePairRun(   
                                                       alignment_pair => $alignments{$qry_id},
                                                       runscore => $score,
                                                       runlength => abs($qry_stop - $qry_start) + 1,
                                                       comprunlength => abs($qry_stop - $qry_start) + 1,
                                                       refpos => min($qry_start, $qry_stop) - 1,
                                                       refcomplement => ($qry_stop > $qry_start) ? 0 : 1,
                                                       comppos => 0,
                                                       compcomplement => ($qry_stop > $qry_start) ? 0 : 1,
                                                           );
                ## add other attributes of the run
                $doc->createAndAddBsmlAttribute( $run, 'class', 'match_part');
                $doc->createAndAddBsmlAttributes(
                                            $run, 
                                                );
    }
}

## add the analysis element
$doc->createAndAddAnalysis(
                            id => "$options{search_method}_analysis",
                            sourcename => $options{'output'},
                            program => 'hmmls',
                            algorithm => 'hmmls',
                          );

## now write the doc
$doc->write($options{'output'}, '', $options{gzip_output});

exit;


sub check_parameters {
    
    ## make sure input file exists
    if (! -e $options{'input'}) { $logger->logdie("input file $options{'input'} does not exist") }

    ## make user an output file was passed
    if (! $options{'output'}) { $logger->logdie("output option required!") }

    ## handle defaults
    $options{'search_method'} = 'hmmls' unless ( $options{'search_method'} );

    if($options{'fasta_input'}) {
        $fasta_input = $options{'fasta_input'};
    }

    return 1;
}

sub min {
    my ($num1, $num2) = @_;
    
    if ($num1 < $num2) {
        return $num1;
    } else {
        return $num2;
    }
}

## retrieve deflines from a fasta file
sub get_deflines {
    my ($fasta_file) = @_;

    my $deflines = {};

    my $ifh;

    if (! -e $fasta_file) {
        if (-e $fasta_file.".gz") {
            $fasta_file .= ".gz";
        } elsif (-e $fasta_file.".gzip") {
            $fasta_file .= ".gzip";
        }
    }

    if ($fasta_file =~ /\.(gz|gzip)$/) {
        open ($ifh, "<:gzip", $fasta_file)
          || $logger->logdie("can't open input file '$fasta_file': $!");
    } else {
        open ($ifh, $fasta_file)
          || $logger->logdie("Failed opening '$fasta_file' for reading: $!");
      }

    while (<$ifh>) {
        unless (/^>/) {
            next;
        }
        chomp;
        if (/^>((\S+).*)$/) {
            $deflines->{$2} = $1;
        }
    }
    close $ifh;

    if (scalar(keys(%{$deflines})) < 1) {
        $logger->warn("defline lookup failed for '$fasta_file'");
    }

    return $deflines;
}
