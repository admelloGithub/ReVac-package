.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Jaccard_coefficient_cluster_resolver 3"
.TH Jaccard_coefficient_cluster_resolver 3 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
package Jaccard_coefficient_cluster_resolver
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&    Module is used to resolve the clusters within a graph by using the Jaccard's similarity coefficient to break edges within loosely coupled clusters.
.Ve
.PP
.Vb 1
\&    The Jaccard's similarity coefficient is defined as:
.Ve
.PP
.Vb 3
\&    given nodes A and B, 
\&    X = set of nodes connected to A including A
\&    Y = set of nodes connected to B including B
.Ve
.PP
.Vb 3
\&                     #(nodes intersecting X and Y)            (X && Y)
\&    Jlink (A,B)  =   -----------------------------     =     ----------
\&                     #(nodes in set X union set Y)            (X || Y)
.Ve
.PP
.Vb 1
\&    Jlink =  1 when nodes A and B are identically connected.
.Ve
.PP
.Vb 1
\&    Jlink = 0 when nodes A and B have no connected neighbors in common, and are themselves unconnected.
.Ve
.PP
.Vb 1
\&    For connected nodes A and B which have different neighbors, the Jlink score will be between 0 and 1, providing a similiarity coefficient for the level of similarity between sets of connections.
.Ve
.PP
.Vb 1
\&    Another description of the Jaccard similarity coefficient: (http://www.ergometrika.org/Volume3/mulqueen-rev-2003.htm)
.Ve
.PP
The Jaccard index was originally developed to assess similarity among distributions of flora in different geographic areas (Jaccard, 1912). The procedure results in a matching coefficient for binary variables in which joint absences are excluded from both the denominator and the numerator and equal weight is given to matches and non\-matches:
\&\s-1SJ\s0 = a/(a+b+c) x 100, where
.PP
\&\s-1SJ\s0 = Jaccard similarity coefficient,
.PP
a = number of elements shared by all groups,
.PP
b = number of elements unique to the first group, and
.PP
c = number of elements unique to the second group.
.PP
Jaccard, P. (1912). The distribution of flora in the alpine zone. The New Phytologist, 11(2), 37\-50.
.IP "\fInew()\fR" 4
.IX Item "new()"
\&\fBDescription:\fR Constructor: Instantiate an object of Jaccard_coefficient_cluster_resolver 
.Sp
\&\fBParameters:\fR \f(CW$linkScore\fR
.Sp
$linkScore is a real number between 0 and 1 defined as the Jaccard similarity coefficient.
.Sp
\&\fBReturns:\fR \f(CW$Jaccard_coefficient_cluster_resolver_object\fR 
.IP "\fIresolve_clusters()\fR" 4
.IX Item "resolve_clusters()"
\&\fBDescription:\fR Given a set of paired elements, the edges between pairs are removed if the elements have a link score less than that set in the constructor.
.Sp
\&\fBParameters:\fR \f(CW@pairs\fR
.Sp
@pairs is a list of paired elements in the form of array references.  For example:
.Sp
.Vb 5
\&    @pairs = ( 
\&               [ a, b],
\&               [b, c],
\&               [e, f] 
\&               )
.Ve
.Sp
\&\fBReturns:\fR \f(CW@clusters\fR
.Sp
@clusters is a list of array references where each array references provides a list of elements belonging to a single cluster.
.Sp
For example, given the inputted pairs above as input, 
.Sp
.Vb 4
\&    @clusters = ( 
\&                  [a, b, c],
\&                  [e, f], 
\&                  )
.Ve
.Sp
See SingleLinkageClusterer.pm for more details.
