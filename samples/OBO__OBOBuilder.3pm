.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OBO::OBOBuilder 3"
.TH OBO::OBOBuilder 3 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "VERSION"
.IX Header "VERSION"
1.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OBOBuilder;
my \f(CW$obj\fR = new OBO::OBOBuilder( filename => '/tmp/myfile.obo');
\&\f(CW$obj\fR\->addRecord($oboRecord);
\&\f(CW$obj\fR\->\fIwriteFile()\fR;
.SH "AUTHOR"
.IX Header "AUTHOR"
Jay Sundaram
sundaram@jcvi.org
.SH "METHODS"
.IX Header "METHODS"
.IP "\fInew()\fR" 4
.IX Item "new()"
\&\fBDescription:\fR Instantiate OBOBuilder object
.Sp
\&\fBParameters:\fR 
.Sp
%args
.Sp
\&\fBReturns:\fR Returns a reference to OBOBuilder
.IP "$self\->_init(%args)" 4
.IX Item "$self->_init(%args)"
\&\fBDescription:\fR Typical Perl \fIinit()\fR method
.Sp
\&\fBParameters:\fR 
.Sp
%args
.Sp
\&\fBReturns:\fR None
.IP "\s-1DESTROY\s0" 4
.IX Item "DESTROY"
\&\fBDescription:\fR OBOBuilder class destructor
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR None
.ie n .IP "$obj\->addHeader($key, $value)" 4
.el .IP "$obj\->addHeader($key, \f(CW$value\fR)" 4
.IX Item "$obj->addHeader($key, $value)"
\&\fBDescription:\fR Add \s-1OBO\s0 file header
.Sp
\&\fBParameters:\fR 
.Sp
$key   \- scalar/string name of the header
\&\f(CW$value\fR \- scalar/string value of the header attribute
.Sp
\&\fBReturns:\fR None
.IP "$obj\->doesHeaderExist($name)" 4
.IX Item "$obj->doesHeaderExist($name)"
\&\fBDescription:\fR Check whether a header already exists with given name
.Sp
\&\fBParameters:\fR \f(CW$name\fR \- scalar/string name of the header
.Sp
\&\fBReturns:\fR 
.Sp
0 \- scalar false
1 \- scalar true
.IP "$obj\->setFilename($filename)" 4
.IX Item "$obj->setFilename($filename)"
\&\fBDescription:\fR Set the output \s-1OBO\s0 filename
.Sp
\&\fBParameters:\fR \f(CW$filename\fR \- scalar/string name of the output file
.Sp
\&\fBReturns:\fR None
.IP "$obj\->getFilename($filename)" 4
.IX Item "$obj->getFilename($filename)"
\&\fBDescription:\fR Get the output \s-1OBO\s0 filename
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR \f(CW$filename\fR \- scalar/string name of the output file
.IP "$obj\->\fIsetDefaultNamespace()\fR" 4
.IX Item "$obj->setDefaultNamespace()"
\&\fBDescription:\fR Set the default-namespace for this ontology
.Sp
\&\fBParameters:\fR default-namespace \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetDefaultNamespace()\fR" 4
.IX Item "$obj->getDefaultNamespace()"
\&\fBDescription:\fR Retrieve the default-namespace for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR default-namespace \- scalar
.IP "$obj\->\fIdoesHaveDefaultNamespace()\fR" 4
.IX Item "$obj->doesHaveDefaultNamespace()"
\&\fBDescription:\fR Determine whether a value for the default-namespace header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetFormatVersion()\fR" 4
.IX Item "$obj->setFormatVersion()"
\&\fBDescription:\fR Set the format-version for this ontology
.Sp
\&\fBParameters:\fR format-version \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetFormatVersion()\fR" 4
.IX Item "$obj->getFormatVersion()"
\&\fBDescription:\fR Retrieve the format-version for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR format-version \- scalar
.IP "$obj\->\fIdoesHaveFormatVersion()\fR" 4
.IX Item "$obj->doesHaveFormatVersion()"
\&\fBDescription:\fR Determine whether a value for the format-version header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetDataVersion()\fR" 4
.IX Item "$obj->setDataVersion()"
\&\fBDescription:\fR Set the data-version for this ontology
.Sp
\&\fBParameters:\fR data-version \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetDataVersion()\fR" 4
.IX Item "$obj->getDataVersion()"
\&\fBDescription:\fR Retrieve the data-version for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR data-version \- scalar
.IP "$obj\->\fIdoesHaveDataVersion()\fR" 4
.IX Item "$obj->doesHaveDataVersion()"
\&\fBDescription:\fR Determine whether a value for the data-version header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetVersion()\fR" 4
.IX Item "$obj->setVersion()"
\&\fBDescription:\fR Set the version for this ontology
.Sp
\&\fBParameters:\fR version \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetVersion()\fR" 4
.IX Item "$obj->getVersion()"
\&\fBDescription:\fR Retrieve the version for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR version \- scalar
.IP "$obj\->\fIdoesHaveVersion()\fR" 4
.IX Item "$obj->doesHaveVersion()"
\&\fBDescription:\fR Determine whether a value for the version header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetDate()\fR" 4
.IX Item "$obj->setDate()"
\&\fBDescription:\fR Set the date for this ontology
.Sp
\&\fBParameters:\fR date \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetDate()\fR" 4
.IX Item "$obj->getDate()"
\&\fBDescription:\fR Retrieve the date for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR date \- scalar
.IP "$obj\->\fIdoesHaveDate()\fR" 4
.IX Item "$obj->doesHaveDate()"
\&\fBDescription:\fR Determine whether a value for the date header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetSavedBy()\fR" 4
.IX Item "$obj->setSavedBy()"
\&\fBDescription:\fR Set the saved-by for this ontology
.Sp
\&\fBParameters:\fR savedBy \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetSavedBy()\fR" 4
.IX Item "$obj->getSavedBy()"
\&\fBDescription:\fR Retrieve the saved-by for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR saved-by \- scalar
.IP "$obj\->\fIdoesHaveSavedBy()\fR" 4
.IX Item "$obj->doesHaveSavedBy()"
\&\fBDescription:\fR Determine whether a value for the saved-by header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetAutoGeneratedBy()\fR" 4
.IX Item "$obj->setAutoGeneratedBy()"
\&\fBDescription:\fR Set the auto-generated-by for this ontology
.Sp
\&\fBParameters:\fR autoGeneratedBy \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetAutoGeneratedBy()\fR" 4
.IX Item "$obj->getAutoGeneratedBy()"
\&\fBDescription:\fR Retrieve the auto-generated-by for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR auto-generated-by \- scalar
.IP "$obj\->\fIdoesHaveAutoGeneratedBy()\fR" 4
.IX Item "$obj->doesHaveAutoGeneratedBy()"
\&\fBDescription:\fR Determine whether a value for the auto-generated-by header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetSubsetdef()\fR" 4
.IX Item "$obj->setSubsetdef()"
\&\fBDescription:\fR Set the subsetdef for this ontology
.Sp
\&\fBParameters:\fR subsetdef \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetSubsetdef()\fR" 4
.IX Item "$obj->getSubsetdef()"
\&\fBDescription:\fR Retrieve the subsetdef for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR subsetdef \- scalar
.IP "$obj\->\fIdoesHaveSubsetdef()\fR" 4
.IX Item "$obj->doesHaveSubsetdef()"
\&\fBDescription:\fR Determine whether a value for the subsetdef header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetImport()\fR" 4
.IX Item "$obj->setImport()"
\&\fBDescription:\fR Set the import for this ontology
.Sp
\&\fBParameters:\fR import \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetImport()\fR" 4
.IX Item "$obj->getImport()"
\&\fBDescription:\fR Retrieve the import for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR import \- scalar
.IP "$obj\->\fIdoesHaveImport()\fR" 4
.IX Item "$obj->doesHaveImport()"
\&\fBDescription:\fR Determine whether a value for the import header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetSynonymtypedef()\fR" 4
.IX Item "$obj->setSynonymtypedef()"
\&\fBDescription:\fR Set the synonymtypedef for this ontology
.Sp
\&\fBParameters:\fR synonymtypedef \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetSynonymtypedef()\fR" 4
.IX Item "$obj->getSynonymtypedef()"
\&\fBDescription:\fR Retrieve the synonymtypedef for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR synonymtypedef \- scalar
.IP "$obj\->\fIdoesHaveSynonymtypedef()\fR" 4
.IX Item "$obj->doesHaveSynonymtypedef()"
\&\fBDescription:\fR Determine whether a value for the synonymtypedef header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetIdspace()\fR" 4
.IX Item "$obj->setIdspace()"
\&\fBDescription:\fR Set the idspace for this ontology
.Sp
\&\fBParameters:\fR idspace \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetIdspace()\fR" 4
.IX Item "$obj->getIdspace()"
\&\fBDescription:\fR Retrieve the idspace for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR idspace \- scalar
.IP "$obj\->\fIdoesHaveIdspace()\fR" 4
.IX Item "$obj->doesHaveIdspace()"
\&\fBDescription:\fR Determine whether a value for the idspace header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetDefaultRelationshipIdPrefix()\fR" 4
.IX Item "$obj->setDefaultRelationshipIdPrefix()"
\&\fBDescription:\fR Set the default-relationship-id-prefix for this ontology
.Sp
\&\fBParameters:\fR defaultRelationshipIdPrefix \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetDefaultRelationshipIdPrefix()\fR" 4
.IX Item "$obj->getDefaultRelationshipIdPrefix()"
\&\fBDescription:\fR Retrieve the default-relationship-id-prefix for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR default-relationship-id-prefix \- scalar
.IP "$obj\->\fIdoesHaveDefaultRelationshipIdPrefix()\fR" 4
.IX Item "$obj->doesHaveDefaultRelationshipIdPrefix()"
\&\fBDescription:\fR Determine whether a value for the default-relationship-id-prefix header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetIdMapping()\fR" 4
.IX Item "$obj->setIdMapping()"
\&\fBDescription:\fR Set the id-mapping for this ontology
.Sp
\&\fBParameters:\fR idMapping \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetIdMapping()\fR" 4
.IX Item "$obj->getIdMapping()"
\&\fBDescription:\fR Retrieve the id-mapping for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR id-mapping \- scalar
.IP "$obj\->\fIdoesHaveIdMapping()\fR" 4
.IX Item "$obj->doesHaveIdMapping()"
\&\fBDescription:\fR Determine whether a value for the id-mapping header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->\fIsetRemark()\fR" 4
.IX Item "$obj->setRemark()"
\&\fBDescription:\fR Set the remark for this ontology
.Sp
\&\fBParameters:\fR remark \- scalar
.Sp
\&\fBReturns:\fR  none
.IP "$obj\->\fIgetRemark()\fR" 4
.IX Item "$obj->getRemark()"
\&\fBDescription:\fR Retrieve the remark for this ontology
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR remark \- scalar
.IP "$obj\->\fIdoesHaveRemark()\fR" 4
.IX Item "$obj->doesHaveRemark()"
\&\fBDescription:\fR Determine whether a value for the remark header attribute exists
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR 
.Sp
0 \- false (scalar)
1 \- true  (scalar)
.IP "$obj\->getHeaderByName($name)" 4
.IX Item "$obj->getHeaderByName($name)"
\&\fBDescription:\fR Retrieves the header value by header name
.Sp
\&\fBParameters:\fR \f(CW$name\fR \- scalar/string name of the header
.Sp
\&\fBReturns:\fR \f(CW$value\fR \- scalar/string
.IP "$obj\->doesValueExistForHeader($name)" 4
.IX Item "$obj->doesValueExistForHeader($name)"
\&\fBDescription:\fR Determines whether a value exists for the named header attribute
.Sp
\&\fBParameters:\fR \f(CW$name\fR \- scalar/string name of the header
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\& 0 - false (scalar)
\& 1 - true  (scalar)
.Ve
.ie n .IP "$obj\->createAndAddRecord( id=> $id\fR, name => \f(CW$name\fR, def => \f(CW$def\fR, is_obsolete => \f(CW$is_obsolete\fR, type => \f(CW$type)" 4
.el .IP "$obj\->createAndAddRecord( id=> \f(CW$id\fR, name => \f(CW$name\fR, def => \f(CW$def\fR, is_obsolete => \f(CW$is_obsolete\fR, type => \f(CW$type\fR)" 4
.IX Item "$obj->createAndAddRecord( id=> $id, name => $name, def => $def, is_obsolete => $is_obsolete, type => $type)"
\&\fBDescription:\fR Creates a new OBOTerm or OBOTypedefobject and stores reference to that object
.Sp
\&\fBParameters:\fR 
.Sp
$id          \- scalar id
\&\f(CW$name\fR        \- scalar name
\&\f(CW$def\fR         \- scalar def
\&\f(CW$is_obsolete\fR \- scalar is_obsolete
\&\f(CW$type\fR        \- scalar type (term or typedef)
.Sp
\&\fBReturns:\fR reference to the OBOTerm or OBOTypedef
.IP "$obj\->hasRecordWithId($id)" 4
.IX Item "$obj->hasRecordWithId($id)"
\&\fBDescription:\fR Check whether builder has reference to some OBOTerm or OBOTypedef with \f(CW$id\fR
.Sp
\&\fBParameters:\fR 
.Sp
$id \- scalar/string corresponding to the id tag of the OBOTerm or OBOTypedef
.Sp
\&\fBReturns:\fR 
.Sp
0 \- scalar false
1 \- scalar true
.IP "$obj\->getRecordById($id)" 4
.IX Item "$obj->getRecordById($id)"
\&\fBDescription:\fR Return reference to OBOTerm or OBOTypedef with id \f(CW$id\fR
.Sp
\&\fBParameters:\fR 
.Sp
$id \- scalar/string value that corresponds to the \s-1ID\s0 attribute of the OBOTerm or OBOTypedef
.Sp
\&\fBReturns:\fR reference to the OBOTerm or OBOTypedefwith id \f(CW$id\fR
.IP "$obj\->getRecordNameById($id)" 4
.IX Item "$obj->getRecordNameById($id)"
\&\fBDescription:\fR Return name attribute of OBOTerm or OBOTypedef with id \f(CW$id\fR
.Sp
\&\fBParameters:\fR 
.Sp
$id \- scalar/string value that corresponds to the \s-1ID\s0 attribute of the OBOTerm or OBOTypedef
.Sp
\&\fBReturns:\fR name attribute of OBOTerm or OBOTypedefwith id \f(CW$id\fR
.ie n .IP "$obj\->addTermById($id, $oboTerm)" 4
.el .IP "$obj\->addTermById($id, \f(CW$oboTerm\fR)" 4
.IX Item "$obj->addTermById($id, $oboTerm)"
\&\fBDescription:\fR Add reference to OBOTerm with id \f(CW$id\fR
.Sp
\&\fBParameters:\fR 
.Sp
$id       \- scalar/string value that corresponds to the \s-1ID\s0 attribute of the OBOTerm
\&\f(CW$oboTerm\fR  \- OBOTerm
.Sp
\&\fBReturns:\fR none
.ie n .IP "$obj\->addTypedefById($id, $oboTypedef)" 4
.el .IP "$obj\->addTypedefById($id, \f(CW$oboTypedef\fR)" 4
.IX Item "$obj->addTypedefById($id, $oboTypedef)"
\&\fBDescription:\fR Add reference to Typedef OBOTypedef with id \f(CW$id\fR
.Sp
\&\fBParameters:\fR 
.Sp
$id         \- scalar/string value that corresponds to the \s-1ID\s0 attribute of the OBOTypedef
\&\f(CW$oboTypedef\fR \- OBOTypedef
.Sp
\&\fBReturns:\fR none
.IP "$obj\->checkForDuplicates($oboTerm)" 4
.IX Item "$obj->checkForDuplicates($oboTerm)"
\&\fBDescription:\fR Check whether the name-namespace tuple has been repeated
.Sp
\&\fBParameters:\fR OBOTerm or OBOTypedef
.Sp
\&\fBReturns:\fR none
.IP "$obj\->removeRecordById($id)" 4
.IX Item "$obj->removeRecordById($id)"
\&\fBDescription:\fR Remove all references to the OBOTerm or OBOTypedef with id \f(CW$id\fR
.Sp
\&\fBParameters:\fR \f(CW$id\fR (scalar)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIwriteHeaders()\fR" 4
.IX Item "$obj->writeHeaders()"
\&\fBDescription:\fR Writes the headers to the \s-1OBO\s0 file
.Sp
\&\fBParameters:\fR 
.Sp
$fh \- file handle
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIwriteTerms()\fR" 4
.IX Item "$obj->writeTerms()"
\&\fBDescription:\fR Writes the OBOTerms to the \s-1OBO\s0 file
.Sp
\&\fBParameters:\fR 
.Sp
$fh \- file handle
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIwriteTypedefs()\fR" 4
.IX Item "$obj->writeTypedefs()"
\&\fBDescription:\fR Writes the OBOTypedefs to the \s-1OBO\s0 file
.Sp
\&\fBParameters:\fR 
.Sp
$fh \- file handle
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fInextTerm()\fR" 4
.IX Item "$obj->nextTerm()"
\&\fBDescription:\fR Iteratively returns reference to each OBOTerm
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR reference to OBOTerm
.IP "$obj\->\fInextTypedef()\fR" 4
.IX Item "$obj->nextTypedef()"
\&\fBDescription:\fR Iteratively returns reference to each OBOTypedef
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR reference to OBOTypedef
.IP "$obj\->\fIresetTermIndex()\fR" 4
.IX Item "$obj->resetTermIndex()"
\&\fBDescription:\fR Reset the OBOTerm index
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIgetTermCount()\fR" 4
.IX Item "$obj->getTermCount()"
\&\fBDescription:\fR Get the number of Term records
.Sp
\&\fBParameters:\fR none
.Sp
\&\fBReturns:\fR \f(CW$count\fR \- scalar/string
