.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CREATE_PSEUDOMOLECULES 1"
.TH CREATE_PSEUDOMOLECULES 1 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    create_pseudomolecules.pl --output_dir <outdir>  --contig_input <contig file> --strain <strain name> [--input_file <reference accession ids file> --database <genBank database> --format <reference file format> --config_param <nucmer config params> --log <log file> --debug <debug level> --help <usgae>]
.Ve
.PP
.Vb 2
\&    parameters in [] are optional
\&    do NOT type the carets when specifying options
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 2
\&    --output_dir        = /path/to/output_dir. This is the directory where all output 
\&                          files generated during the script execution will be stored.
.Ve
.PP
.Vb 3
\&    --contig_input      = /path/to/contig_file or contig_list_file. This is a file 
\&                          containing the strain genome contigs in fasta format 
\&                          or paths to contig files.
.Ve
.PP
.Vb 1
\&    --strain            = Name of the strain used for naming the output files.
.Ve
.PP
.Vb 2
\&   [--config_param      = Configuration parameters to execute nucmer.
\&                          e.g. -c 100 -maxmatch
.Ve
.PP
.Vb 8
\&    --input_file        = /path/to/input_file. This is a tab-delimited file containing
\&                          genBank accession ids or paths to reference genome files and 
\&                          a serial group number indicating which reference sequences 
\&                          should be concatenated together for analysis .
\&                          e.g.CP000803.1        1
\&                              /path/to/ref_file 1       
\&                              CP000804.1        2
\&                              CP000806.1        2
.Ve
.PP
.Vb 2
\&    --database          = Name of the genBank database used to download the reference 
\&                          genomes.e.g.nucleotide
.Ve
.PP
.Vb 2
\&    --format            = Format in which the reference genome sequence is downloaded
\&                          e.g.FASTA
.Ve
.PP
.Vb 4
\&    --linker_sequence   = This sequence will be inserted after each sequence stitched together into
\&                          a pseudomolecule.  The default sequence (NNNNNCACACACTTAATTAATTAAGTGTGTGNNNNN) will be
\&                          inserted if this isn't specified and contains 6-frame translational stop codons.  This
\&                          can be an empty string.
.Ve
.PP
.Vb 1
\&    --log         = /path/to/log_file. Log file. Optional
.Ve
.PP
.Vb 1
\&    --debug       = Debug level. Optional
.Ve
.PP
.Vb 1
\&    --help]       = Help message, script usage. Optional
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The program creates pseudomolecules from contigs for annotation purposes. Following steps are taken in pseudomolecule creation:
1. If no reference file is passed then concatenate the contigs based on length \- longest to shortest to create a pseudomolecule.
2. If a reference accession file containing accession ids or file paths is specified then download reference genome sequences from genBank.
   Always provide absolute paths for the reference genome files
3. Concatenate reference genomes based on the groups provided by the user.
4. Run nucmer to create .delta file by aligning reference genome with input contigs file
5. Run show-coords to create .coords file for the alignment.
6. Run reference_genome_match_tiler.pl to produce .map file and  for the contigs that mapped with the reference.
7. Run create_fasta_pseudomolecules.pl to produce a pseudomolecule and unmapped contigs fasta file using the .map file.
8. Run cleanFasta.pl to clean up the pseudomolecule file and generate a \s-1FASTA\s0 format file.
9. If there is more than 1 reference group then re-run all the steps above starting from step 4 with unmapped contigs file as the 
   new contig file and next group of reference genomes as the reference sequence. 
10. At the end generate the pseudomolecule of unmapped contigs using create_fasta_pseudomolecules.pl
.SH "CONTACT"
.IX Header "CONTACT"
Sonia Agrawal
sagrawal@som.umaryland.edu
