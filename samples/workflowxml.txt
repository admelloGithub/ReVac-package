Types of Workflow XML in Ergatis

samstestpipeline/pipeline.xml
   |
   |
   |
  \/
workflow/runtime/pipeline/2999/pipeline.xml
   | 
   -/workflow/runtime/wait/2999_default/component.xml
      |
      -/workflow/runtime/wait/2999_default/i1/i1.xml
          |
          -/workflow/runtime/wait/2999_default/i1/g2/g2.xml
          |   |
          |   --/workflow/runtime/wait/2999_default/i1/g2/g2.iter.xml
          |        |
          |        -/workflow/runtime/wait/2999_default/i1/g1/seq2.xml
          |        -/workflow/runtime/wait/2999_default/i1/g1/seq1.xml
          |        -/workflow/runtime/wait/2999_default/i1/g1/seq3.xml
          |        -/workflow/runtime/wait/2999_default/i1/g1/seq4.xml
          |
          --/workflow/runtime/wait/2999_default/i1/g2/g2.xml
          |   |
          |   --/workflow/runtime/wait/2999_default/i1/g2/g2.iter.xml
	  |        |
          |        -/workflow/runtime/wait/2999_default/i1/g2/seq7.xml
          |        -/workflow/runtime/wait/2999_default/i1/g2/seq6.xml
          |        -/workflow/runtime/wait/2999_default/i1/g2/seq5.xml
          |        -/workflow/runtime/wait/2999_default/i1/g2/seq8.xml
          .........
      -/workflow/runtime/wait/2999_default/i2/i2.xml
          .........
   -/workflow/runtime/wu-blastp/2999_customblast/component.xml
          .........

Pipeline level
--------------

1)Skeleton XML - Generated by GUI builder and saved as a pipeline. Can
  also be generated from an previously run pipeline
   
  Example filename
  /usr/local/annotation/BOOMANO//workflow/savedpipelines/samstestpipeline/pipeline.xml

  This XML simply specifies component ordering and user defined
  configuration options.  This skeleton XML provides a template that
  can be reused to build multiple pipeline instances with the same
  component ordering and configuration settings.  It can also be
  combined with other saved pipelines in the GUI builder to build
  complex workflows.

2)Pipeline XML - Valid Workflow XML genenerated from a skeleton XML
  template using Ergatis::SavedPipeline.pm.
 
  Example filename 
  /usr/local/annotation/BOOMANO//workflow/pipeline/2999/pipeline.xml

 This XML is usually generated immediately before running a pipeline
 and specifies same component ordering as the skeleton XML.  This XML
 includes a pipeline UID (PIPELINE_ID) and steps to generate the
 component XML.  Once the PIPELINE_ID is defined, the pipeline XML is
 tied to a single instance of the pipeline.  Each pipeline XML file
 references one or more component XML files as file-based subflows
 (see component XML description).

Component level
---------------

3)Component XML - The top level XML file specifying the steps of a
  component.
  
  Example filename 
  /usr/local/annotation/BOOMANO//workflow/wait/2999_default/component.xml


  The component XML file is referenced as a file-based subflow in
  pipeline XML. The component XML file is created DURING execution of
  a pipeline XML file so prior to execution of the pipeline XML, the
  component XML will not exist.  The component XML is built from the
  XML template for the component in CVS (eg. wu-blastp.xml), which
  includes all the steps involved in running a component.  The
  component XML may also contain 1 or more iterators that can
  distribute jobs to a local cluster or distributed grid.  Usually,
  this file includes "setup"/pre/post-processing steps, like creating
  output directory and building output lists.  Most of the real work
  is done in the iterated steps.  The steps for building the iterator
  batches/groups (eg. create_iterator_groups) and iterator XML files
  are contained within the component XML file.

Iterator level
---------------

4)Iterator XML - Workflow XML listing the XML files for all
  batches/groups that compose an iterator.  This file can either be a
  series of file-based subflows or distributed commands for placing
  each batch/group onto a compute grid
 
  Example filename 
  /usr/local/annotation/BOOMANO//workflow/wait/2999_default/i1/i1.xml

  The iterator XML is a file-based subflow in the component XML file.
  For example, an iterator with 5 groups/batches will have 5 parallel
  RunDistributedCommands, each placing one group XML file onto the
  grid.  Alternatively, for a locally run workflow (or future workflow
  version with RunDistributedCommandSet), this XML will contain 5
  parallel commandsets with a maxparallelcommands=1 setting.  No
  interesting compute steps are contained in this file.  The number of
  batches is determined by a user-defined GROUP_COUNT parameter.  The
  script create_iterator_groups takes a input set (either via list
  file, comma-separated list, directory) and creates the batching,
  taking into a account a maximum number of elements per batch.  For
  example, an input set with 10000 elements, and a GROUP_COUNT of 100,
  will create 100 batches with 1000 elements per batch.  If
  max_elements is set to 500, this same input set of 10000 elements,
  will result in 200 batches, each with 500 elements per batch.


5)Group XML - Workflow XML listing the members that compose a single
  group/batch for an iterator.  In a distributed environment, this XML
  specifies a set of commands that are executed in serial on a single
  compute node (or slot in a hyperthreaded environment).

  Example filenames 
  /usr/local/annotation/BOOMANO/workflow/runtime/wait/2999_default/i1/g1/g1.xml
  /usr/local/annotation/BOOMANO/workflow/runtime/wait/2999_default/i1/g1/g1iter.xml

  The group_number.xml (eg. g1.xml) includes commands to create
  numbered output and temp directories that include the group number
  and steps to create the element XML from the iterator template.  For
  example, in the wu-blastp component, the iterator template
  wu-blastp.i1.xml is used to produce an element XML for each input
  sequence.

  Eg. Given input set seq1.fsa, seq2.fsa, seq3.fsa in group 1 (g1)
  g1.xml includes steps to create seq1.xml,seq2.xml,seq3.xml from
  wu-blastp.i1.xml template using a config file for key replacement

  seq1.xml,seq2.xml,seq3.xml will all be referenced as file-based subflows in g1iter.xml

6)Element XML - Workflow XML that processing a single element of the
  input set.  This is usually where the actual compute work is
  performed and corresponds to a single input file.  In this case, the input
  file was named "sma1.model.29051_001615.fsa"

  Example file
  /usr/local/annotation/BOOMANO/workflow/runtime/wait/2999_default/i1/g1/sma1.model.29051_001615.xml

  The element XML is generated from an iterator template for the
  component.  One element XML file is created for each element in the
  input set.  Note, these elements are batched/grouped based on a
  user-defined GROUP_COUNT parameter

  Eg.  wu-blastp.i1.xml is used to generate the element XML for the
  wu-blastp component.  There will be one element XML for each input
  sequence

Utility scripts
----------------

1)replace_config_keys: Expands placeholder keys in component config
  INI file

*Placeholder keys take the form $;KEY$;=value and can reference other
 keys $;KEY1$;=$;KEY2$;

*Reads user-defined config file for the component obtained from the
 skeleton XML file. This file is usually named
 component.token.user.config

*Imports all referenced INI files. Eg. project.ini

*Replaces all placeholder keys with expanded values

*Writes output config file INI file with expanded values.  This file
 is usually named component.token.final.config

*Add'l key=value pairs can be specified with the --keys option

2)replace_template_keys: Replaces placeholder keys in a XML file using
  a component config INI file

*Component config file specified via --component_conf option.  This
 config file must have expanded values for all placeholders
 (ie. processed by replace_config_keys)

*Placeholder keys take the form $;KEY$;=value

*Using key/values specified in config file, replaces all placeholder
 keys in template XML files

*Add'l key=value pairs can be specified with the --keys option

There are 3 different ways of specifying the template XML file(s).

a)Single template XML via --template_xml option. Output written using
--output_xml

b)Single template XML that is defined within the config INI file.  The
key with the config file is specified using
--template_xml_conf_key. Output written using --output_xml

c)Multiple templates and config options as part of an iterator
-Iterator list file --iterator_list.  Keys within this file are to
 supplement the keys specified in the component config file
-Name of key containted within iterator list file that references XML
 template --iterator_list_key
-Directory prefix for XML template files referenced within iterator
 --iterator_list_dir
-Output is dumped as list of command sets in workflow XML using
 --iterator_output_xml


1)Skeleton XML example (one component pipeline)

<commandSetRoot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="commandSet.xsd">
  <commandSet type="serial">
    <name>start<name>
    <commandSet type="serial">
      <name>component_wu-blastp.default<name>
    </commandSet>
  </commandSet>
</commandSetRoot>


