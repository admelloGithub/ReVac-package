[interface]
classification = database / manipulation

[parameters]
;; Here is a workflow component for efficiently deleting thousands of records from a chado database.
;; The user can direct the removal of records via one of five parameters.
;;
;; Tips:
;; Note that the software does not support comma-separated lists of analysis_id, feature_id, organism_id
;; parameter values.  If you need to delete numerous analysis data sets with different analysis_id values, update
;; the target analysis records and set the algorithm to some bogus value e.g. 'records_to_delete'.  Next, 
;; configure this workflow to delete by algorithm 'records_to_delete'.
;; A similar approach may be employed for deleting multiple data sets for features with different feature_id values.
;; Update the target feature records by setting is_obsolete = 1.  Next, configure this workflow to delete by is_obsolete = 1.

$;DATABASE$; = $;PROJECT$;
;; The database type should describe the relational database management system e.g. sybase or postgresql
$;DATABASE_TYPE$; = sybase
;; Server is the name of the server on which the database resides.
$;SERVER$; =
;; The user must specify only one of the following options:
;; Delete all records related to records with specified analysis.analysis_id.
$;ANALYSIS_ID$; = 
;; Delete all records related to records with specified analysis.algorithm.
$;ALGORITHM$; = 
;; Delete all records related to records with specified feature.feature_id.
$;FEATURE_ID$; = 
;; Delete all records related to records where feature.is_obsolete = 1.
;; Note that specifying any value here, even 0, means that you wish to delete all feature
;; records where is_obsolete = 1.
$;IS_OBSOLETE$; = 
;; Delete alll records related to records with specified organism.organism_id.
$;ORGANISM_ID$; = 
;; The batch size can be controlled with the following variable.
$;BCP_BATCH_SIZE$; = 30000

[output bulk_delete]
$;OUTPUT_TOKEN$; = default
$;OUTPUT_DIRECTORY$; = $;REPOSITORY_ROOT$;/output_repository/$;COMPONENT_NAME$;/$;PIPELINEID$;_$;OUTPUT_TOKEN$;


[component]
$;COMPONENT_NAME$; = bulk_delete
$;DESCRIPTION$; = none
$;WORKFLOW_REPOSITORY$; = $;REPOSITORY_ROOT$;/workflow/runtime/$;COMPONENT_NAME$;/$;PIPELINEID$;_$;OUTPUT_TOKEN$;
$;PIPELINE_TOKEN$; = unnamed

;The version,revision,tag here is set by an interpolated CVS tag
$;VERSION$; = 2.0
$;RELEASE_TAG$; = $Name$
$;REVISION$;            = $Revision: 4680 $

$;TEMPLATE_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.xml
$;ITERATOR1$; = revokepermissions
$;ITERATOR1_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.sqlforce.xml
$;ITERATOR2$; = allcounts
$;ITERATOR2_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.counts.xml
$;ITERATOR3$; = notcounts
$;ITERATOR3_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.counts.xml
$;ITERATOR4$; = withcounts
$;ITERATOR4_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.counts.xml
$;ITERATOR5$; = dropviews
$;ITERATOR5_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.views.xml
$;ITERATOR6$; = createviews
$;ITERATOR6_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.views.xml
$;ITERATOR7$; = bcpout
$;ITERATOR7_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.$;ITERATOR7$;.xml
$;ITERATOR8$; = truncatetables
$;ITERATOR8_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.sqlforce.xml
$;ITERATOR9$; = dropindices
$;ITERATOR9_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.sqlforce.xml
$;ITERATOR10$; = bcpin
$;ITERATOR10_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.$;ITERATOR10$;.xml
$;ITERATOR11$; = restoreindices
$;ITERATOR11_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.sqlforce.xml
$;ITERATOR12$; = dropviews2
$;ITERATOR12_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.views.xml
$;ITERATOR13$; = allcounts2
$;ITERATOR13_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.counts.xml
$;ITERATOR14$; = grantpermissions
$;ITERATOR14_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.sqlforce.xml


;Distributed options
$;GROUP_COUNT$; = 150
$;NODISTRIB$; = 0

;the following keys are replaced at runtime by the invocation script
$;COMPONENT_CONFIG$; = 
$;COMPONENT_XML$; = 
$;PIPELINE_XML$; = 
$;PIPELINEID$; = 

[include]
$;PROJECT_CONFIG$;=
