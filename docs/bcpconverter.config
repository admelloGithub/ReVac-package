[interface]
classification = file / conversion

[parameters]
;; Input and output format examples sybase or postgresql.
;; File extensions examples .out or .bcp (default is .sybase.bcp for sybase and .psql.bcp for postgresql).
;; Input directory must be specified.
;; If user specifies table, then only the tab-delimited file corresponding with that table will processed.
$;INPUT_FORMAT$; = 
$;INPUT_FILE_EXTENSION$; = 
$;INDIR$; = 
$;OUTPUT_FORMAT$; = 
$;OUTPUT_FILE_EXTENSION$; = 
$;TABLE$; = 

[input]

[output]
$;OUTPUT_TOKEN$; = default
$;OUTPUT_DIRECTORY$; = $;REPOSITORY_ROOT$;/output_repository/$;COMPONENT_NAME$;/$;PIPELINEID$;_$;OUTPUT_TOKEN$;
$;BCP_OUTPUT_LIST$; = $;OUTPUT_DIRECTORY$;/$;COMPONENT_NAME$;.bcp.list


[input]
;; Here is the list of core chado tables and chado-mart materialized views that will be backed up.
;; The conversion process will execute on the local machine.
$;TABLE_LIST$; = tableinfo,project,db,cv,cvterm,dbxrefprop,cvtermprop,pub,synonym,pubprop,pub_relationship,pub_dbxref,pubauthor,organism,organismprop,organism_dbxref,cvtermpath,cvtermsynonym,cvterm_relationship,cvterm_dbxref,feature_pub,featureprop_pub,feature_synonym,feature_cvterm,feature_cvterm_dbxref,feature_cvterm_pub,feature_cvtermprop,feature_relationship_pub,feature_relationshipprop,feature_relprop_pub,analysis,analysisprop,phylotree,phylotree_pub,phylonode,phylonode_dbxref,phylonode_pub,phylonode_organism,phylonodeprop,phylonode_relationship,cm_blast,cm_proteins,cm_clusters,cm_cluster_members
;; Here is the list of core chado tables that typically have large data content. 
;; For this reason, the conversion processes for these will execute on the grid.
$;LARGE_TABLES_LIST$; = dbxref,feature,featureprop,feature_dbxref,featureloc,feature_relationship,analysisfeature

[output]
$;OUTPUT_TOKEN$; = default
$;OUTPUT_DIRECTORY$; = $;REPOSITORY_ROOT$;/output_repository/$;COMPONENT_NAME$;/$;PIPELINEID$;_$;OUTPUT_TOKEN$;

[component]
$;COMPONENT_NAME$; = bcpconverter
$;WORKFLOW_REPOSITORY$; = $;REPOSITORY_ROOT$;/workflow/runtime/$;COMPONENT_NAME$;/$;PIPELINEID$;_$;OUTPUT_TOKEN$;
$;PIPELINE_TOKEN$; = unnamed

;The version,revision,tag here is set by an interpolated CVS tag
$;VERSION$;     = 2.0
$;RELEASE_TAG$; = $Name$
$;REVISION$;    = $Revision$

$;TEMPLATE_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.xml

$;ITERATOR1$; = convertbcp
$;ITERATOR1_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.$;ITERATOR1$;.xml
$;ITERATOR2$; = convertlargebcp
$;ITERATOR2_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.$;ITERATOR2$;.xml


;Distributed options
$;GROUP_COUNT$; = 1
; no-distrib = 0 ensures that all executes in series and never parallel
$;NODISTRIB$; = 0

;the following keys are replaced at runtime by the invocation script
$;COMPONENT_CONFIG$; = 
$;COMPONENT_XML$; = 
$;PIPELINE_XML$; = 
$;PIPELINEID$; = 

[include]
$;PROJECT_CONFIG$;=
