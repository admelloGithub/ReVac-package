[interface]
classification = RNA-Seq

[parameters]
;; path to annotation file in GFF or GTF format
$;ANNOTATION_FILE$; =
;; Cufflinks will treat the reads as strand specific (Valid Options : fr-unstranded, fr-firststrand, fr-secondstrand)
$;LIBRARY_TYPE$; = 
;; expected (mean) fragment length
$;FRAG_LEN_MEAN$; = 
;; standard deviation for the distribution on fragment lengths
$;FRAG_LEN_STD_DEV$; = 
;; sets the number of iterations allowed during maximum likelihood estimation of abundances. [5000]
$;MAX_MLE_ITERATIONS$; = 
;; Sets the maximum number of fragments a locus may have before being skipped. [1000000]
$;MAX_BUNDLE_FRAGS$; = 
;; prefix for transfrags in GTF format
$;LABEL$; = CUFF
;; filters out transcripts with very low abundance. [0.1]
$;MIN_ISOFORM_FRACTION$; = 
;; parameter to filter out alignments that lie within the intronic intervals. [0.15]
$;PRE_mRNA_FRACTION$; = 
;; minimum intron size allowed. [50]
$;MIN_INTRON_LEN$; = 
;; maximum intron length. [300000]
$;MAX_INTRON_LEN$; = 
;; alpha value for the binomial test (spliced alignment filtration). [0.001]
$;JUNC_ALPHA$; = 
;; Spliced reads with small anchors are filtered out. [0.09]
$;SMALL_ANCHOR_FRACTION$; = 
;; Assembled transfrags supported by minimum fragments. [10]
$;MIN_FRAGS_PER_TRANSFRAG$; = 
;; The number of bp allowed to enter the intron of a transcript. [8]
$;OVERHANG_TOLERANCE$; = 
;; Maximum genomic length allowed for a given bundle. [3500000]
$;MAX_BUNDLE_LENGTH$; = 
;; Minimum average coverage required to attempt 3' trimming. [10]
$;TRIM3_AVGCOV_THRESH$; = 
;; The fraction of average coverage below which to trim the 3' end of an assembled transcript. [0.1]
$;TRIM3_DROPOFF_FRAC$; = 
;; Use # threads to align reads. [1]
$;NUM_THREADS$; = 
;; /path/to/cufflinks bin directory
$;CUFFLINKS_BIN_DIR$; = $;CUFFLINKS_BIN$;
;; additional Cufflinks parameters
$;OTHER_PARAMS$; = --quiet
;; use --v for verbose summary
$;OTHER_ARGS$; = --v

[input]
;; path to sorted-by-position alignment SAM or BAM file
$;INPUT_FILE$; = 
;; path to list of sorted-by-position alignment SAM or BAM files
$;INPUT_FILE_LIST$; = 
;; path to directory of multiple sorted-by-position alignment SAM or BAM files
$;INPUT_DIRECTORY$; = 
;; the following is only used when iterating over an INPUT_DIRECTORY
$;INPUT_EXTENSION$; = bam 

[output]
;; use a unique sample name
$;OUTPUT_TOKEN$; = default
;; output directory for component results
$;OUTPUT_DIRECTORY$; = $;REPOSITORY_ROOT$;/output_repository/$;COMPONENT_NAME$;/$;PIPELINEID$;_$;OUTPUT_TOKEN$;
;; list of transcript files for each alignment SAM or BAM file
$;OUTPUT_TRANSCRIPT_GTF$; = $;OUTPUT_DIRECTORY$;/$;COMPONENT_NAME$;.transcripts.gtf.list

[component]
$;COMPONENT_NAME$; = cufflinks
$;DESCRIPTION$; = generates cufflinks isoform identification analysis for the given SAM or BAM alignment file
$;WORKFLOW_REPOSITORY$; = $;REPOSITORY_ROOT$;/workflow/runtime/$;COMPONENT_NAME$;/$;PIPELINEID$;_$;OUTPUT_TOKEN$;
$;PIPELINE_TOKEN$; = unnamed

;;Cufflinks version
$;VERSION$; = Cufflinks version 1.3.0

$;TEMPLATE_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.xml
$;ITERATOR1$; = i1
$;ITERATOR1_XML$; = $;DOCS_DIR$;/$;COMPONENT_NAME$;.$;ITERATOR1$;.xml

;;Distributed options
$;GROUP_COUNT$; = 150
$;NODISTRIB$; = 0

;;the following keys are replaced at runtime by the invocation script
$;COMPONENT_CONFIG$; = 
$;COMPONENT_XML$; = 
$;PIPELINE_XML$; = 
$;PIPELINEID$; = 

[include]
$;PROJECT_CONFIG$; = 
