.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Coati::Web::Template 3"
.TH Coati::Web::Template 3 "2006-10-27" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Coati::Web::Template \- Web extension to the Coati package to transform
HTML templates.
.SH "VERSION"
.IX Header "VERSION"
This document refers to Coati::Web::Template revision $\eRevision$
($\eDate$), released under the package \f(CW$Name\fR$.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 14
\& my $template = new Manatee::GetManateeTemplate('FILE'=>"phone_numbers.tt",
\&                        'TEMPLATE_EXT'=>"tigr",
\&                        'URL_HANDLER'=>new Manatee::GetManateeURLs(),
\&                                               'USE_CACHE'=>1,
\&                        'CACHE_DEPS'=>$Manatee->getProjectDeps(),
\&                        'CACHE_EXPIRE'=>(1*(24*(60*60))), #1 day
\&                        'TESTING'=>$testing,
\&                        'PAGINATE'=>100,
\&                        'PAGE'=>1
\&                        );
\&  $template->addText('NAME'=>$name,
\&                    'PHONE_NUMBERS'=>\e@numbers
\&                    );
\& $template->printPage();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "Overview"
.IX Subsection "Overview"
This module wraps around the \s-1CPAN\s0 module HTML::Template.  The module
provides a consistent set of template transformations for all Coati
projects.  The set of template transformations include 1)support for
$;NAME$; keys, 2)support for \s-1TMPL_URL\s0 tags, 3)support for customized
template files specified at runtime.  This module also supports file
based caching of the entire template key/value map, which enables
Coati scripts to bypass data retrieval for cached data sets.
.Sh "Class and object methods"
.IX Subsection "Class and object methods"
.IP "new" 4
.IX Item "new"
\&\fBDescription:\fR
.Sp
Class constructor.  See project specific modules
(eg. GetManateeTemplate in Manatee) for more constructor and
initialization examples.  The Template object should only be
instantiated through a base class.
.Sp
\&\fBSyntax:\fR
.Sp
.Vb 10
\& my $template = new Manatee::GetManateeTemplate('FILE'=>"bacannotationpage.tt",
\&                        'TEMPLATE_EXT'=>[$db],
\&                        'URL_HANDLER'=>new Manatee::GetManateeURLs(),
\&                                               'USE_CACHE'=>1,
\&                        'CACHE_DEPS'=>$Manatee->getProjectDeps(),
\&                        'CACHE_EXPIRE'=>(1*(24*(60*60))), #1 day
\&                        'TESTING'=>$testing,
\&                        'PAGINATE'=>$page_size,
\&                        'PAGE'=>$page
\&                        );
.Ve
.Sp
\&\fBParameters:\fR
.Sp
\&\s-1FILE\s0 \- default template file name.  Only the basename is required.
This file should be in the template search path. The default template
search path is templates/:shared/templates relative to all directories
in \f(CW@INC\fR. See Manatee::GetManateeTemplate module for information about
setting alternative template search paths.
.Sp
\&\s-1TEMPLATE_EXT\s0 \- preferred filename extension for template file.  This
feature allows for database specific template files.  In this example
if \s-1TEMPLATE_EXT\s0 is set to \*(L"tba1\*(R", the Template module will search for
a template file named bacannotationpage.tba1 before using the default
template file.  The \s-1TEMPLATE_EXT\s0 parameter applies to the top level
template file and all files included by \s-1TMPL_INCLUDE\s0 statements.
.Sp
\&\s-1URL_HANDLER\s0 \- Reference to object to lookup URLs specified in \s-1TMPL_URL\s0
tags.  See Coati::Web::URL for more information.
.Sp
\&\s-1TESTING\s0 \- boolean value.  Forces output of template key/value map
instead of translated template for testing purposes.
.Sp
\&\s-1USE_CACHE\s0 \- boolean value to activate caching.  The cache lookup is
based on parameters in the \s-1CGI\s0 namespace and the string specified by
\&\s-1CACHE_DEPS\s0.  See the Coati::Cache::Data module for more information.
On a cache hit, the constructor translates the template file from the
cache, outputs the page, and exits bypassing further execution of the
script.
.Sp
\&\s-1CACHE_EXPIRE\s0 \- number of seconds before caches are marked stale and
regenerated.  If this parameter is not defined, caches will persist
indefinately.
.Sp
\&\s-1PAGINATE\s0 \- maximum number of elements per page in the document.  See
\&\fIpaginate()\fR and \fIcheckCurrentPage()\fR for usage of pagination.
.Sp
\&\s-1PAGE\s0 \- number of the current page. See \fIpaginate()\fR and
\&\fIcheckCurrentPage()\fR for usage of pagination.
.IP "printPage" 4
.IX Item "printPage"
\&\fBDescription:\fR
.Sp
Transforms template and prints page to \s-1STDOUT\s0.  An optional filehandle
 may be specified.
.Sp
\&\fBSyntax:\fR
.Sp
.Vb 1
\&     $template->printPage();
.Ve
.Sp
\&\fBParameters:\fR
.Sp
An optional filehandle reference may be specified.
.IP "checkKey" 4
.IX Item "checkKey"
\&\fBDescription:\fR
.Sp
Check the presence of a key in the template file
.Sp
\&\fBSyntax:\fR
.Sp
.Vb 1
\&     $num_occs = checkKey('KEY');
.Ve
.Sp
\&\fBParameters:\fR
.Sp
An optional filehandle reference may be specified.
.Sp
\&\fBReturn values:\fR
.Sp
Returns the number of occurences of \s-1KEY\s0 in the template file in the
variable \f(CW$num_occs\fR.  Returns 0 if the key is not present in the
template file.
.IP "addText" 4
.IX Item "addText"
\&\fBDescription:\fR
.Sp
Wraps around HTMLTemplate \fIparam()\fR key for specifying tag values.
The value may be a array reference for specifying loops.  See
HTMLTemplate documentation for additional syntax and information
about specifying loops.
.Sp
\&\fBSyntax:\fR
.Sp
.Vb 2
\&    addText($key,$value);
\&    addText('$key'=>$value);
.Ve
.Sp
\&\fBParameters:\fR
.Sp
$key must be a scalar. \f(CW$value\fR can be scalar or an array reference
for specifying loops.  See HTMLTemplate documentation for additional
syntax and information about specifying loops.
.IP "paginate" 4
.IX Item "paginate"
\&\fBDescription:\fR
.Sp
Returns an array of keys that can be used to build a pager; a list of
pages (eg. 1,2,3). The current page is marked with SELECTED_PAGE=1.
The \s-1PAGINATE\s0 option in the constructor specifies the number of
elements per page.
.Sp
\&\fBSyntax:\fR
.Sp
.Vb 1
\&    @page_keys = paginate($num_elements);
.Ve
.Sp
Example of proper usage of pagination fuctions
.Sp
.Vb 7
\&    @page_list = $template->paginate(scalar(@allelts));
\&    foreach my $elt (@allelts){
\&    if(template->isCurrentPage(++$count)){
\&        $template->addText(...);
\&    }
\&    }
\&    $template->addText('PAGE_LIST'=>\e@page_list);
.Ve
.Sp
\&\fBParameters:\fR
.Sp
$num_elements \- total number of elements to process
.Sp
\&\fBReturns:\fR
.Sp
.Vb 5
\&    @page_keys = ({'PAGE_NUM'=>1,
\&        'SELECTED_PAGE'=>1,
\&        },{'PAGE_NUM'=>2,
\&        'SELECTED_PAGE'=>0,
\&        },...)
.Ve
.IP "isCurrentPage" 4
.IX Item "isCurrentPage"
\&\fBDescription:\fR
.Sp
Checks if an element is displayed on the current page.  Returns true in variable \f(CW$is_page\fR if \f(CW$element_number\fR is an element
displayed on the current page.
.Sp
\&\fBSyntax:\fR
.Sp
.Vb 1
\&    $is_page =  isCurrentPage($element_number);
.Ve
.Sp
\&\fBParameters:\fR
.Sp
$element_number \- element number
.Sp
\&\fBReturn values:\fR
.Sp
Returns true in variable if \f(CW$element_number\fR is an element
displayed on the current page.
.IP "indexesInPage" 4
.IX Item "indexesInPage"
\&\fBDescription:\fR
.Sp
Returns a list of array indexes that are on the current page.
Can be used to get an array slice.
.Sp
\&\fBSyntax:\fR
.Sp
.Vb 1
\&    @page_rows = @all_rows[ $template->indexesInPage() ];
.Ve
.ie n .IP """Error message that may appear.""" 4
.el .IP "``Error message that may appear.''" 4
.IX Item "Error message that may appear."
Explanation of error message.
.ie n .IP """Another message that may appear.""" 4
.el .IP "``Another message that may appear.''" 4
.IX Item "Another message that may appear."
Explanation of another error message.
.SH "BUGS"
.IX Header "BUGS"
\&\s-1TEMPLATE_EXT\s0 setting is not being applied to \s-1TMPL_INCLUDE\s0 correctly
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Manatee::GetManateeTemplate.pm
Coati::Web::URL.pm
Manatee::GetManateeURL.pm
Coati::Cache::Data.pm
.SH "AUTHOR(S)"
.IX Header "AUTHOR(S)"
.Vb 3
\& The Institute for Genomic Research
\& 9712 Medical Center Drive
\& Rockville, MD 20850
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002, The Institute for Genomic Research. All Rights Reserved.
