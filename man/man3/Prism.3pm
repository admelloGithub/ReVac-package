.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prism 3"
.TH Prism 3 "2008-09-11" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "VERSION"
.IX Header "VERSION"
This document refers to version N.NN of Prism.pm, released \s-1MMMM\s0, \s-1DD\s0, \s-1YYYY\s0.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Short examples of code that illustrate the use of the class (if this file is a class).
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "Overview"
.IX Subsection "Overview"
An overview of the purpose of the file.
.Sh "Constructor and initialization. applicable, otherwise delete this and parent head2 line."
.IX Subsection "Constructor and initialization. applicable, otherwise delete this and parent head2 line."
.Sh "Class and object methods"
.IX Subsection "Class and object methods"
if applicable, otherwise delete this and parent head2 line.
.IP "$obj\->new(%arg)" 4
.IX Item "$obj->new(%arg)"
\&\fBDescription:\fR 
.Sp
Retrieves
.Sp
\&\fBParameters:\fR 
.Sp
%arg \- 
.Sp
\&\fBReturns:\fR 
.Sp
Returns
.IP "$obj\->_init(%arg)" 4
.IX Item "$obj->_init(%arg)"
\&\fBDescription:\fR Initializes the Coati Modules that Prism
depends upon due to multiple inheritance. In addition, a database handle
is created and set up as an object attribute. A local Prism object is
also created and setup as a _backend object attribute. This is a private
method that should not be called from front-end scripts.
.Sp
\&\fBParameters:\fR \f(CW%arg\fR, hash received from \*(L"new\*(R" containing parameters for object attributes.
.Sp
\&\fBReturns:\fR None.
.Sp
\&\fBReturns:\fR 
.Sp
Returns
.IP "$obj\->\s-1\fIAUTOLOAD\s0()\fR" 4
.IX Item "$obj->AUTOLOAD()"
\&\fBDescription:\fR 
.Sp
Retrieves
.Sp
\&\fBParameters:\fR 
.Sp
Parameters
.Sp
\&\fBReturns:\fR 
.Sp
Returns
.IP "$obj\->\s-1\fIDESTROY\s0()\fR" 4
.IX Item "$obj->DESTROY()"
\&\fBDescription:\fR 
.Sp
Retrieves
.Sp
\&\fBParameters:\fR 
.Sp
Parameters
.Sp
\&\fBReturns:\fR 
.Sp
Returns
.IP "$obj\->\fIgetProjectDeps()\fR" 4
.IX Item "$obj->getProjectDeps()"
\&\fBDescription:\fR 
.Sp
Retrieves
.Sp
\&\fBParameters:\fR 
.Sp
Parameters
.Sp
\&\fBReturns:\fR 
.Sp
Returns
.IP "$obj\->ontologyLoaded($defaultNamespace)" 4
.IX Item "$obj->ontologyLoaded($defaultNamespace)"
\&\fBDescription:\fR Checks whether the ontology with the default-namespace is loaded in the \s-1CV\s0 module
.Sp
\&\fBParameters:\fR \f(CW$defaultNamespace\fR \- scalar
.Sp
\&\fBReturns:\fR
.Sp
.Vb 2
\& 0 - scalar
\& 1 - scalar
.Ve
.IP "$obj\->oboTermStanzaCrossReferences($defaultNamespace)" 4
.IX Item "$obj->oboTermStanzaCrossReferences($defaultNamespace)"
\&\fBDescription:\fR Retrieve the cross-reference data
.Sp
\&\fBParameters:\fR \f(CW$defaultNamespace\fR \- scalar
.Sp
\&\fBReturns:\fR Hash reference
.IP "$obj\->oboTermStanzaSynonyms($defaultNamespace)" 4
.IX Item "$obj->oboTermStanzaSynonyms($defaultNamespace)"
\&\fBDescription:\fR Retrieve the synonym data
.Sp
\&\fBParameters:\fR \f(CW$defaultNamespace\fR \- scalar
.Sp
\&\fBReturns:\fR Hash reference
.IP "$obj\->oboTermStanzaRelationships($defaultNamespace)" 4
.IX Item "$obj->oboTermStanzaRelationships($defaultNamespace)"
\&\fBDescription:\fR Retrieve the relationship data
.Sp
\&\fBParameters:\fR \f(CW$defaultNamespace\fR \- scalar
.Sp
\&\fBReturns:\fR Hash reference
.IP "$obj\->oboTermStanzaProperties($defaultNamespace)" 4
.IX Item "$obj->oboTermStanzaProperties($defaultNamespace)"
\&\fBDescription:\fR Retrieve the cvterm properties
.Sp
\&\fBParameters:\fR \f(CW$defaultNamespace\fR \- scalar
.Sp
\&\fBReturns:\fR Hash reference
.IP "$obj\->deriveOboFromChado($defaultNamespace)" 4
.IX Item "$obj->deriveOboFromChado($defaultNamespace)"
\&\fBDescription:\fR Derive the ontology data from chado \s-1CV\s0 module
.Sp
\&\fBParameters:\fR \f(CW$defaultNamespace\fR \- scalar
.Sp
\&\fBReturns:\fR Reference to OBOBuilder object
.IP "$obj\->\fIanalysispropDuplicateRecordCount()\fR" 4
.IX Item "$obj->analysispropDuplicateRecordCount()"
\&\fBDescription:\fR Will invoke the lower-level \s-1API\s0 method for retrieving number of duplicate records in analysisprop
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR count (int)
.IP "$obj\->\fIdbxrefpropDuplicateRecordCount()\fR" 4
.IX Item "$obj->dbxrefpropDuplicateRecordCount()"
\&\fBDescription:\fR Will invoke the lower-level \s-1API\s0 method for retrieving number of duplicate records in dbxrefprop
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR count (int)
.IP "$obj\->\fIfeatureCvtermpropDuplicateRecordCount()\fR" 4
.IX Item "$obj->featureCvtermpropDuplicateRecordCount()"
\&\fBDescription:\fR Will invoke the lower-level \s-1API\s0 method for retrieving number of duplicate records in feature_cvtermprop
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR count (int)
.IP "$obj\->\fIfeaturepropDuplicateRecordCount()\fR" 4
.IX Item "$obj->featurepropDuplicateRecordCount()"
\&\fBDescription:\fR Will invoke the lower-level \s-1API\s0 method for retrieving number of duplicate records in featureprop
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR count (int)
.IP "$obj\->\fIfeatureRelationshippropDuplicateRecordCount()\fR" 4
.IX Item "$obj->featureRelationshippropDuplicateRecordCount()"
\&\fBDescription:\fR Will invoke the lower-level \s-1API\s0 method for retrieving number of duplicate records in feature_relationshipprop
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR count (int)
.IP "$obj\->\fIorganismpropDuplicateRecordCount()\fR" 4
.IX Item "$obj->organismpropDuplicateRecordCount()"
\&\fBDescription:\fR Will invoke the lower-level \s-1API\s0 method for retrieving number of duplicate records in organismprop
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR count (int)
.IP "$obj\->\fIphylonodepropDuplicateRecordCount()\fR" 4
.IX Item "$obj->phylonodepropDuplicateRecordCount()"
\&\fBDescription:\fR Will invoke the lower-level \s-1API\s0 method for retrieving number of duplicate records in phylonodeprop
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR count (int)
.IP "$obj\->\fIpubpropDuplicateRecordCount()\fR" 4
.IX Item "$obj->pubpropDuplicateRecordCount()"
\&\fBDescription:\fR Will invoke the lower-level \s-1API\s0 method for retrieving number of duplicate records in pubprop
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR count (int)
.IP "$obj\->\fIfeaturelocFminGreaterThanFmaxCount()\fR" 4
.IX Item "$obj->featurelocFminGreaterThanFmaxCount()"
\&\fBDescription:\fR Will invoke the lower-level \s-1API\s0 method for retrieving number of featureloc records where fmin>fmax
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR count (int)
.IP "$obj\->\fIinvalidFeaturelocStrandValueCount()\fR" 4
.IX Item "$obj->invalidFeaturelocStrandValueCount()"
\&\fBDescription:\fR Will retrieve the number of featureloc records for which the strand is not \s-1NULL\s0, \-1, 0, 1
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR count (int)
.IP "$obj\->\fIfeatureResiduesSeqlenLookup()\fR" 4
.IX Item "$obj->featureResiduesSeqlenLookup()"
\&\fBDescription:\fR Will retrieve all feature_id, uniquename, residues and seqlen values from feature table
.Sp
\&\fBParameters:\fR \f(CW$ignore_obsolete\fR (scalar), \f(CW$feature_type\fR (scalar)
.Sp
\&\fBReturns:\fR Reference to hash
.IP "$obj\->\fIcvtermpath_type_id_lookup()\fR" 4
.IX Item "$obj->cvtermpath_type_id_lookup()"
\&\fBDescription:\fR Will populate the cvtermpath_type_id_lookup
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIcheck_cvtermpath_type_id_lookup()\fR" 4
.IX Item "$obj->check_cvtermpath_type_id_lookup()"
\&\fBDescription:\fR For assigning relationship type between two controlled vocabulary terms
.Sp
\&\fBParameters:\fR \f(CW$cvterm_id\fR (scalar), \f(CW$cvterm_id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$type_id\fR (scalar)
.IP "$obj\->\fIasmblIdExist()\fR" 4
.IX Item "$obj->asmblIdExist()"
\&\fBDescription:\fR For determining whether the asmbl_id exists in the database
.Sp
\&\fBParameters:\fR \f(CW$asmbl_id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$boolean\fR (scalar)
.IP "$obj\->\fIassemblyHaveCDSFeatures()\fR" 4
.IX Item "$obj->assemblyHaveCDSFeatures()"
\&\fBDescription:\fR For determining whether the assembly has any \s-1CDS\s0 features
.Sp
\&\fBParameters:\fR \f(CW$asmbl_id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$boolean\fR (scalar)
.IP "$obj\->\fIassemblySequence()\fR" 4
.IX Item "$obj->assemblySequence()"
\&\fBDescription:\fR For retrieving the assembly.sequence
.Sp
\&\fBParameters:\fR \f(CW$asmbl_id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$sequence\fR (scalar)
.IP "$obj\->\fIcdsCoordinates()\fR" 4
.IX Item "$obj->cdsCoordinates()"
\&\fBDescription:\fR For retrieving the \s-1CDS\s0 feat_name, end5, end3
.Sp
\&\fBParameters:\fR \f(CW$asmbl_id\fR (scalar)
.Sp
\&\fBReturns:\fR Reference to array of references pointing to arrays
.IP "$obj\->\fIcurrentCDSValues()\fR" 4
.IX Item "$obj->currentCDSValues()"
\&\fBDescription:\fR For retrieving the \s-1CDS\s0 asm_feature.sequence and asm_feature.protein
.Sp
\&\fBParameters:\fR \f(CW$asmbl_id\fR (scalar)
.Sp
\&\fBReturns:\fR Reference to array of references pointing to arrays
.IP "$obj\->\fIclusterAnalysisIdValues()\fR" 4
.IX Item "$obj->clusterAnalysisIdValues()"
\&\fBDescription:\fR For retrieving the analysis_id values for any clustering related program
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$analysis_id\fR (scalar)
.IP "$obj\->\fIblastAnalysisIdValues()\fR" 4
.IX Item "$obj->blastAnalysisIdValues()"
\&\fBDescription:\fR For retrieving the analysis_id values for any blast related program
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$analysis_id\fR (scalar)
.IP "$obj\->\fIstoreRecordsInCmBlast()\fR" 4
.IX Item "$obj->storeRecordsInCmBlast()"
\&\fBDescription:\fR For storing records in the cm_blast table/BCP file
.Sp
\&\fBParameters:\fR \f(CW$records\fR (reference to array)
.Sp
\&\fBReturns:\fR \f(CW$recctr\fR (scalar)
.IP "$obj\->\fIblastRecordsForCmBlastByAnalysisId()\fR" 4
.IX Item "$obj->blastRecordsForCmBlastByAnalysisId()"
\&\fBDescription:\fR For retrieving all blast records to be processed and stored in cm_blast
.Sp
\&\fBParameters:\fR \f(CW$analysis_id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$cmBlastRecords\fR (reference to array)
.IP "$obj\->\fIgenerateBlastRecordsForCmBlastByAnalysisId1()\fR" 4
.IX Item "$obj->generateBlastRecordsForCmBlastByAnalysisId1()"
\&\fBDescription:\fR Retrieve all blast records and generate records to be stored in cm_blast
.Sp
\&\fBParameters:\fR \f(CW$analysis_id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$cmBlastCtr\fR (scalar)
.IP "$obj\->\fIgenerateBlastRecordsForCmBlastByAnalysisId()\fR" 4
.IX Item "$obj->generateBlastRecordsForCmBlastByAnalysisId()"
\&\fBDescription:\fR Retrieve all blast records and generate records to be stored in cm_blast
.Sp
\&\fBParameters:\fR \f(CW$analysis_id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$cmBlastCtr\fR (scalar)
.IP "$obj\->\fIstatisticsForCmBlastByAnalysisId()\fR" 4
.IX Item "$obj->statisticsForCmBlastByAnalysisId()"
\&\fBDescription:\fR For retrieving all average percent_identity, average percent_similarity 
and minimum p_value for all match features linked to some blast analysis_id
.Sp
\&\fBParameters:\fR \f(CW$analysis_id\fR (scalar), \f(CW$feature_id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$lookup\fR (reference to hash)
.IP "$obj\->\fImatchFeatureIdListForCmBlastByAnalysisId()\fR" 4
.IX Item "$obj->matchFeatureIdListForCmBlastByAnalysisId()"
\&\fBDescription:\fR For retrieving list of all match feature_id values linked to some blast analysis_id
.Sp
\&\fBParameters:\fR \f(CW$analysis_id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$arrayref\fR (reference to array)
.IP "$obj\->\fIallIsCurrentAssemblyArrayRef()\fR" 4
.IX Item "$obj->allIsCurrentAssemblyArrayRef()"
\&\fBDescription:\fR For retrieving list of assembly identifiers which are current
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$arrayref\fR (reference to array)
.IP "$obj\->\fIassemblyLookup()\fR" 4
.IX Item "$obj->assemblyLookup()"
\&\fBDescription:\fR Retrieves all assembly identifiers
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$assemblyLookup\fR (reference to hash)
.IP "$obj\->\fIassemblyHasNcRNASubFeatures()\fR" 4
.IX Item "$obj->assemblyHasNcRNASubFeatures()"
\&\fBDescription:\fR Verify whether the specified assembly has ncRNA subfeatures
.Sp
\&\fBParameters:\fR \f(CW$asmbl_id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$boolean\fR (scalar)
.IP "$obj\->\fIncRNASequenceLookupByAsmblId()\fR" 4
.IX Item "$obj->ncRNASequenceLookupByAsmblId()"
\&\fBDescription:\fR Retrieves all sequences for the ncRNA features that 
are associated with the specified assembly
.Sp
\&\fBParameters:\fR \f(CW$asmbl_id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$ncRNALookup\fR (reference to hash)
.IP "$obj\->\fIasmblIdArrayRefWithIsCurrentAndHasNcRNAFeature()\fR" 4
.IX Item "$obj->asmblIdArrayRefWithIsCurrentAndHasNcRNAFeature()"
\&\fBDescription:\fR For retrieving list of assembly identifiers which are current and have some associated ncRNA sub-features
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$arrayref\fR (reference to array)
.IP "$obj\->\fIexistsAssemblyWithIdentifierAndNcRNAFeatures()\fR" 4
.IX Item "$obj->existsAssemblyWithIdentifierAndNcRNAFeatures()"
\&\fBDescription:\fR Verify whether the assembly with specified identifier exists and whether has associated ncRNA sub-features
.Sp
\&\fBParameters:\fR \f(CW$asmbl_id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$boolean\fR (scalar)
.IP "$obj\->\fIgenusAndSpeciesByUniquename()\fR" 4
.IX Item "$obj->genusAndSpeciesByUniquename()"
\&\fBDescription:\fR Retrieve the genus and species for the sequence given the feature.uniquename
.Sp
\&\fBParameters:\fR \f(CW$id\fR (scalar)
.Sp
\&\fBReturns:\fR \f(CW$genus\fR (scalar), \f(CW$species\fR (scalar)
.IP "$obj\->\fIfeaturePropertiesByUniquename()\fR" 4
.IX Item "$obj->featurePropertiesByUniquename()"
\&\fBDescription:\fR Retrieve array of cvterm.name and featureprop.value given the feature.uniquename
.Sp
\&\fBParameters:\fR \f(CW$id\fR (scalar)
.Sp
\&\fBReturns:\fR Reference to array
.IP "$obj\->listOfReferenceSequencesByType(type=>$type, listref=>$listref)" 4
.IX Item "$obj->listOfReferenceSequencesByType(type=>$type, listref=>$listref)"
\&\fBDescription:\fR Retrieve all feature.uniquename values for all of the reference sequence types specified
by \f(CW$type\fR (comma\-separated list) and store them in array ($listref).  This method supports the
create_chado2bsml_iterator_list.pl program.
.Sp
\&\fBParameters:\fR 
.Sp
$type (scalar \- string) comma-separated list of sequence types
\&\f(CW$listref\fR (reference to array) array in which to push the retrieved values
.Sp
\&\fBReturns:\fR None
.IP "$obj\->retrieveModelCollectionByAssemblyIdentifier(id=>$id)" 4
.IX Item "$obj->retrieveModelCollectionByAssemblyIdentifier(id=>$id)"
\&\fBDescription:\fR Retrieve all model features for the specified assembly identifier
.Sp
\&\fBParameters:\fR \f(CW$id\fR (scalar \- string)
.Sp
\&\fBReturns:\fR \f(CW$modelCollection\fR (reference to Annotation::Features::ModelCollection)
.IP "$obj\->retrieveCDSCollectionByAssemblyIdentifier(id=>$id)" 4
.IX Item "$obj->retrieveCDSCollectionByAssemblyIdentifier(id=>$id)"
\&\fBDescription:\fR Retrieve all \s-1CDS\s0 features for the specified assembly identifier
.Sp
\&\fBParameters:\fR \f(CW$id\fR (scalar \- string)
.Sp
\&\fBReturns:\fR \f(CW$cdsCollection\fR (reference to Annotation::Features::FeatureCollection)
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
This module checks for a \s-1PRISM\s0 environment variable to determine what relational database
type to use, which database server to connect to, and what schema type we are using.
If the variable is not set, then the module will parse the Prism.conf configuration
file to set it and will also set additional environment variables that are configured there.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP """Error message that may appear.""" 4
.el .IP "``Error message that may appear.''" 4
.IX Item "Error message that may appear."
Explanation of error message.
.ie n .IP """Another message that may appear.""" 4
.el .IP "``Another message that may appear.''" 4
.IX Item "Another message that may appear."
Explanation of another error message.
.SH "BUGS"
.IX Header "BUGS"
Description of known bugs (and any workarounds). Usually also includes an
invitation to send the author(s) bug reports.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Prism.conf \- Configuration file with parameters containing which \s-1RDBMS\s0 to use,
which server it is running on, and what schema (Euk, Prok, etc...) type we need.
This file also contains other environment variables that may need to be set.
.PP
List of any other files or Perl modules needed by class and a
brief description why.
.SH "AUTHOR(S)"
.IX Header "AUTHOR(S)"
.Vb 3
\& The Institute for Genomic Research
\& 9712 Medical Center Drive
\& Rockville, MD 20850
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002, The Institute for Genomic Research. All Rights Reserved.
.PP
``
