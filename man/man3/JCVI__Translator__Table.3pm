.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "JCVI::Translator::Table 3"
.TH JCVI::Translator::Table 3 "2008-09-11" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
JCVI::Translator::Table \- Translation table for JCVI::Translator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use JCVI::Translator::Table;
.Ve
.PP
.Vb 5
\&    my $table = new JCVI::Translator();
\&    my $table = new JCVI::Translator(11);
\&    my $table = new JCVI::Translator( 12, { type => 'id' } );
\&    my $table = new JCVI::Translator( 'Yeast Mitochondrial', { type => 'name' } );
\&    my $table = new JCVI::Translator( 'mito', { type => 'name' } );
.Ve
.PP
.Vb 2
\&    my $table = custom JCVI::Translator( \e$custom_table );
\&    my $tale = custom JCVI::Translator( \e$custom_table, { bootstrap => 0 } );
.Ve
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.Sh "new"
.IX Subsection "new"
.Vb 3
\&    my $table = JCVI::Translator::Table->new();
\&    my $table = JCVI::Translator::Table->new( $id );
\&    my $table = JCVI::Translator::Table->new( $id, \e%params );
.Ve
.PP
This method creates a translation table by loading a table string from the
internal list. Pass an \s-1ID\s0 and the type of \s-1ID\s0. By default, it will load the
translation table with id 1. The type of \s-1ID\s0 may be \*(L"id\*(R" or \*(L"name,\*(R" which
correspond to the numeric id of the translation table or the long name of the
translation table. For instance, below are the headers for the first 3 table
strings.
.PP
.Vb 19
\&    {
\&    name "Standard" ,
\&    name "SGC0" ,
\&    id 1 ,
\&    ...
\&    },
\&    {
\&    name "Vertebrate Mitochondrial" ,
\&    name "SGC1" ,
\&    id 2 ,
\&    ...
\&    },
\&    {
\&    name "Yeast Mitochondrial" ,
\&    name "SGC2" ,
\&    id 3 ,
\&    ...
\&    },
\&    ...
.Ve
.PP
By default, the \*(L"Standard\*(R" translation table will be loaded. You may instantiate
this translation table by calling any of the following:
.PP
.Vb 7
\&    my $t = JCVI::Translator::Table->new();
\&    my $t = JCVI::Translator::Table->new(1);
\&    my $t = JCVI::Translator::Table->new( 1,          { type => 'id' } );
\&    my $t = JCVI::Translator::Table->new( 'Standard', { type => 'name' } );
\&    my $t = JCVI::Translator::Table->new( 'SGC0',     { type => 'name' } );
\&    my $t = JCVI::Translator::Table->new( 'standard', { type => 'name' } );
\&    my $t = JCVI::Translator::Table->new( 'stan',     { type => 'name' } );
.Ve
.PP
For partial matches, this module will use the first matching translation
table.
.PP
.Vb 1
\&    my $t = JCVI::Translator::Table->new( 'mitochondrial', { type => 'name' } );
.Ve
.PP
This will use translation table with \s-1ID\s0 2, \*(L"Vertebrate Mitochondrial,\*(R" because
that is the first match (even though \*(L"Yeast Mitochondrial\*(R" would also match).
.Sh "\fIcustom()\fP"
.IX Subsection "custom()"
.Vb 2
\&    my $table = JCVI::Translator::Table->custom( $table_ref );
\&    my $table = JCVI::Translator::Table->custom( $table_ref, \e%params );
.Ve
.PP
Create a translation table based off a passed table reference for custom
translation tables. Loads degenerate nucleotides if bootstrap isn't set (this
can take a little time). The format of the translation table should reflect
those of the internal tables:
.PP
.Vb 8
\&    name "Names separated; by semicolons"
\&    name "May have multiple lines"
\&    id 99
\&    ncbieaa  "AMINOACIDS...",
\&    sncbieaa "-M--------..."
\&    -- Base1  AAAAAAAAAA...
\&    -- Base2  AAAACCCCGG...
\&    -- Base3  ACGTACTGAC...
.Ve
.PP
This module is a bit more permissive than that; see the \f(CW$TABLE_REGEX\fR regular
expression to see that actual format.
.PP
Examples:
.PP
.Vb 9
\&    $translator = new Translator(
\&        table_ref => \e'name "All Alanines; All the Time"
\&                       id 9000
\&                       ncbieaa  "AAAAAAAA"
\&                       sncbieaa "----M---"
\&                       base1     AAAAAAAA
\&                       base2     AACCGGTT
\&                       base3     ACACACAC'
\&    );
.Ve
.PP
.Vb 4
\&    $translator = new Translator(
\&        table_ref => \e$table,
\&        bootstrap  => 0
\&    );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "add_translation"
.IX Subsection "add_translation"
.Vb 2
\&    $translator->add_translation( $codon, $residue );
\&    $translator->add_translation( $codon, $residue, \e%params );
.Ve
.PP
Add a codon-to-residue translation to the translation table. \f(CW$start\fR inidicates
if this is a start codon.
.PP
Examples:
.PP
.Vb 3
\&    # THESE AREN'T REAL!!!
\&    $translator->add_translation( 'ABA', 'G' );
\&    $translator->add_translation( 'ABA', 'M', 1 );
.Ve
.Sh "bootstrap"
.IX Subsection "bootstrap"
.Vb 1
\&    $translator->bootstrap();
.Ve
.PP
Bootstrap the translation table. Find every possible translation, even those
that involve degenerate nucleotides or ambiguous amino acids.
.Sh "string"
.IX Subsection "string"
.Vb 2
\&    my $table_string_ref = $translator->string();
\&    my $table_string_ref = $translator->string( \e%params );
.Ve
.PP
Returns the table string. \f(CW%params\fR can specify whether or not this table should
try to bootstrap itself using the bootstrap function above. By default, it will
try to.
.PP
Examples:
.PP
.Vb 2
\&    my $table_string_ref = $translator->string();
\&    my $table_string_ref = $translator->string( { bootstrap => 0 } );
.Ve
.SH "MISC"
.IX Header "MISC"
These are the original translation tables. The translation tables used by this
module have been boostrapped \- they include translations for degenerate
nucleotides and allow ambiguous amino acids to be the targets of translation
(e.g. every effort has been made to give a translation that isn't \*(L"X\*(R").
.PP
.Vb 162
\&    {
\&    name "Standard" ,
\&    name "SGC0" ,
\&    id 1 ,
\&    ncbieaa  "FFLLSSSSYY**CC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG",
\&    sncbieaa "---M---------------M---------------M----------------------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    },
\&    {
\&    name "Vertebrate Mitochondrial" ,
\&    name "SGC1" ,
\&    id 2 ,
\&    ncbieaa  "FFLLSSSSYY**CCWWLLLLPPPPHHQQRRRRIIMMTTTTNNKKSS**VVVVAAAADDEEGGGG",
\&    sncbieaa "--------------------------------MMMM---------------M------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    },
\&    {
\&    name "Yeast Mitochondrial" ,
\&    name "SGC2" ,
\&    id 3 ,
\&    ncbieaa  "FFLLSSSSYY**CCWWTTTTPPPPHHQQRRRRIIMMTTTTNNKKSSRRVVVVAAAADDEEGGGG",
\&    sncbieaa "----------------------------------MM----------------------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    },
\&    {
\&    name "Mold Mitochondrial; Protozoan Mitochondrial;"
\&    name "Coelenterate Mitochondrial; Mycoplasma; Spiroplasma" ,
\&    name "SGC3" ,
\&    id 4 ,
\&    ncbieaa  "FFLLSSSSYY**CCWWLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG",
\&    sncbieaa "--MM---------------M------------MMMM---------------M------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    },
\&    {
\&    name "Invertebrate Mitochondrial" ,
\&    name "SGC4" ,
\&    id 5 ,
\&    ncbieaa  "FFLLSSSSYY**CCWWLLLLPPPPHHQQRRRRIIMMTTTTNNKKSSSSVVVVAAAADDEEGGGG",
\&    sncbieaa "---M----------------------------MMMM---------------M------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    },
\&    {
\&    name "Ciliate Nuclear; Dasycladacean Nuclear; Hexamita Nuclear" ,
\&    name "SGC5" ,
\&    id 6 ,
\&    ncbieaa  "FFLLSSSSYYQQCC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG",
\&    sncbieaa "-----------------------------------M----------------------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    },
\&    {
\&    name "Echinoderm Mitochondrial; Flatworm Mitochondrial" ,
\&    name "SGC8" ,
\&    id 9 ,
\&    ncbieaa  "FFLLSSSSYY**CCWWLLLLPPPPHHQQRRRRIIIMTTTTNNNKSSSSVVVVAAAADDEEGGGG",
\&    sncbieaa "-----------------------------------M---------------M------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    },
\&    {
\&    name "Euplotid Nuclear" ,
\&    name "SGC9" ,
\&    id 10 ,
\&    ncbieaa  "FFLLSSSSYY**CCCWLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG",
\&    sncbieaa "-----------------------------------M----------------------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    },
\&    {
\&    name "Bacterial and Plant Plastid" ,
\&    id 11 ,
\&    ncbieaa  "FFLLSSSSYY**CC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG",
\&    sncbieaa "---M---------------M------------MMMM---------------M------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    },
\&    {
\&    name "Alternative Yeast Nuclear" ,
\&    id 12 ,
\&    ncbieaa  "FFLLSSSSYY**CC*WLLLSPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG",
\&    sncbieaa "-------------------M---------------M----------------------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    },
\&    {
\&    name "Ascidian Mitochondrial" ,
\&    id 13 ,
\&    ncbieaa  "FFLLSSSSYY**CCWWLLLLPPPPHHQQRRRRIIMMTTTTNNKKSSGGVVVVAAAADDEEGGGG",
\&    sncbieaa "---M------------------------------MM---------------M------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    },
\&    {
\&    name "Alternative Flatworm Mitochondrial" ,
\&    id 14 ,
\&    ncbieaa  "FFLLSSSSYYY*CCWWLLLLPPPPHHQQRRRRIIIMTTTTNNNKSSSSVVVVAAAADDEEGGGG",
\&    sncbieaa "-----------------------------------M----------------------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    } ,
\&    {
\&    name "Blepharisma Macronuclear" ,
\&    id 15 ,
\&    ncbieaa  "FFLLSSSSYY*QCC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG",
\&    sncbieaa "-----------------------------------M----------------------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    } ,
\&    {
\&    name "Chlorophycean Mitochondrial" ,
\&    id 16 ,
\&    ncbieaa  "FFLLSSSSYY*LCC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG",
\&    sncbieaa "-----------------------------------M----------------------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    } ,
\&    {
\&    name "Trematode Mitochondrial" ,
\&    id 21 ,
\&    ncbieaa  "FFLLSSSSYY**CCWWLLLLPPPPHHQQRRRRIIMMTTTTNNNKSSSSVVVVAAAADDEEGGGG",
\&    sncbieaa "-----------------------------------M---------------M------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    } ,
\&    {
\&    name "Scenedesmus obliquus Mitochondrial" ,
\&    id 22 ,
\&    ncbieaa  "FFLLSS*SYY*LCC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG",
\&    sncbieaa "-----------------------------------M----------------------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    } ,
\&    {
\&    name "Thraustochytrium Mitochondrial" ,
\&    id 23 ,
\&    ncbieaa  "FF*LSSSSYY**CC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG",
\&    sncbieaa "--------------------------------M--M---------------M------------"
\&    -- Base1  TTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAGGGGGGGGGGGGGGGG
\&    -- Base2  TTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGGTTTTCCCCAAAAGGGG
\&    -- Base3  TCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Kevin Galinsky, <kgalinsk@jcvi.org>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008\-2009 J. Craig Venter Institute, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
