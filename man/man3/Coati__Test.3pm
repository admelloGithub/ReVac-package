.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Coati::Test 3"
.TH Coati::Test 3 "2006-10-27" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Test.pm \- Provides tools to aid in the automated testing of Coati Projects.
.SH "VERSION"
.IX Header "VERSION"
This document refers to version 1.00 of Coati::Test.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
A short example of the usage of this module is:
.PP
.Vb 20
\&  use Coati::Test;
\&  my $tester = Coati::Test->new( debug      => $debug,
\&                            testuser   => $testuser,
\&                            testpasswd => $testpasswd,
\&                            project    => $project,
\&                            url        => $url,
\&                            testlist   => $testlist,
\&                            modulelist => $modulelist,
\&                            notifyuser => 0,
\&                            backends   => { %backends },
\&                            paths      => { %paths },
\&                            rowcolors  => [ @rowcolors ],
\&                            schemas    => [ @schemas ],
\&                            profile = > 0|1
\&                          );
\&  @files = $tester->parse_list;
\&  my $script = $files[0];
\&  $tester->test_syntax($script);
\&  $tester->test_pod($script);
\&  $tester->test_function($script);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is to aid in the automated and manual testing of
front-end scripts and other modules of Coati based applications.
It provides methods for testing syntax, \s-1POD\s0 formatting and
validity, as well as script/module output.
.Sh "Overview"
.IX Subsection "Overview"
Overview here.
.Sh "Class and object methods"
.IX Subsection "Class and object methods"
.IP "new" 4
.IX Item "new"
\&\fBDescription:\fR The module constructor.
.Sp
\&\fBParameters:\fR \f(CW%arg\fR, a hash containing attribute-value pairs to
initialize the object with. Initialization actually occurs in the
private _init method.
.Sp
\&\fBReturns:\fR \f(CW$self\fR (A Coati::Test object).
.IP "$obj\->_init([%arg])" 4
.IX Item "$obj->_init([%arg])"
\&\fBDescription:\fR Tests the Perl syntax of script names passed to it. When
testing the syntax of the script, the correct directories are included in
in the search path by the use of Perl \*(L"\-I\*(R" command line flag.
.Sp
\&\fBParameters:\fR \f(CW%arg\fR, a hash containing attributes to initialize the testing
object with. Keys in \f(CW%arg\fR will create object attributes with the same name,
but with a prepended underscore.
.Sp
\&\fBReturns:\fR None.
.IP "$obj\->\fIdebug()\fR" 4
.IX Item "$obj->debug()"
\&\fBDescription:\fR An accessor to get the debug level of the Test object.
.Sp
\&\fBParameters:\fR None. 
.Sp
\&\fBReturns:\fR \f(CW$debug\fR, the debug level.
.IP "$obj\->\fIproject()\fR" 4
.IX Item "$obj->project()"
\&\fBDescription:\fR An accessor to get the name of the project being tested.
.Sp
\&\fBParameters:\fR None. 
.Sp
\&\fBReturns:\fR \f(CW$project\fR, the project name.
.IP "$obj\->\fItestcount()\fR" 4
.IX Item "$obj->testcount()"
\&\fBDescription:\fR An accessor to get the number of tests performed.
.Sp
\&\fBParameters:\fR None. 
.Sp
\&\fBReturns:\fR \f(CW$testcount\fR, the sequential number of the current test.
.IP "$obj\->\fInotifyuser()\fR" 4
.IX Item "$obj->notifyuser()"
\&\fBDescription:\fR An accessor to check whether the notify flag was
set when the testmaster script was invoked. The flag enables email
notifications of errors in testing to the last user that checked in
the file being tested.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR 1 if the flag was set, or 0 if not.
.IP "$obj\->\fIurl()\fR" 4
.IX Item "$obj->url()"
\&\fBDescription:\fR An accessor to obtain the \s-1URL\s0 to the general testing
directory on the webserver. 
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR \f(CW$url\fR, with leading \*(L"http://\*(R" included.
.IP "$obj\->\fItestlist()\fR" 4
.IX Item "$obj->testlist()"
\&\fBDescription:\fR An accessor to get the name of the testlist containing
the scripts to be tested.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR \f(CW$testlist\fR, the filename of the testlist being used.
.IP "$obj\->\fIbackends()\fR" 4
.IX Item "$obj->backends()"
\&\fBDescription:\fR An accessor to get a list of the supported \s-1RDBMS\s0
backends, such as Sybase or MySQL.
.Sp
\&\fBParameters:\fR None. 
.Sp
\&\fBReturns:\fR \f(CW@backends\fR, a sorted list of supported database
backends.
.IP "$obj\->\fIschemas()\fR" 4
.IX Item "$obj->schemas()"
\&\fBDescription:\fR An accessor to get a list of the biological
database schema types that the project is intended to support.
For example, the Manatee project supports both Euk and
Prok type database schemas.
.Sp
\&\fBParameters:\fR None. 
.Sp
\&\fBReturns:\fR \f(CW@backends\fR, a sorted list of the supported schemas.
.IP "$obj\->\fIincr_testcount()\fR" 4
.IX Item "$obj->incr_testcount()"
\&\fBDescription:\fR An method to increment the count of tests
that have been performed. This method is called just prior
to beginning a new test, such as the test for syntax, etc...
.Sp
\&\fBParameters:\fR None. 
.Sp
\&\fBReturns:\fR None.
.IP "$obj\->\fItop()\fR" 4
.IX Item "$obj->top()"
\&\fBDescription:\fR Prints the beginning of the output for
summarizing the testing results. This method is overridden
in Html.pm.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR None.
.IP "$obj\->heading($script)" 4
.IX Item "$obj->heading($script)"
\&\fBDescription:\fR Prints a row with the name of the script being tested.
This row is used to headline the test results for that script. This method
is overridden in Html.pm.
.Sp
\&\fBParameters:\fR \f(CW$script\fR, the name of the script being tested.
.Sp
\&\fBReturns:\fR None.
.IP "$obj\->\fIbottom()\fR" 4
.IX Item "$obj->bottom()"
\&\fBDescription:\fR This method is mainly empty, as in normal operation nothing
special needs to be done to format the ending of the test results summary. However,
when outputting \s-1HTML\s0, the end of the page needs to be printed, so this method is
overridden in Html.pm.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR None.
.ie n .IP "$obj\->output($script, $test_name\fR, \f(CW$result\fR, \f(CW$DB, [$elapsed_time])" 4
.el .IP "$obj\->output($script, \f(CW$test_name\fR, \f(CW$result\fR, \f(CW$DB\fR, [$elapsed_time])" 4
.IX Item "$obj->output($script, $test_name, $result, $DB, [$elapsed_time])"
\&\fBDescription:\fR Runs a frontend script and processes the output
that will be used to compare future test output against.
.Sp
\&\fBParameters:\fR \f(CW$test_name\fR (test name), \f(CW$result\fR, \f(CW$DB\fR and \f(CW$elapsed_time\fR (seconds).
.Sp
\&\fBReturns:\fR None.
.IP "$obj\->test_syntax($script)" 4
.IX Item "$obj->test_syntax($script)"
\&\fBDescription:\fR Tests the Perl syntax of script names passed to it. When
testing the syntax of the script, the correct directories are included in
in the search path by the use of Perl \*(L"\-I\*(R" command line flag.
.Sp
\&\fBParameters:\fR \f(CW$script\fR.
.Sp
\&\fBReturns:\fR \f(CW$result\fR ( \*(L"ok\*(R" | \*(L"not ok\*(R" ).
.ie n .IP "$obj\->test_pod($db, $script\fR, \f(CW$test_name\fR, \f(CW$params_ref)" 4
.el .IP "$obj\->test_pod($db, \f(CW$script\fR, \f(CW$test_name\fR, \f(CW$params_ref\fR)" 4
.IX Item "$obj->test_pod($db, $script, $test_name, $params_ref)"
\&\fBDescription:\fR Tests the validity of \s-1POD\s0 documentation of script names
passed to it. The \fIpodchecker\fR function of Pod::Checker is used.
.Sp
\&\fBParameters:\fR \f(CW$script\fR.
.Sp
\&\fBReturns:\fR \f(CW$podresult\fR ( \*(L"ok\*(R" | \*(L"not ok\*(R" ).
.IP "$obj\->test_function($script)" 4
.IX Item "$obj->test_function($script)"
\&\fBDescription:\fR Tests the actual output of scripts against
known standard files.
.Sp
\&\fBParameters:\fR \f(CW$script\fR.
.Sp
\&\fBReturns:\fR None.
.ie n .IP "$obj\->script_output($script, $context\fR, \f(CW$params_ref)" 4
.el .IP "$obj\->script_output($script, \f(CW$context\fR, \f(CW$params_ref\fR)" 4
.IX Item "$obj->script_output($script, $context, $params_ref)"
\&\fBDescription:\fR Generates the output of front-end scripts
by supplying them with given \s-1CGI\s0 parameters.
.Sp
\&\fBParameters:\fR \f(CW$script\fR, \f(CW$context\fR, \f(CW$params_ref\fR
.Sp
\&\fBReturns:\fR \f(CW$result\fR ( \*(L"ok\*(R" | \*(L"not ok\*(R" ), \f(CW$elapsed_time\fR (seconds).
.ie n .IP "$obj\->check_output($db, $script\fR, \f(CW$test_name\fR, \f(CW$params_ref)" 4
.el .IP "$obj\->check_output($db, \f(CW$script\fR, \f(CW$test_name\fR, \f(CW$params_ref\fR)" 4
.IX Item "$obj->check_output($db, $script, $test_name, $params_ref)"
\&\fBDescription:\fR Checks the output of front-end scripts
by running them with \s-1CGI\s0 parameters and checking the output
against a saved /repository of expected output.
.Sp
\&\fBParameters:\fR \f(CW$db\fR, \f(CW$script\fR, \f(CW$test_name\fR, \f(CW$params_ref\fR
.Sp
\&\fBReturns:\fR \f(CW$result\fR ( \*(L"ok\*(R" | \*(L"not ok\*(R" ), \f(CW$elapsed_time\fR (seconds).
.IP "$obj\->_find_last_cvs_modification($script)" 4
.IX Item "$obj->_find_last_cvs_modification($script)"
\&\fBDescription:\fR Checks the \s-1CVS\s0 revision history to find information about the last modification.
.Sp
\&\fBParameters:\fR \f(CW$script\fR
.Sp
\&\fBReturns:\fR \f(CW$author\fR, \f(CW$rev\fR, \f(CW$date\fR, \f(CW$lines\fR, \f(CW$log\fR.
.ie n .IP "$obj\->_notify_user($user, $script\fR, \f(CW$testname\fR, \f(CW$db\fR, \f(CW$context\fR, \f(CW$rev\fR, \f(CW$log)" 4
.el .IP "$obj\->_notify_user($user, \f(CW$script\fR, \f(CW$testname\fR, \f(CW$db\fR, \f(CW$context\fR, \f(CW$rev\fR, \f(CW$log\fR)" 4
.IX Item "$obj->_notify_user($user, $script, $testname, $db, $context, $rev, $log)"
\&\fBDescription:\fR Notify user of a failed test.
.Sp
\&\fBParameters:\fR \f(CW$user\fR, \f(CW$script\fR, \f(CW$testname\fR, \f(CW$db\fR, \f(CW$context\fR, \f(CW$rev\fR, \f(CW$log\fR
.Sp
\&\fBReturns:\fR None.
.ie n .IP "$obj\->module_output($db, $script\fR, \f(CW$testcount\fR, \f(CW@structs)" 4
.el .IP "$obj\->module_output($db, \f(CW$script\fR, \f(CW$testcount\fR, \f(CW@structs\fR)" 4
.IX Item "$obj->module_output($db, $script, $testcount, @structs)"
\&\fBDescription:\fR Formats data structures passed to it for comparison with
standard files. Uses Data::Dumper to output the data structures.
.Sp
\&\fBParameters:\fR \f(CW$db\fR, \f(CW$script\fR, \f(CW$testcount\fR, \f(CW@structs\fR
.Sp
\&\fBReturns:\fR \f(CW$result\fR (\*(L"ok\*(R" | \*(L"not ok\*(R").
.ie n .IP "$obj\->make_standards($db, $script)" 4
.el .IP "$obj\->make_standards($db, \f(CW$script\fR)" 4
.IX Item "$obj->make_standards($db, $script)"
\&\fBDescription:\fR Runs a \fIproject\fR script and saves the generated output as the standard file
that will be used to compare future test output against.
.Sp
\&\fBParameters:\fR \f(CW$db\fR, \f(CW$script\fR.
.Sp
\&\fBReturns:\fR None.
.IP "$obj\->make_consensus_standard($script)" 4
.IX Item "$obj->make_consensus_standard($script)"
\&\fBDescription:\fR Compares standards across db vendors and creates consensus file.
.Sp
\&\fBParameters:\fR \f(CW$script\fR,@dbs.
.Sp
\&\fBReturns:\fR None.
.IP "$obj\->_get_toplevel($script)" 4
.IX Item "$obj->_get_toplevel($script)"
\&\fBDescription:\fR Given the relative path from the \fIproject\fR root to a script,
return the parent directory of the script. Typically, this will be either
\&\*(L"euk\*(R", \*(L"prok\*(R" or \*(L"shared\*(R", if working in the \fIproject\fR development environment.
.Sp
\&\fBParameters:\fR \f(CW$script\fR.
.Sp
\&\fBReturns:\fR \f(CW$toplevel\fR.
.IP "$obj\->_get_tests($script)" 4
.IX Item "$obj->_get_tests($script)"
\&\fBDescription:\fR A function to extract the \s-1DIAGNOSTICS\s0 section of script,
parse out and return the contained test lines.
.Sp
\&\fBParameters:\fR \f(CW$script\fR.
.Sp
\&\fBReturns:\fR \f(CW@tests\fR.
.ie n .IP "$obj\->get_individual_test($script, $test_name)" 4
.el .IP "$obj\->get_individual_test($script, \f(CW$test_name\fR)" 4
.IX Item "$obj->get_individual_test($script, $test_name)"
\&\fBDescription:\fR Given a \fIproject\fR script and the name of a test,
extract the string containing the test parameters. If there
is no test matching the name provided, then return undef.
.Sp
\&\fBParameters:\fR \f(CW$testline\fR.
.Sp
\&\fBReturns:\fR \f(CW$test\fR (or undef).
.IP "$obj\->_split_testlines($testline)" 4
.IX Item "$obj->_split_testlines($testline)"
\&\fBDescription:\fR Given a testline from a \s-1DIAGNOSTICS\s0 section in \s-1POD\s0,
extract and return the name of the test and the the string containing
the test parameters.
.Sp
\&\fBParameters:\fR \f(CW$testline\fR.
.Sp
\&\fBReturns:\fR \f(CW$test_name\fR, \f(CW$test\fR.
.ie n .IP "$obj\->compare_db_flatfiles($db, $dbmodstruct_ref)" 4
.el .IP "$obj\->compare_db_flatfiles($db, \f(CW$dbmodstruct_ref\fR)" 4
.IX Item "$obj->compare_db_flatfiles($db, $dbmodstruct_ref)"
\&\fBDescription:\fR Creates development files and compares them to known standards. Not exported.
.Sp
\&\fBParameters:\fR \f(CW$db\fR, \f(CW$output\fR, \f(CW$scriptbase\fR, \f(CW$testname\fR.
.Sp
\&\fBReturns:\fR \f(CW$return\fR ( \*(L"ok\*(R" | \*(L"not ok\*(R" ).
.IP "$obj\->_set_DBI_profile" 4
.IX Item "$obj->_set_DBI_profile"
\&\fBDescription:\fR Activates \s-1DBI\s0 profiling and sets appropriate output directory
.Sp
\&\fBParameters:\fR \f(CW$db\fR, \f(CW$type\fR, \f(CW$scriptbase\fR, \f(CW$testname\fR
.Sp
\&\fBReturns:\fR 
.ie n .IP "$obj\->_write_and_compare($db, $output\fR, \f(CW$scriptbase\fR, \f(CW$testname)" 4
.el .IP "$obj\->_write_and_compare($db, \f(CW$output\fR, \f(CW$scriptbase\fR, \f(CW$testname\fR)" 4
.IX Item "$obj->_write_and_compare($db, $output, $scriptbase, $testname)"
\&\fBDescription:\fR Creates development files and compares them to known standards. Not exported.
.Sp
\&\fBParameters:\fR \f(CW$db\fR, \f(CW$output\fR, \f(CW$scriptbase\fR, \f(CW$testname\fR.
.Sp
\&\fBReturns:\fR \f(CW$return\fR ( \*(L"ok\*(R" | \*(L"not ok\*(R" ).
.ie n .IP "$obj\->_write_standard($db, $output\fR, \f(CW$scriptbase\fR, \f(CW$testname)" 4
.el .IP "$obj\->_write_standard($db, \f(CW$output\fR, \f(CW$scriptbase\fR, \f(CW$testname\fR)" 4
.IX Item "$obj->_write_standard($db, $output, $scriptbase, $testname)"
\&\fBDescription:\fR A function to save the standard files for testing (not exported).
The method level test scripts also make use of this subroutine
but they do so from within the prok or euk directories. It is necessary
to distinguish when we are testing a front-end script or a module, and
use the appropriate path to the output repositories.
.Sp
\&\fBParameters:\fR ($db, \f(CW$output\fR, \f(CW$scriptbase\fR, \f(CW$testname\fR)
.Sp
\&\fBReturns:\fR None.
.IP "$obj\->_parse_dbmod_testfile($dbmod_testfile)" 4
.IX Item "$obj->_parse_dbmod_testfile($dbmod_testfile)"
\&\fBDescription:\fR This method takes a filename of a file in the \fIproject\fR testing/dbmod
directory that contains information used for tests that perform changes to the database.
In other words, for tests that perform updates, inserts, or deletes on the database, a
file is required in the dbmod directory that details which database/tables must be reloaded
at the conclusion of the test. This method parses those files and returns a hash data structure
with the data called \f(CW%dbmodstruct\fR.
.Sp
\&\fBParameters:\fR \f(CW$dbmod_testfile\fR.
.Sp
\&\fBReturns:\fR \f(CW%dbmodstruct\fR.
.ie n .IP "_clear_db_tables($db, $dbmodstruct_ref)" 4
.el .IP "_clear_db_tables($db, \f(CW$dbmodstruct_ref\fR)" 4
.IX Item "_clear_db_tables($db, $dbmodstruct_ref)"
\&\fBDescription:\fR Given a database type, or backend (such as \*(L"Sybase\*(R"),
and \f(CW$dbmodstruct_ref\fR, which holds the results of parsing the \*(L"dbmod\*(R" configuration file,
clear the configured tables of all data by issuing \*(L"truncate\*(R" \s-1SQL\s0 commands.
.Sp
\&\fBParameters:\fR \f(CW$db\fR, \f(CW$dbmodstruct_ref\fR.
.Sp
\&\fBReturns:\fR None.
.IP "_get_filebase($file)" 4
.IX Item "_get_filebase($file)"
\&\fBDescription:\fR A method to strip off the suffix of filenames passed to it.
.Sp
\&\fBParameters:\fR \f(CW$file\fR.
.Sp
\&\fBReturns:\fR \f(CW$filebase\fR.
.ie n .IP "_set_environment($context, $db)" 4
.el .IP "_set_environment($context, \f(CW$db\fR)" 4
.IX Item "_set_environment($context, $db)"
\&\fBDescription:\fR A method to set the project environment variable that controls
which \s-1RDBMS\s0 backend and server to use.
.Sp
\&\fBParameters:\fR \f(CW$context\fR, \f(CW$db\fR.
.Sp
\&\fBReturns:\fR None.
.IP "\fIparse_list()\fR" 4
.IX Item "parse_list()"
\&\fBDescription:\fR From a given configuration file containing a list of file paths,
parse the file, ignoring blank lines and comments, and return an array of files
to be tested.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR \f(CW@files\fR.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
This module sets a \s-1PROJECT\s0 environment variable where \s-1PROJECT\s0 is the
name of the Coati based project being tested. This environment variable
controls the operation of the scripts, including which \s-1RDBMS\s0 to use, what
server to connect to for the \s-1RDBMS\s0, and what context (database schema,
e.g. Euk, Prok, Synteny) to run under.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP """*** Warning: Could not prepare <query>." 4
.IX Item """*** Warning: Could not prepare <query>."
A \s-1SQL\s0 query could not be prepared. Please check the query for
syntax, or consult the \s-1RDBMS\s0 documentation.
.IP """*** Warning: Could not execute <query>." 4
.IX Item """*** Warning: Could not execute <query>."
A \s-1SQL\s0 query could not be executed. Please check the query for
syntax, or consult the \s-1RDBMS\s0 documentation.
.ie n .IP """*** \s-1WARNING:\s0 <file> in <testlist> does not exist.""" 4
.el .IP "``*** \s-1WARNING:\s0 <file> in <testlist> does not exist.''" 4
.IX Item "*** WARNING: <file> in <testlist> does not exist."
A file in the specified testlist (default of \*(L"testlist\*(R") did not
exist. Testing could not proceed and the test series for that file
was skipped.
.SH "BUGS"
.IX Header "BUGS"
No known bugs. Please contact Authors to report bugs.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The following other modules are required for this module to work correctly.
.PP
.Vb 12
\&  Carp
\&  Coati::Test::Html
\&  Coati::Test::Sybase
\&  Coati::Test::Mysql
\&  Cwp
\&  Data::Dumper
\&  File::Basename
\&  File::Compare
\&  IO::Scalar
\&  MIME::Lite
\&  Pod::Checker
\&  Pod::Select
.Ve
.SH "AUTHOR(S)"
.IX Header "AUTHOR(S)"
.Vb 3
\& The Institute for Genomic Research
\& 9712 Medical Center Drive
\& Rockville, MD 20850
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002, The Institute for Genomic Research. All Rights Reserved.
