.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BSML::Indexer 3"
.TH BSML::Indexer 3 "2006-06-20" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
BSML::Indexer;
.SH "VERSION"
.IX Header "VERSION"
This document refers to \f(CW$Revision:\fR 615 $ of TIGR::Yank::Indexer.pm.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use BSML::Indexer;
.Ve
.PP
.Vb 2
\&  my $indexdir = "/tmp";
\&  my $file = "/home/jdoe/bacteria.nraa";
.Ve
.PP
.Vb 1
\&  my $indexer = TIGR::Yank::Indexer->new($file, $indexdir);
.Ve
.PP
.Vb 3
\&  my $entry_index = $indexer->entry_index;
\&  my $org_index = $indexer->organism_index;
\&  my $acc_index_pir_1 = $indexer->accession_index("PIR", 1);
.Ve
.PP
.Vb 2
\&  my $filepath = $indexer->filepath;
\&  my $filename = $indexer->filename;
.Ve
.PP
.Vb 2
\&  # Check the health of the various indices for the data file.
\&  my @check = $indexer->check_indices;
.Ve
.PP
.Vb 3
\&  if ($check[0] == 1) { $indexer->index_entries };
\&  if ($check[1] == 1) { $indexer->index_organisms };
\&  if ($check[2] == 1) { $indexer->index_accessions };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides methods to check whether index files for Yank data
files are up to date, and if not, to generate them.
.Sh "Class and object methods"
.IX Subsection "Class and object methods"
.ie n .IP "BSML::Indexer\->new($file, $indexdir);" 4
.el .IP "BSML::Indexer\->new($file, \f(CW$indexdir\fR);" 4
.IX Item "BSML::Indexer->new($file, $indexdir);"
\&\fBDescription:\fR This is the constructor which creates an instance
of the class.
.Sp
\&\fBParameters:\fR \f(CW$file\fR \- The datafile (a multi-FASTA file) that is
to be indexed, or checked for updated indices.
 \f(CW$indexdir\fR \- The directory where the indices are to be stored.
.Sp
.Vb 2
\& Example:
\& my $indexer = BSML::Indexer->new($file, $indexdir);
.Ve
.Sp
\&\fBReturns:\fR \f(CW$self\fR, an instance of the class.
.ie n .IP "$obj\->_init($file, $indexdir);" 4
.el .IP "$obj\->_init($file, \f(CW$indexdir\fR);" 4
.IX Item "$obj->_init($file, $indexdir);"
\&\fBDescription:\fR This is the object initializer, a private method used to set
object attributes.
.Sp
\&\fBParameters:\fR Both the \f(CW$file\fR, and \f(CW$indexdir\fR parameters described for the
constructor \*(L"new\*(R" are required.
\&\fBReturns:\fR None.
.ie n .IP "$obj\->accession_index($source, $position);" 4
.el .IP "$obj\->accession_index($source, \f(CW$position\fR);" 4
.IX Item "$obj->accession_index($source, $position);"
\&\fBDescription:\fR This method returns the name of the accession index file
for a particular source type and position, which are specified when calling
the method.
.Sp
\&\fBParameters:\fR \f(CW$source\fR \- a valid source type, which must be one of the
following: \s-1GB\s0, \s-1GP\s0, \s-1PANDA\s0, \s-1PIR\s0, \s-1SP\s0.
 \f(CW$position\fR \- Must be either 1 or 2, which are the only valid positions
 in an accession. The positions are separated by the pipe symbol \*(L"|\*(R".
.Sp
\&\fBReturns:\fR The full path to the accession index file.
.IP "$obj\->\fIcheck_indices()\fR;" 4
.IX Item "$obj->check_indices();"
\&\fBDescription:\fR Check if the indices for the data source for this search
exist and are up\-to\-date. 
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR In scalar context, a reference to a 3 element array containing
flags (0 or 1) as to whether a particular set of indices exists and is
up\-to\-date.  The first element is indicates whether the \*(L"entry\*(R" index is okay.
The second and third elements indicate whether the organism and accession
indices are okay. In list context, the array itself is returned.
.IP "$obj\->\fIfilepath()\fR;" 4
.IX Item "$obj->filepath();"
\&\fBDescription:\fR An accessor used to retrieve the full path to the filename
used as the data source for the search.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR A scalar holding the path to the datafile.
.IP "$obj\->\fIentry_index()\fR;" 4
.IX Item "$obj->entry_index();"
\&\fBDescription:\fR Get the path to the entry index file.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR None.
.IP "$obj\->\fIfilename()\fR;" 4
.IX Item "$obj->filename();"
\&\fBDescription:\fR An accessor used to retrieve the name of the file
to be used as the data source for the search. This is simply the
basename of the data file as returned by File::Basename's basename
function.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR A scalar holding the name of the data file.
.IP "$obj\->\fIindexdir()\fR;" 4
.IX Item "$obj->indexdir();"
\&\fBDescription:\fR Returns the directory where the various index files are
to be stored.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR The scalar path to the directory.
.IP "$obj\->\fIindex_accessions()\fR;" 4
.IX Item "$obj->index_accessions();"
\&\fBDescription:\fR Used to create the various accession indices. For each
data file, there are 2 indices created for each source type. The first is 
to index entry index number with the accession found in the
first position (separated by a pipe), and the second is for the accession
found in the second position. 
.Sp
\&\fBParameters:\fR None. 
.Sp
\&\fBReturns:\fR None.
.IP "$obj\->\fIindex_entries()\fR;" 4
.IX Item "$obj->index_entries();"
\&\fBDescription:\fR Method to create the entry index file, which holds the
information on how to access the entries in a \s-1FASTA\s0 file by entry index
number. The index contains information on the starting position and length
of each entry.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR None.
.IP "$obj\->\fIindex_organisms()\fR;" 4
.IX Item "$obj->index_organisms();"
\&\fBDescription:\fR Method to create the organism index file.
.Sp
\&\fBParameters:\fR None. 
.Sp
\&\fBReturns:\fR None.
.IP "$obj\->\fIorganism_index()\fR;" 4
.IX Item "$obj->organism_index();"
\&\fBDescription:\fR Get the organism index file.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR The filename of the organism index.
.IP "$obj\->\fI_check_accession_indices()\fR;" 4
.IX Item "$obj->_check_accession_indices();"
\&\fBDescription:\fR This private method is used to examine for the existence and
timeliness of the various accession indices for the data file to be used in a
particular search. If any of the file are missing or out of date, a true value
(1) is returned to indicate that the files should be rebuilt.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR \f(CW$needs_acc_index\fR, a flag denoting whether the accession indices
need to be recreated.
.IP "$obj\->_make_indexdir;" 4
.IX Item "$obj->_make_indexdir;"
\&\fBDescription:\fR This private method is used to create the directory that
will hold the various index files if does not exist at the time the
indexing is initiated.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR None.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
This module does not read or set any environment variables.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
This module has a unit testing script in the Yank installation test
directory.
.SH "BUGS"
.IX Header "BUGS"
There are no known bugs at this time. Please contact the Antware team
at antware@tigr.org, or submit a bug report to bits.antware@tigr.org
if you discover one.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 5
\& CDB_File - The platform independent database file format.
\& Data::Dumper - To print data structures.
\& File::Basename - To help determine index filenames and locations.
\& File::Path - For the mkpath function, to create missing directories.
\& Log::Log4perl - For logging messages and debugging.
.Ve
.SH "AUTHOR(S)"
.IX Header "AUTHOR(S)"
.Vb 3
\& The Institute for Genomic Research
\& 9712 Medical Center Drive
\& Rockville, MD 20850
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003, The Institute for Genomic Research. All Rights Reserved.
