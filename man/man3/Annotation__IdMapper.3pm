.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Annotation::IdMapper 3"
.TH Annotation::IdMapper 3 "2008-09-11" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Annotation::IdMapper.pm
.SH "VERSION"
.IX Header "VERSION"
1.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "AUTHOR"
.IX Header "AUTHOR"
Jay Sundaram
sundaram@jcvi.org
.SH "METHODS"
.IX Header "METHODS"
new{}
_init{}
DESTROY{}
setOldIdN{}
setOldId{}
getOldIdN{}
getOldId{}
removeOldIdN{}
removeOldId{}
setNewIdN{}
setNewId{}
getNewId{}
getNewIdN{}
getNewId{}
removeNewIdN{}
removeNewId{}
setPairN{}
setPair{}
removePairN{}
removePair{}
setMapFileExtension{}
getMapFileExtension{}
setMapFilename{}
getMapFilename{}
verifyLookups{}
loadIdMappingLookup{}
loadIdMappingLookupFromFile{}
writeIdMappingFile{}
.IP "\fInew()\fR" 4
.IX Item "new()"
\&\fBDescription:\fR Instantiate Annotation::IdMapper object
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR reference to the Annotation::IdMapper object
.IP "$self\->_init(%args)" 4
.IX Item "$self->_init(%args)"
\&\fBDescription:\fR Typical Perl \fIinit()\fR method
.Sp
\&\fBParameters:\fR \f(CW%args\fR
.Sp
\&\fBReturns:\fR None
.IP "\s-1DESTROY\s0" 4
.IX Item "DESTROY"
\&\fBDescription:\fR Annotation::IdMapper class destructor
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR None
.IP "$obj\->setOldIdN(old=>$oldId, new=>$newId)" 4
.IX Item "$obj->setOldIdN(old=>$oldId, new=>$newId)"
\&\fBDescription:\fR Set old \s-1ID\s0 value for new \s-1ID\s0
.Sp
\&\fBParameters:\fR 
.Sp
$oldId (scalar \- string)
\&\f(CW$newId\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->setOldId($oldId,$newId)" 4
.IX Item "$obj->setOldId($oldId,$newId)"
\&\fBDescription:\fR Set old \s-1ID\s0 value for new \s-1ID\s0
.Sp
\&\fBParameters:\fR 
.Sp
$oldId (scalar \- string)
\&\f(CW$newId\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->getOldIdN($newId)" 4
.IX Item "$obj->getOldIdN($newId)"
\&\fBDescription:\fR Get the old \s-1ID\s0 value for specified new \s-1ID\s0 value
.Sp
\&\fBParameters:\fR 
.Sp
$newId (scalar \- string)
.Sp
\&\fBReturns:\fR \f(CW$oldId\fR (scalar \- string)
.IP "$obj\->getOldId($newId)" 4
.IX Item "$obj->getOldId($newId)"
\&\fBDescription:\fR Get the old \s-1ID\s0 value for specified new \s-1ID\s0 value
.Sp
\&\fBParameters:\fR 
.Sp
$newId (scalar \- string)
.Sp
\&\fBReturns:\fR \f(CW$oldId\fR (scalar \- string)
.IP "$obj\->removeOldIdN($oldId)" 4
.IX Item "$obj->removeOldIdN($oldId)"
\&\fBDescription:\fR Remove the old \s-1ID\s0 new \s-1ID\s0 pair by specified old \s-1ID\s0 value
.Sp
\&\fBParameters:\fR \f(CW$oldId\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->removeOldId($oldId)" 4
.IX Item "$obj->removeOldId($oldId)"
\&\fBDescription:\fR Remove the old \s-1ID\s0 new \s-1ID\s0 pair by specified old \s-1ID\s0 value
.Sp
\&\fBParameters:\fR \f(CW$oldId\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->setNewIdN(old=>$oldId, new=>$newId)" 4
.IX Item "$obj->setNewIdN(old=>$oldId, new=>$newId)"
\&\fBDescription:\fR Set new \s-1ID\s0 value for old \s-1ID\s0
.Sp
\&\fBParameters:\fR 
.Sp
$oldId (scalar \- string)
\&\f(CW$newId\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->setNewId($oldId,$newId)" 4
.IX Item "$obj->setNewId($oldId,$newId)"
\&\fBDescription:\fR Set new \s-1ID\s0 value for old \s-1ID\s0
.Sp
\&\fBParameters:\fR 
.Sp
$oldId (scalar \- string)
\&\f(CW$newId\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->getNewIdN($oldId)" 4
.IX Item "$obj->getNewIdN($oldId)"
\&\fBDescription:\fR Get the new \s-1ID\s0 value for specified old \s-1ID\s0 value
.Sp
\&\fBParameters:\fR 
.Sp
$oldId (scalar \- string)
.Sp
\&\fBReturns:\fR \f(CW$newId\fR (scalar \- string)
.IP "$obj\->getNewId($old)" 4
.IX Item "$obj->getNewId($old)"
\&\fBDescription:\fR Get the new \s-1ID\s0 value for specified old \s-1ID\s0 value
.Sp
\&\fBParameters:\fR 
.Sp
$newId (scalar \- string)
.Sp
\&\fBReturns:\fR \f(CW$newId\fR (scalar \- string)
.IP "$obj\->removeNewIdN($newIkd)" 4
.IX Item "$obj->removeNewIdN($newIkd)"
\&\fBDescription:\fR Remove the old \s-1ID\s0 new \s-1ID\s0 pair by specified new \s-1ID\s0 value
.Sp
\&\fBParameters:\fR \f(CW$newId\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->removeNewId($newId)" 4
.IX Item "$obj->removeNewId($newId)"
\&\fBDescription:\fR Remove the old \s-1ID\s0 new \s-1ID\s0 pair by specified new \s-1ID\s0 value
.Sp
\&\fBParameters:\fR \f(CW$newId\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->setPairN(old=>$oldId,new=>$newId)" 4
.IX Item "$obj->setPairN(old=>$oldId,new=>$newId)"
\&\fBDescription:\fR Set old \s-1ID\s0 and new \s-1ID\s0 value pair
.Sp
\&\fBParameters:\fR 
.Sp
$oldId (scalar \- string)
\&\f(CW$newId\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->setPair($oldId,$newId)" 4
.IX Item "$obj->setPair($oldId,$newId)"
\&\fBDescription:\fR Set old \s-1ID\s0 and new \s-1ID\s0 value pair
.Sp
\&\fBParameters:\fR 
.Sp
$oldId (scalar \- string)
\&\f(CW$newId\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->removePairN(old=>$oldId, new=>$newId)" 4
.IX Item "$obj->removePairN(old=>$oldId, new=>$newId)"
\&\fBDescription:\fR Remove the old \s-1ID\s0 new \s-1ID\s0 pair
.Sp
\&\fBParameters:\fR 
.Sp
$oldId (scalar \- string)
\&\f(CW$newId\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.ie n .IP "$obj\->removePair($oldId, $newId)" 4
.el .IP "$obj\->removePair($oldId, \f(CW$newId\fR)" 4
.IX Item "$obj->removePair($oldId, $newId)"
\&\fBDescription:\fR Remove the old \s-1ID\s0 new \s-1ID\s0 pair by specified new \s-1ID\s0 value
.Sp
\&\fBParameters:\fR 
.Sp
$oldId (scalar \- string)
\&\f(CW$newId\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->setMapFileExtension($ext)" 4
.IX Item "$obj->setMapFileExtension($ext)"
\&\fBDescription:\fR Set the map filename extension
.Sp
\&\fBParameters:\fR \f(CW$ext\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIgetMapFileExtension()\fR" 4
.IX Item "$obj->getMapFileExtension()"
\&\fBDescription:\fR Get the map filename extension
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$ext\fR (scalar \- string)
.IP "$obj\->setMapFilename($name)" 4
.IX Item "$obj->setMapFilename($name)"
\&\fBDescription:\fR Set the map filename
.Sp
\&\fBParameters:\fR \f(CW$name\fR (scalar \- string)
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIgetMapFilename()\fR" 4
.IX Item "$obj->getMapFilename()"
\&\fBDescription:\fR Get the map filename
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$name\fR (scalar \- string)
.IP "$obj\->\fIverifyLookups()\fR" 4
.IX Item "$obj->verifyLookups()"
\&\fBDescription:\fR Verify that the two identifier lookups are synchronized
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR \f(CW$boolean\fR (scalar \- unsigned integer) 0 \- false, 1 \- true
.IP "$obj\->writeIdMappingFile($filename)" 4
.IX Item "$obj->writeIdMappingFile($filename)"
\&\fBDescription:\fR Write the \s-1ID\s0 mapping file
.Sp
\&\fBParameters:\fR \f(CW$filename\fR (scalar \- string) optional
.Sp
\&\fBReturns:\fR None
.ie n .IP "$obj\->loadIdMappingLookupN($directories, $infile)" 4
.el .IP "$obj\->loadIdMappingLookupN($directories, \f(CW$infile\fR)" 4
.IX Item "$obj->loadIdMappingLookupN($directories, $infile)"
\&\fBDescription:\fR Load \s-1ID\s0 pairs from \s-1ID\s0 map files
.Sp
\&\fBParameters:\fR 
.Sp
$directories (scalar \- string) 
\&\f(CW$infile\fR (scalar \- string) 
.Sp
\&\fBReturns:\fR None
.ie n .IP "$obj\->loadIdMappingLookup($directories, $infile)" 4
.el .IP "$obj\->loadIdMappingLookup($directories, \f(CW$infile\fR)" 4
.IX Item "$obj->loadIdMappingLookup($directories, $infile)"
\&\fBDescription:\fR Load \s-1ID\s0 pairs from \s-1ID\s0 map files
.Sp
\&\fBParameters:\fR 
.Sp
$directories (scalar \- string) 
\&\f(CW$infile\fR (scalar \- string) 
.Sp
\&\fBReturns:\fR None
