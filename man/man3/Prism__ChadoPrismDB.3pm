.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prism::ChadoPrismDB 3"
.TH Prism::ChadoPrismDB 3 "2011-11-17" "perl v5.8.8" "User Contributed Perl Documentation"
.RE
.IP "$obj\->isOntologyLoaded($defaultNamespace)"
.IX Item "$obj->isOntologyLoaded($defaultNamespace)"
\&\fBDescription:\fR Checks whether the ontology with the default-namespace is loaded in the \s-1CV\s0 module
.PP
\&\fBParameters:\fR \f(CW$defaultNamespace\fR \- scalar
.PP
\&\fBReturns:\fR \s-1TBA\s0
.RE
.IP "$obj\->getCoreOboTermStanzaElements($defaultNamespace)"
.IX Item "$obj->getCoreOboTermStanzaElements($defaultNamespace)"
\&\fBDescription:\fR Retrieve the core values that are typically stored in the \s-1OBO\s0 term stanzas
.PP
\&\fBParameters:\fR \f(CW$defaultNamespace\fR \- scalar
.PP
\&\fBReturns:\fR Reference to double array
.PP
.Vb 5
\&  Inner array elements are:
\&  0 - scalar: dbxref.accession
\&  1 - scalar: cvterm.name
\&  2 - scalar: cvterm.definition
\&  3 - scalar: cvterm.is_obsolete
.Ve
.RE
.IP "$obj\->getOboTermStanzaCrossReferences($defaultNamespace)"
.IX Item "$obj->getOboTermStanzaCrossReferences($defaultNamespace)"
\&\fBDescription:\fR Retrieve the alt_id and xref data
.PP
\&\fBParameters:\fR \f(CW$defaultNamespace\fR \- scalar
.PP
\&\fBReturns:\fR Reference to double array
.PP
.Vb 4
\&  Inner array elements are:
\&  0 - scalar: dbxref.accession
\&  1 - scalar: dbxref.version
\&  2 - scalar: dbxref.accession
.Ve
.RE
.IP "$obj\->getOboTermStanzaRelationships($defaultNamespace)"
.IX Item "$obj->getOboTermStanzaRelationships($defaultNamespace)"
\&\fBDescription:\fR Retrieve the relationship data
.PP
\&\fBParameters:\fR \f(CW$defaultNamespace\fR \- scalar
.PP
\&\fBReturns:\fR Reference to double array
.PP
.Vb 4
\&  Inner array elements are:
\&  0 - scalar: dbxref.accession
\&  1 - scalar: cvterm.name where cvterm.cvterm_id = cvterm_relationship.type_id
\&  2 - scalar: dbxref.accession
.Ve
.RE
.IP "$obj\->getOboTermStanzaSynonyms($defaultNamespace)"
.IX Item "$obj->getOboTermStanzaSynonyms($defaultNamespace)"
\&\fBDescription:\fR Retrieve the synonym data
.PP
\&\fBParameters:\fR \f(CW$defaultNamespace\fR \- scalar
.PP
\&\fBReturns:\fR Reference to double array
.PP
.Vb 4
\&  Inner array elements are:
\&  0 - scalar: dbxref.accession
\&  1 - scalar: cvterm.name where cvterm.cvterm_id = cvtermsynonym.type_id
\&  2 - scalar: cvtermsynonym.synonym
.Ve
.RE
.IP "$obj\->getOboTermStanzaProperties($defaultNamespace)"
.IX Item "$obj->getOboTermStanzaProperties($defaultNamespace)"
\&\fBDescription:\fR Retrieve cvtermprop data
.PP
\&\fBParameters:\fR \f(CW$defaultNamespace\fR \- scalar
.PP
\&\fBReturns:\fR Reference to double array
.PP
.Vb 4
\&  Inner array elements are:
\&  0 - scalar: dbxref.accession
\&  1 - scalar: cvterm.name where cvterm.cvterm_id = cvtermprop.type_id
\&  2 - scalar: cvtermprop.value
.Ve
.RE
.IP "$obj\->\fIgetAnalysispropDuplicateRecordCount()\fR"
.IX Item "$obj->getAnalysispropDuplicateRecordCount()"
\&\fBDescription:\fR Will retrieve the number of duplicate tuples in the analysisprop table
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetDbxrefpropDuplicateRecordCount()\fR"
.IX Item "$obj->getDbxrefpropDuplicateRecordCount()"
\&\fBDescription:\fR Will retrieve the number of duplicate tuples in the dbxrefprop table
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetFeatureCvtermpropDuplicateRecordCount()\fR"
.IX Item "$obj->getFeatureCvtermpropDuplicateRecordCount()"
\&\fBDescription:\fR Will retrieve the number of duplicate tuples in the feature_cvtermprop table
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetFeaturepropDuplicateRecordCount()\fR"
.IX Item "$obj->getFeaturepropDuplicateRecordCount()"
\&\fBDescription:\fR Will retrieve the number of duplicate tuples in the featureprop table
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetFeatureRelationshippropDuplicateRecordCount()\fR"
.IX Item "$obj->getFeatureRelationshippropDuplicateRecordCount()"
\&\fBDescription:\fR Will retrieve the number of duplicate tuples in the feature_relationshipprop table
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetOrganismpropDuplicateRecordCount()\fR"
.IX Item "$obj->getOrganismpropDuplicateRecordCount()"
\&\fBDescription:\fR Will retrieve the number of duplicate tuples in the organismprop table
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetPhylonodepropDuplicateRecordCount()\fR"
.IX Item "$obj->getPhylonodepropDuplicateRecordCount()"
\&\fBDescription:\fR Will retrieve the number of duplicate tuples in the phylonodeprop table
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetPubpropDuplicateRecordCount()\fR"
.IX Item "$obj->getPubpropDuplicateRecordCount()"
\&\fBDescription:\fR Will retrieve the number of duplicate tuples in the pubprop table
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetFeaturelocFminGreaterThanFmaxCount()\fR"
.IX Item "$obj->getFeaturelocFminGreaterThanFmaxCount()"
\&\fBDescription:\fR Will retrieve the number of featureloc records where fmin>fmax
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetDistinctFeaturelocStrandValues()\fR"
.IX Item "$obj->getDistinctFeaturelocStrandValues()"
\&\fBDescription:\fR Will retrieve all distinct strand values from featureloc
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetFeatureResiduesSeqlenValues()\fR"
.IX Item "$obj->getFeatureResiduesSeqlenValues()"
\&\fBDescription:\fR Will retrieve all feature_id, uniquename, residues and seqlen values from feature
.PP
\&\fBParameters:\fR \f(CW$ignore_obsolete\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIget_cvtermpath_type_id_lookup()\fR"
.IX Item "$obj->get_cvtermpath_type_id_lookup()"
\&\fBDescription:\fR Will execute query to retrieve all subject_id, object_id, type_id tuples from cvtermpath
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetClusterAnalysisIdValues()\fR"
.IX Item "$obj->getClusterAnalysisIdValues()"
\&\fBDescription:\fR Retrieve analysis_id values for all analysis records where the program is j_ortholog_clusters or jaccard
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetBlastAnalysisIdValues()\fR"
.IX Item "$obj->getBlastAnalysisIdValues()"
\&\fBDescription:\fR Retrieve analysis_id values for all analysis records where the program is like blast
.PP
\&\fBParameters:\fR None
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetBlastRecordsForCmBlastByAnalysisId()\fR"
.IX Item "$obj->getBlastRecordsForCmBlastByAnalysisId()"
\&\fBDescription:\fR Retrieve 
.PP
\&\fBParameters:\fR \f(CW$analysis_id\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetMatchFeatureIdValuesForCmBlastByAnalysisId()\fR"
.IX Item "$obj->getMatchFeatureIdValuesForCmBlastByAnalysisId()"
\&\fBDescription:\fR Retrieve 
.PP
\&\fBParameters:\fR \f(CW$analysis_id\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetStatisticsForCmBlastByAnalysisId()\fR"
.IX Item "$obj->getStatisticsForCmBlastByAnalysisId()"
\&\fBDescription:\fR Retrieve percent_identity, percent_similarity, p_value for all match_part features linked to some blast analysis_id
.PP
\&\fBParameters:\fR \f(CW$analysis_id\fR (scalar), \f(CW$start\fR (scalar), \f(CW$end\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetStatisticsForCmBlastByAnalysisId1()\fR"
.IX Item "$obj->getStatisticsForCmBlastByAnalysisId1()"
\&\fBDescription:\fR Retrieve percent_identity, percent_similarity, p_value for all match_part features linked to some blast analysis_id
.PP
\&\fBParameters:\fR \f(CW$analysis_id\fR (scalar), \f(CW$matchFeatureId\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetPercentSimilarityForCmBlastByAnalysisId()\fR"
.IX Item "$obj->getPercentSimilarityForCmBlastByAnalysisId()"
\&\fBDescription:\fR Retrieve percent_identity for all match_part features linked to some blast analysis_id
.PP
\&\fBParameters:\fR \f(CW$analysis_id\fR (scalar), \f(CW$matchFeatureId\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetPercentIdentityForCmBlastByAnalysisId()\fR"
.IX Item "$obj->getPercentIdentityForCmBlastByAnalysisId()"
\&\fBDescription:\fR Retrieve percent_identity for all match_part features linked to some blast analysis_id
.PP
\&\fBParameters:\fR \f(CW$analysis_id\fR (scalar), \f(CW$matchFeatureId\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetPValueForCmBlastByAnalysisId()\fR"
.IX Item "$obj->getPValueForCmBlastByAnalysisId()"
\&\fBDescription:\fR Retrieve p_value for all match_part features linked to some blast analysis_id
.PP
\&\fBParameters:\fR \f(CW$analysis_id\fR (scalar), \f(CW$matchFeatureId\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetGenusAndSpeciesByUniquename()\fR"
.IX Item "$obj->getGenusAndSpeciesByUniquename()"
\&\fBDescription:\fR Retrieve the organism.genus and organism.species given a feature.uniquename value
.PP
\&\fBParameters:\fR \f(CW$id\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetFeaturePropertiesByUniquename()\fR"
.IX Item "$obj->getFeaturePropertiesByUniquename()"
\&\fBDescription:\fR Retrieve all cvterm.name and the featureprop.value values given a feature.uniquename value
.PP
\&\fBParameters:\fR \f(CW$id\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.ie n .IP "$obj\->getCmClusterMembersLookup($memCount, $organismCount\fR, \f(CW$jocId)"
.el .IP "$obj\->getCmClusterMembersLookup($memCount, \f(CW$organismCount\fR, \f(CW$jocId\fR)"
.IX Item "$obj->getCmClusterMembersLookup($memCount, $organismCount, $jocId)"
\&\fBDescription:\fR 
.PP
\&\fBParameters:\fR \f(CW$memCount\fR (scalar), \f(CW$organismCount\fR (scalar), \f(CW$jocId\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->getCmBlastLookup($cutoff)"
.IX Item "$obj->getCmBlastLookup($cutoff)"
\&\fBDescription:\fR 
.PP
\&\fBParameters:\fR \f(CW$cutoff\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->getCmBlastByOrganismLookup($cutoff)"
.IX Item "$obj->getCmBlastByOrganismLookup($cutoff)"
\&\fBDescription:\fR 
.PP
\&\fBParameters:\fR \f(CW$cutoff\fR (scalar)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetLineageSpecificAnalysisProteinInfo()\fR"
.IX Item "$obj->getLineageSpecificAnalysisProteinInfo()"
\&\fBDescription:\fR 
.PP
\&\fBParameters:\fR none
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetParalogCountLookup()\fR"
.IX Item "$obj->getParalogCountLookup()"
\&\fBDescription:\fR 
.PP
\&\fBParameters:\fR none
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetSameSpeciesParalogCountLookup()\fR"
.IX Item "$obj->getSameSpeciesParalogCountLookup()"
\&\fBDescription:\fR 
.PP
\&\fBParameters:\fR none
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetOrganismLookup()\fR"
.IX Item "$obj->getOrganismLookup()"
\&\fBDescription:\fR 
.PP
\&\fBParameters:\fR none
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
.RE
.IP "$obj\->\fIgetUniquenameToFeatureIdLookup()\fR"
.IX Item "$obj->getUniquenameToFeatureIdLookup()"
\&\fBDescription:\fR Retrieve the uniquename and feature_id tuples from feature table
.PP
\&\fBParameters:\fR \f(CW$args\fR{no_obsolete} (scalar \- unsigned integer)
.PP
\&\fBReturns:\fR Perl \s-1DBI\s0 results array reference
