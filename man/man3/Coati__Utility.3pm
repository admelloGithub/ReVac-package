.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Coati::Utility 3"
.TH Coati::Utility 3 "2006-10-27" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Utility.pm \- A module for providing utilities functions
.SH "VERSION"
.IX Header "VERSION"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    This is a library of utility functions that are auto exported.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "Overview"
.IX Subsection "Overview"
.ie n .IP "$hashrefarray = create_hash($fields, $ret)" 4
.el .IP "$hashrefarray = create_hash($fields, \f(CW$ret\fR)" 4
.IX Item "$hashrefarray = create_hash($fields, $ret)"
\&\fBDescription:\fR 
.Sp
Creates an array of hash references from a multidimensional array
.Sp
.Vb 9
\&    $ret = [['Avalue1','Bvalue1'],['Avalue2','Bvalue2']];
\&    $fields = ['A','B'];
\&    $hashrefarray = create_hash($fields,$ret);
\&    foreach my $elt (@$hashrefarray){
\&       #$elt->{'A'} eq 'Avalue1'
\&       #$elt->{'B'} eq 'Bvalue1'
\&       #$elt->{'A'} eq 'Avalue2'
\&       #$elt->{'B'} eq 'Bvalue2'
\&    }
.Ve
.Sp
\&\fBParameters:\fR 
.Sp
$fields \- array of names to be used as hash keys
\&\f(CW$ret\fR \- multidimensional array
.Sp
\&\fBReturns:\fR 
.Sp
$hashrefarray \- an array of hash references
.IP "\fIdo_params()\fR" 4
.IX Item "do_params()"
\&\fBDescription:\fR function that handles named parameters given to
functions. The subroutine pre-processes named or positional arguments
and returns the result as a hash reference.
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 5
\&    Users may send an anonymous hash which describes the parameter
\&    names and their defaults OR a list of values. This allows users to
\&    make a function call with either the usual argument list, or a hash
\&    of named parameters. This enables adding complex variables when
\&    you want to get real tricky.
.Ve
.Sp
.Vb 1
\&    The coder must describe each key but the content may remain blank, as in:
.Ve
.Sp
.Vb 4
\&    my $param = do_params(\e@_,
\&                           [foo => '', 
\&                            bar => '']
\&                           );
.Ve
.Sp
\&\fBReturns:\fR 
 A reference to a hash of params.
.Sp
The following code demonstrates the use of \fIdo_params()\fR;
.Sp
invoke using: \f(CW$OBJ\fR\->\fIparam_demo()\fR;
.Sp
.Vb 2
\& sub param_demo {
\&     my $self = shift;
.Ve
.Sp
.Vb 2
\&     param_demo_function("Love1radio", "godzone");
\&     print "\en";
.Ve
.Sp
.Vb 2
\&     param_demo_function();
\&     print "\en";
.Ve
.Sp
.Vb 2
\&     param_demo_function({foo => 'mary', bar => 'palmer'});
\&     print "\en";
.Ve
.Sp
.Vb 2
\&     param_demo_function({foo => 'dundunba'});
\&     print "\en";
.Ve
.Sp
.Vb 1
\& }
.Ve
.Sp
.Vb 5
\& sub param_demo_function {
\&     my $param = do_params(\e@_,
\&                            [foo => 'val1', 
\&                             bar => 'val2']
\&                            );
.Ve
.Sp
.Vb 3
\&     for (keys %$param) {
\&        print "$_: $$param{$_}\en";
\&     }
.Ve
.Sp
.Vb 1
\&     print "$param->{'foo'}\en";
.Ve
.Sp
.Vb 1
\& }
.Ve
.Sp
Neat huh? \fIdo_params()\fR code was taken from Effective
Perl Programming, Joseph N. Hall. \s-1ISBN\s0 0201419750.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
This module does not use or set any environment variables. The standard
module, File::Basename is required.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP """Error message that may appear.""" 4
.el .IP "``Error message that may appear.''" 4
.IX Item "Error message that may appear."
Explanation of error message.
.ie n .IP """Another message that may appear.""" 4
.el .IP "``Another message that may appear.''" 4
.IX Item "Another message that may appear."
Explanation of another error message.
.SH "BUGS"
.IX Header "BUGS"
Description of known bugs (and any workarounds). Usually also includes an
invitation to send the author bug reports.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
List of any files or other Perl modules needed by the file or class and a
brief description why.
.SH "AUTHOR(S)"
.IX Header "AUTHOR(S)"
.Vb 3
\& The Institute for Genomic Research
\& 9712 Medical Center Drive
\& Rockville, MD 20850
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002, The Institute for Genomic Research. All Rights Reserved.
