.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TIGR::FASTAwriter 3"
.TH TIGR::FASTAwriter 3 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
TIGR::FASTAwriter \- TIGR::FASTAwriter class for writing TIGR::FASTArecord
objects to a file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use TIGR::FASTAwriter;
\&  my $obj_instance = new TIGR::FASTAwriter ($tigr_foundation_obj,
\&                                            $output_file_name);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an object definition for a TIGR::FASTAwriter. 
The TIGR::FASTAwriter object accepts TIGR::FASTArecord objects for
printing to an output file.
.ie n .IP "$obj_instance = new TIGR::FASTAwriter ($foundation_object, $error_array_ref\fR, \f(CW$output_file);" 4
.el .IP "$obj_instance = new TIGR::FASTAwriter ($foundation_object, \f(CW$error_array_ref\fR, \f(CW$output_file\fR);" 4
.IX Item "$obj_instance = new TIGR::FASTAwriter ($foundation_object, $error_array_ref, $output_file);"
This method returns a new instance of a TIGR::FASTAwriter object. It takes
three optional parameters: a TIGR::Foundation object (\f(CW$foundation_object\fR),
a reference to an array for logging user error messages (\f(CW$error_array_ref\fR),
and an output file name, \f(CW$output_file\fR, as parameters. A new object instance 
is returned on success and successful opening of a specified output 
file.
If the file supplied cannot be opened, this method returns undefined.
This method also returns undefined if the parameters supplied are invalid.
Writing errors are written to the array at \f(CW$error_array_ref\fR and the 
log file.
.ie n .IP "$result = $obj_instance\fR\->open($file_name, \f(CW$flag);" 4
.el .IP "$result = \f(CW$obj_instance\fR\->open($file_name, \f(CW$flag\fR);" 4
.IX Item "$result = $obj_instance->open($file_name, $flag);"
This method opens a \s-1FASTA\s0 file for writing or appending.  The file, 
\&\fI$file_name\fR, is opened using the \f(CW\*(C`open()\*(C'\fR flags specified by \f(CW$flag\fR.
Supported flags include 'w' and 'a'.  On success, this method returns 1.
The default \f(CW\*(C`open()\*(C'\fR method is 'w', or truncated open.  If the file cannot
be opened, this method returns undefined.
.ie n .IP "$result = $obj_instance\fR\->\fIclose();" 4
.el .IP "$result = \f(CW$obj_instance\fR\->\fIclose()\fR;" 4
.IX Item "$result = $obj_instance->close();"
This method closes the object file stream and resets all internal data
structures.  The result of the operation is returned.  If the file stream
is closed successfully, this object returns true (1), otherwise false
(undefined).
.ie n .IP "$result = $obj_instance\->write($fasta_obj);" 4
.el .IP "$result = \f(CW$obj_instance\fR\->write($fasta_obj);" 4
.IX Item "$result = $obj_instance->write($fasta_obj);"
This method takes a TIGR::FASTArecord object, \f(CW$fasta_obj\fR, and writes it
to the file specified in \f(CW\*(C`new()\*(C'\fR or \f(CW\*(C`open()\*(C'\fR.  On success, this method 
returns true (1).  On error, this method returns false (undefined) and logs
an error message.
.SH "USAGE"
.IX Header "USAGE"
To use this module, load the \f(CW\*(C`TIGR::FASTArecord\*(C'\fR and \f(CW\*(C`TIGR::FASTAwriter\*(C'\fR
modules with the \f(CW\*(C`use\*(C'\fR function. Then, create a new instance of the object 
via the \f(CW\*(C`new()\*(C'\fR method, as shown below. There are several invocations 
possible for this method since all parameters to \f(CW\*(C`new()\*(C'\fR are optional.
An example script using this module follows. The \f(CW\*(C`TIGR::Foundation\*(C'\fR
module is included for completeness but does not have to be used.
.PP
.Vb 1
\&   #!/usr/local/bin/perl -w
.Ve
.PP
.Vb 4
\&   # This example uses the TIGR::FASTAwriter object to write 
\&   # a simple TIGR::FASTArecord object to a file specified with
\&   # the '-o' option to this script.
\&   # Writing errors are collected to the '@errors_list' array.
.Ve
.PP
.Vb 4
\&   use strict;
\&   use TIGR::Foundation;
\&   use TIGR::FASTArecord;
\&   use TIGR::FASTAwriter;
.Ve
.PP
.Vb 5
\&   MAIN:
\&   {
\&      my $tf_object = new TIGR::Foundation;
\&      my @errors_list = ();
\&      my $output_file = undef;
.Ve
.PP
.Vb 1
\&      my $getopts_result = undef;
.Ve
.PP
.Vb 1
\&      $getopts_result = $tf_object->TIGR_GetOptions( "o=s" => \e$output_file );
.Ve
.PP
.Vb 3
\&      if ( $getopts_result != 1 ) {
\&         $tf_object->bail("Invalid command line option.");
\&      }
.Ve
.PP
.Vb 3
\&      if ( ! defined ( $output_file ) ) {
\&         $tf_object->bail("Must specify an output file with the '-o' option");
\&      }
.Ve
.PP
.Vb 2
\&      my $header = "ORF00001";
\&      my $data = "ATGC";
.Ve
.PP
.Vb 4
\&      my $fasta_record = new TIGR::FASTArecord $header, $data;
\&      if ( ! defined ( $fasta_record ) ) {
\&         $tf_object->bail("Cannot create TIGR::FASTArecord object");
\&      }
.Ve
.PP
.Vb 2
\&      # Create a TIGR::FASTAwriter instance using TIGR::Foundation and
\&      # an error message list.
.Ve
.PP
.Vb 1
\&      my $fasta_writer = new TIGR::FASTAwriter $tf_object, \e@errors_list;
.Ve
.PP
.Vb 3
\&      $fasta_writer->open($output_file) or 
\&         $tf_object->logLocal("Cannot open output file $output_file", 
\&                               $DEBUG_LEVEL_1);
.Ve
.PP
.Vb 6
\&      if ( scalar(@errors_list) > 0 ) { # are there parse errors?
\&         while ( @errors_list ) { # get the messages from the list
\&            my $message = shift @errors_list; 
\&            print STDERR $message, "\en";
\&         }
\&      }
.Ve
.PP
.Vb 4
\&      $fasta_writer->write($fasta_record ) or 
\&         $tf_object->logLocal("Cannot write FASTA record to $output_file", 
\&                               $DEBUG_LEVEL_1);
\&   }
.Ve
