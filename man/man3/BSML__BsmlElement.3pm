.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BSML::BsmlElement 3"
.TH BSML::BsmlElement 3 "2006-06-20" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
BsmlElement.pm \- Base Class for Bsml Elements
.SH "VERSION"
.IX Header "VERSION"
This document refers to version 1.0 of the \s-1BSML\s0 Object Layer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  $bsmlelem->setattr( 'id', 'A11243' );
\&  $hashref = $bsmlelem->returnattrHashR();
.Ve
.PP
.Vb 4
\&  foreach my $key ( keys( %{$hashref} ))
\&  {
\&    print "$hashref->{$key}\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "Overview"
.IX Subsection "Overview"
.Vb 1
\&  This file provides a base class for handling element attributes and BSML elements.
.Ve
.Sh "Constructor and initialization"
.IX Subsection "Constructor and initialization"
.Vb 1
\&  A BsmlElement is not useful by itself. It should be only used as a base class.
.Ve
.Sh "Class and object methods"
.IX Subsection "Class and object methods"
.ie n .IP "$elem\->addattr( $key\fR, \f(CW$value )" 4
.el .IP "$elem\->addattr( \f(CW$key\fR, \f(CW$value\fR )" 4
.IX Item "$elem->addattr( $key, $value )"
\&\fBDescription:\fR add an attribute to a Bsml element
.Sp
\&\fBParameters:\fR ($key, \f(CW$value\fR) \- a key value pair 
.Sp
\&\fBReturns:\fR None
.ie n .IP "$elem\->setattr( $key\fR, \f(CW$value )" 4
.el .IP "$elem\->setattr( \f(CW$key\fR, \f(CW$value\fR )" 4
.IX Item "$elem->setattr( $key, $value )"
\&\fBDescription:\fR sets an attribute (equivalent to \fIaddattr()\fR, but kept for consistency with other \s-1API\s0 classes)
.Sp
\&\fBParameters:\fR  ($key, \f(CW$value\fR) \- a key value pair 
.Sp
\&\fBReturns:\fR None
.ie n .IP "$elem\->setattrh( $hashref )" 4
.el .IP "$elem\->setattrh( \f(CW$hashref\fR )" 4
.IX Item "$elem->setattrh( $hashref )"
\&\fBDescription:\fR sets an elements attributes according to the key/value pairs defined in the hash pointed to by \f(CW$hashref\fR
.Sp
\&\fBParameters:\fR ($hashref) a reference pointing to a hash containing the key value pairs to be added as element attributes
.Sp
\&\fBReturns:\fR None
.ie n .IP "$elem\->dropattr( $key )" 4
.el .IP "$elem\->dropattr( \f(CW$key\fR )" 4
.IX Item "$elem->dropattr( $key )"
\&\fBDescription:\fR removes an attribute from a \s-1BSML\s0 element
.Sp
\&\fBParameters:\fR ($key) \- the attribute key
.Sp
\&\fBReturns:\fR None
.IP "$elem\->\fIreturnattrHashR()\fR" 4
.IX Item "$elem->returnattrHashR()"
\&\fBDescription:\fR returns a hash reference to the key, value pairs making up an elements attribute set
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR hash reference
.ie n .IP "$elem\->returnattr( $key )" 4
.el .IP "$elem\->returnattr( \f(CW$key\fR )" 4
.IX Item "$elem->returnattr( $key )"
\&\fBDescription:\fR returns an attributes value given its key
.Sp
\&\fBParameters:\fR ( \f(CW$key\fR ) \- an attribute key
.Sp
\&\fBReturns:\fR an attribute value
.ie n .IP "$elem\->addBsmlAttr( $key\fR, \f(CW$value )" 4
.el .IP "$elem\->addBsmlAttr( \f(CW$key\fR, \f(CW$value\fR )" 4
.IX Item "$elem->addBsmlAttr( $key, $value )"
\&\fBDescription:\fR add a \s-1BSML\s0 attribute to a Bsml element
.Sp
\&\fBParameters:\fR ($key, \f(CW$value\fR) \- a key value pair 
.Sp
\&\fBReturns:\fR None
.ie n .IP "$elem\->setattr( $key\fR, \f(CW$value )" 4
.el .IP "$elem\->setattr( \f(CW$key\fR, \f(CW$value\fR )" 4
.IX Item "$elem->setattr( $key, $value )"
\&\fBDescription:\fR sets a \s-1BSML\s0 attribute (equivalent to \fIaddBsmlAttr()\fR, but kept for consistency with other \s-1API\s0 classes)
.Sp
\&\fBParameters:\fR  ($key, \f(CW$value\fR) \- a key value pair 
.Sp
\&\fBReturns:\fR None
.ie n .IP "$elem\->setBsmlAttrh( $hashref )" 4
.el .IP "$elem\->setBsmlAttrh( \f(CW$hashref\fR )" 4
.IX Item "$elem->setBsmlAttrh( $hashref )"
\&\fBDescription:\fR sets \s-1BSML\s0 attributes according to the key/value pairs defined in the hash pointed to by \f(CW$hashref\fR
.Sp
\&\fBParameters:\fR ($hashref) a reference pointing to a hash containing the key value pairs to be added as Bsml attributes
.Sp
\&\fBReturns:\fR None
.Sp
sub setBsmlAttrh
  {
      \f(CW$logger\fR\->debug("") if \f(CW$logger\fR\->is_debug;
.Sp
.Vb 1
\&    my $self = shift;
.Ve
.Sp
.Vb 1
\&    my ($href) = @_;
.Ve
.Sp
.Vb 5
\&    foreach my $key (keys(%{$href}))
\&      {
\&    $self->addBsmlAttr( $key, $href->{$key} );
\&      }
\&  }
.Ve
.ie n .IP "$elem\->dropBsmlAttr( $key )" 4
.el .IP "$elem\->dropBsmlAttr( \f(CW$key\fR )" 4
.IX Item "$elem->dropBsmlAttr( $key )"
\&\fBDescription:\fR removes a \s-1BSML\s0 attribute from a \s-1BSML\s0 element
.Sp
\&\fBParameters:\fR ($key) \- the attribute key
.Sp
\&\fBReturns:\fR None
.IP "$elem\->\fIreturnBsmlAttrHashR()\fR" 4
.IX Item "$elem->returnBsmlAttrHashR()"
\&\fBDescription:\fR returns a hash reference to the key, value pairs making up an elements attribute set
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR hash reference
.ie n .IP "$elem\->returnBsmlAttr( $key )" 4
.el .IP "$elem\->returnBsmlAttr( \f(CW$key\fR )" 4
.IX Item "$elem->returnBsmlAttr( $key )"
\&\fBDescription:\fR returns a \s-1BSML\s0 attribute value given its key
.Sp
\&\fBParameters:\fR ($key) \- the attribute key
.Sp
\&\fBReturns:\fR attribute value
