.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BSML::BsmlAlignmentFilter 3"
.TH BSML::BsmlAlignmentFilter 3 "2006-06-20" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
.Vb 1
\&  BSML::BsmlAlignmentFilter - allows filtering of bsml alignment results while parsing.
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use BSML::BsmlAlignmentFilter;
.PP
my \f(CW$alignment\fR = new BSML::BsmlAlignmentFilter( { 'file' => '/path/to/file.bsml' } );
\&\f(CW$alignment\fR\->add_filter( 'p_value', '\-1e\-5' );  #Retun those Seq-pair-run (\s-1HSP\s0) with a p_value of less than
                                               #1e\-5.  
\&\f(CW$alignment\fR\->add_filter( 'percent_similarity', '+30' );  #Return only those HSPs with % similarity greater
                                                        #than 30.
\&\f(CW$alignment\fR\->add_filter( 'compseq', qr/^gb/ );  #Return those HSPs that have a compseq starting with gb.
.PP
$alignment\->\fIparse_alignment_file()\fR;
.PP
$alignment\->get_evidence( \f(CW$refseq\fR );          # Will return evidence for specified refseq if available
 or 
\&\f(CW$alignment\fR\->get_evidence( );                  # Will return evidence for all refseqs available
.SH "INPUT"
.IX Header "INPUT"
.Vb 2
\&    The bsml input file for this module is any alignment BSML document.  See
\&    bsml documentation for that format
.Ve
.SH "FUTURE"
.IX Header "FUTURE"
.Vb 1
\&    --ACCESSING PARSED DATA
.Ve
.PP
.Vb 2
\&    Unfortunately, there are no accessor methods for any of the data and the data structure should
\&    be used to retrieve the alignment data.  A brief overview of the data structure follows:
.Ve
.PP
.Vb 1
\&    $self = {
.Ve
.PP
.Vb 1
\&    'filters' => { 'key' => 'value' },    #Any added filters will be stored here.
.Ve
.PP
.Vb 2
\&    'alignments' => { 'compseq' => {  'key' => 'value',                      #Seq-pair-alignment[@whatever] and child Attribute 
\&                                                                             #name and content are stored here ( keyed by compseq)
.Ve
.PP
.Vb 2
\&                                      'spr' => [ { 'key' => 'value' } ]      #Seq-pair-run[@whatever] and child Attribute name and
\&                                                                             #content are stored in an array ref under the key
.Ve
.PP
.Vb 1
\&    ...
.Ve
.PP
.Vb 1
\&    --PRINTING TO FILE
.Ve
.PP
.Vb 2
\&    I would also like to eventually put in a couple methods that will print this filtered information
\&    out to different formats (btab, bsml) to be used in other places.  But this will work for right now.
.Ve
.SH "CONTACT"
.IX Header "CONTACT"
.Vb 2
\&    Kevin Galens
\&    kgalens@som.umaryland.edu
.Ve
.RE
.IP "$alignment\->parse_alignment_file"
.IX Item "$alignment->parse_alignment_file"
\&\fBDescription:\fR Will apply the added filters and parse the
    alignment file.
.PP
\&\fBParameters:\fR Optional file parameter will parse 
    instead of what is stored in \f(CW$self\fR\->{'file'}
.PP
\&\fBReturns:\fR Nothing.
.RE
.IP "$alignment\->get_alignment"
.IX Item "$alignment->get_alignment"
\&\fBDescription:\fR Returns alignment information for all alignments that passed 
    the filters or a specific refseq if an accession is passed.
.PP
.Vb 5
\&    Alignment hash returned in the following format:
\&    $alignment->{$compseq} = { 'key' => 'value',
\&                               'spr' => [ {'key' => 'value'},
\&                                          {'key' => 'value'} ],
\&                                        [ {'key' => 'value'} ]...
.Ve
.PP
.Vb 2
\&                                        }
\&    where the key value pairs are attributes parsed from the bsml
.Ve
.PP
\&\fBParameters:\fR Optional refseq argument.  
.PP
\&\fBReturns:\fR All alignments if no refseq is passed in
               \- if used in array context, will return an array of alignments
               \- otherwise will return a hash reference keyed by refseq id
            A set of alignments if a refseq is used
               \- hash reference in format described above
            An empty data structure
               \- if a refseq is passed but is not found will return
                 an empty list in list context
               \- or an empty hash reference otherwise
.RE
.ie n .IP "\fB\s-1SUBROUTINE\s0\fR  $alignment\->get_alignment_intervals"
.el .IP "\fB\s-1SUBROUTINE\s0\fR  \f(CW$alignment\fR\->get_alignment_intervals"
.IX Item "SUBROUTINE  $alignment->get_alignment_intervals"
\&\fBDescription:\fR Returns an abbreviated data structure only containing
    the compseq id as well as the coordinates for the match in the following
    format:
\&\fBParameters:\fR 
.PP
\&\fBReturns:\fR
