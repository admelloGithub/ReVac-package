.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GFF3::GTFBuilder 3"
.TH GFF3::GTFBuilder 3 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
GTF::GTFBuilder.pm 
.PP
A class to facilitate the creation of GTF files.
.PP
Will be based on the specification outlined here:
http://mblab.wustl.edu/GTF22.html#resources
.SH "VERSION"
.IX Header "VERSION"
1.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use GTFBuilder;
.PP
my \f(CW$obj\fR = new GTF::GTFBuilder( filename => '/tmp/myfile.gtf');
.PP
$obj\->addRecord($gtfRecord);
.PP
$obj\->\fIwriteRecords()\fR;
.SH "AUTHOR"
.IX Header "AUTHOR"
Jay Sundaram
sundaram@tigr.org
.SH "METHODS"
.IX Header "METHODS"
.IP "\fInew()\fR" 4
.IX Item "new()"
\&\fBDescription:\fR Instantiate GTFBuilder object
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 1
\& %args
.Ve
.Sp
\&\fBReturns:\fR Returns a reference to GTFBuilder
.IP "$self\->_init(%args)" 4
.IX Item "$self->_init(%args)"
\&\fBDescription:\fR Typical Perl \fIinit()\fR method
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 1
\& %args
.Ve
.Sp
\&\fBReturns:\fR None
.IP "\s-1DESTROY\s0" 4
.IX Item "DESTROY"
\&\fBDescription:\fR GTFBuilder class destructor
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR None
.IP "$obj\->doesRecordExist($id)" 4
.IX Item "$obj->doesRecordExist($id)"
\&\fBDescription:\fR Check whether builder has reference to some GTFRecord with \f(CW$id\fR
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 1
\& $id - scalar/string corresponding to the ID attribute of the GTFRecord
.Ve
.Sp
\&\fBReturns:\fR 
.Sp
.Vb 2
\& 0 - scalar false
\& 1 - scalar true
.Ve
.ie n .IP "$obj\->addHeader($key, $value)" 4
.el .IP "$obj\->addHeader($key, \f(CW$value\fR)" 4
.IX Item "$obj->addHeader($key, $value)"
\&\fBDescription:\fR Add \s-1GTF\s0 file header
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 2
\& $key   - scalar/string name of the header
\& $value - scalar/string value of the header attribute
.Ve
.Sp
\&\fBReturns:\fR None
.IP "$obj\->getRecordById($id)" 4
.IX Item "$obj->getRecordById($id)"
\&\fBDescription:\fR Return reference to GTFRecord with id \f(CW$id\fR
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 1
\& $id - scalar/string value that corresponds to the ID attribute of the GTFRecord
.Ve
.Sp
\&\fBReturns:\fR reference to the GTFRecord with id \f(CW$id\fR
.ie n .IP "$obj\->createAndAddRecord($id, $seqid\fR, \f(CW$source\fR, \f(CW$type\fR, \f(CW$start\fR, \f(CW$stop\fR, \f(CW$score\fR, \f(CW$strand\fR, \f(CW$phase)" 4
.el .IP "$obj\->createAndAddRecord($id, \f(CW$seqid\fR, \f(CW$source\fR, \f(CW$type\fR, \f(CW$start\fR, \f(CW$stop\fR, \f(CW$score\fR, \f(CW$strand\fR, \f(CW$phase\fR)" 4
.IX Item "$obj->createAndAddRecord($id, $seqid, $source, $type, $start, $stop, $score, $strand, $phase)"
\&\fBDescription:\fR Creates a new GTFRecord object and stores reference to that object
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 9
\& $id     - the column 9 ID attribute
\& $seqid  - column 1 seqid
\& $source - column 2 source
\& $type   - column 3 type
\& $start  - column 4 start
\& $stop   - column 5 stop
\& $score  - column 6 score
\& $strand - column 7 strand
\& $phase  - column 8 phase
.Ve
.Sp
\&\fBReturns:\fR reference to the GTFRecord
.IP "$obj\->removeRecord($id)" 4
.IX Item "$obj->removeRecord($id)"
\&\fBDescription:\fR Remove all references to the GTFRecord with id \f(CW$id\fR
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 1
\& $id     - the column 9 ID attribute
.Ve
.Sp
\&\fBReturns:\fR None
.IP "$obj\->extractFastaSequenceFromRecord($id)" 4
.IX Item "$obj->extractFastaSequenceFromRecord($id)"
\&\fBDescription:\fR Removes that \s-1FASTA\s0 sequence from the GTFRecord with id \f(CW$id\fR
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 1
\& $id - scalar/string the ID attribute of the GTFRecord
.Ve
.Sp
\&\fBReturns:\fR scalar/string \s-1FASTA\s0 sequence
.IP "$obj\->addFastaSequenceToRecord($id)" 4
.IX Item "$obj->addFastaSequenceToRecord($id)"
\&\fBDescription:\fR Adds \s-1FASTA\s0 sequence to the GTFRecord with id \f(CW$id\fR
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 2
\& $id    - scalar/string the ID attribute of the GTFRecord
\& $fasta - scalar/string the FASTA sequence
.Ve
.Sp
\&\fBReturns:\fR None
.ie n .IP "$obj\->linkFeatureToSequence($sequence_id, $gtfRecord)" 4
.el .IP "$obj\->linkFeatureToSequence($sequence_id, \f(CW$gtfRecord\fR)" 4
.IX Item "$obj->linkFeatureToSequence($sequence_id, $gtfRecord)"
\&\fBDescription:\fR Associates the GTFRecord of a feature to the contig GTFRecord
.Sp
\&\fBParameters:\fR 
.Sp
.Vb 2
\& $sequence_id - scalar/string the ID attribute of the contig GTFRecord
\& $gtfRecord  - GTFRecord
.Ve
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIwriteFile()\fR" 4
.IX Item "$obj->writeFile()"
\&\fBDescription:\fR Calls methods that write the data to the \s-1GTF\s0 file defined by _filename
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIwriteHeaders()\fR" 4
.IX Item "$obj->writeHeaders()"
\&\fBDescription:\fR Writes the headers to the \s-1GTF\s0 file
.Sp
\&\fBParameters:\fR 
.Sp
$fh \- file handle
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIwriteRecords()\fR" 4
.IX Item "$obj->writeRecords()"
\&\fBDescription:\fR Writes the GTFRecords to the \s-1GTF\s0 file
.Sp
\&\fBParameters:\fR 
.Sp
$fh \- file handle
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fIwriteFasta()\fR" 4
.IX Item "$obj->writeFasta()"
\&\fBDescription:\fR Writes the \s-1FASTA\s0 headers and sequences to the \s-1GTF\s0 file
.Sp
\&\fBParameters:\fR 
.Sp
$fh \- file handle
.Sp
\&\fBReturns:\fR None
.IP "$obj\->\fInextRecord()\fR" 4
.IX Item "$obj->nextRecord()"
\&\fBDescription:\fR Iteratively returns reference to each GFFRecord
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR reference to GTFRecord
.IP "$obj\->\fI_sortFeaturesByCoordinates()\fR" 4
.IX Item "$obj->_sortFeaturesByCoordinates()"
\&\fBDescription:\fR Sort all of the GFFRecords by start coordinate
.Sp
\&\fBParameters:\fR None
.Sp
\&\fBReturns:\fR None
