.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Ergatis::SavedPipeline 3"
.TH Ergatis::SavedPipeline 3 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
.Vb 1
\&    SavedPipeline.pm - A module for loading and building saved pipeline templates.
.Ve
.PP
.Vb 1
\&    =head1 SYNOPSIS
.Ve
.PP
.Vb 2
\&    To load an existing pipeline template, and then create a new pipeline
\&    instance within the AA1 project space:
.Ve
.PP
.Vb 7
\&    my $pipe = Ergatis::SavedPipeline->new( 
\&    template => '/path/to/saved/pipelines/some_label/pipeline.layout'
\&    );
\&$pipe->write_pipeline( 
\&    repository_root => '/usr/local/annotation/FUN',
\&    id_repository => '/path/to/global_id_repository'
\&    );
.Ve
.PP
To save a pipeline template from an existing pipeline.xml:
.PP
.Vb 4
\&    my $pipe = Ergatis::SavedPipeline->new(
\&    source => '/path/PROJECT/Workflow/pipeline/pipeline_id/pipeline.xml'
\&    );
\&$pipe->write_template( template => 'save/pipeline/dir/' );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.IP "\fI\s-1PACKAGE\s0\fR\->\fInew()\fR" 3
.IX Item "PACKAGE->new()"
.Vb 2
\&    Returns a newly created "saved" pipeline object.  If loading an existing
\&    template, pass a 'template' argument pointing to the template pipeline.xml
.Ve
.IP "\fI$OBJ\fR\->\fIload_template()\fR" 3
.IX Item "$OBJ->load_template()"
.Vb 2
\&    Loads an existing pipeline template.  This only needs to be called if you
\&    failed to pass a 'template' parameter when using the new method.
.Ve
.IP "\fI$OBJ\fR\->\fIload_pipeline()\fR" 3
.IX Item "$OBJ->load_pipeline()"
.Vb 3
\&    Loads an existing pipeline structure and checks that $component_name.$token.user.config
\&    files are present, usually in order to create a template for later use.
\&    Only needs to be called if a 'source' parameter was not passed with new method.
.Ve
.IP "\fI$OBJ\fR\->\fIwrite_template()\fR" 3
.IX Item "$OBJ->write_template()"
.Vb 3
\&    Writes a pipeline template into the saved area, 
\&(optionally with the associated component config files <- not true, all 
\& $component_name.$token.user.config files will be copied into save dir)
.Ve
.IP "\fI$OBJ\fR\->\fIwrite_pipeline()\fR" 3
.IX Item "$OBJ->write_pipeline()"
.Vb 4
\&    Creates a ready-to-execute pipeline xml in the defined project
\&    space.  You must pass a repository_root parameter to this method.  You may optionally
\&    pass a shared_config parameter, else it will derive it from the repository root.
\&    Returns an Ergatis::Pipeline object.
.Ve
.SH "NOTES"
.IX Header "NOTES"
.Vb 2
\&    Using the same SavedPipeline object for saving a template pipeline and building
\&    a new pipeline from a saved template is not recommended and is prevented.
.Ve
.PP
.Vb 1
\&    =head1 AUTHOR
.Ve
.PP
.Vb 2
\&    Joshua Orvis
\&    jorvis@tigr.org
.Ve
