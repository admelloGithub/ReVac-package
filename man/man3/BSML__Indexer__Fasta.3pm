.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BSML::Indexer::Fasta 3"
.TH BSML::Indexer::Fasta 3 "2006-06-20" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
BSML::Indexer::Fasta;
.SH "VERSION"
.IX Header "VERSION"
This document refers BSML::Indexer::Fasta.pm.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use BSML::Indexer::Fasta;
.Ve
.PP
.Vb 2
\&  my $indexdir = "/tmp";
\&  my $file = "/home/jdoe/bacteria.nraa";
.Ve
.PP
.Vb 1
\&  my $indexer = BSML::Indexer::Fasta->new($file, $indexdir);
.Ve
.PP
.Vb 2
\&  # Check the health of the various indices for the data file.
\&  my @check = $indexer->check_indices;
.Ve
.PP
.Vb 3
\&  # Create the indices if necessary...
\&  if ($check[0] == 1) { $indexer->index_entries };
\&  if ($check[1] == 1) { $indexer->index_headers };
.Ve
.PP
.Vb 2
\&  # Get the name of the entry index file.
\&  my $entry_index = $indexer->entry_index;
.Ve
.PP
.Vb 2
\&  # Get the name of the header index file.
\&  my $header_index = $indexer->header_index;
.Ve
.PP
.Vb 2
\&  my $filepath = $indexer->filepath;
\&  my $filename = $indexer->filename;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides methods to check whether index files for Yank data
files are up to date, and if not, to generate them.
.Sh "Class and object methods"
.IX Subsection "Class and object methods"
.ie n .IP "BSML::Indexer::Fasta\->new($file, $indexdir);" 4
.el .IP "BSML::Indexer::Fasta\->new($file, \f(CW$indexdir\fR);" 4
.IX Item "BSML::Indexer::Fasta->new($file, $indexdir);"
\&\fBDescription:\fR This is the constructor which creates an instance
of the class.
.Sp
\&\fBParameters:\fR \f(CW$file\fR \- The datafile (a multi-FASTA file) that is
to be indexed, or checked for updated indices.
 \f(CW$indexdir\fR \- The directory where the indices are to be stored.
.Sp
.Vb 2
\& Example:
\& my $indexer = BSML::Indexer->new($file, $indexdir);
.Ve
.Sp
\&\fBReturns:\fR \f(CW$self\fR, an instance of the class.
.IP "$obj\->\fIheader_index()\fR;" 4
.IX Item "$obj->header_index();"
\&\fBDescription:\fR This method returns the name of the header index file
for a datafile.
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR The full path to the header index file.
.IP "$obj\->\fIcheck_indices()\fR;" 4
.IX Item "$obj->check_indices();"
\&\fBDescription:\fR Check if the indices for the data source for this search
exist and are up\-to\-date. 
.Sp
\&\fBParameters:\fR None.
.Sp
\&\fBReturns:\fR In scalar context, a reference to a 3 element array containing
flags (0 or 1) as to whether a particular set of indices exists and is
up\-to\-date.  The first element is indicates whether the \*(L"entry\*(R" index is okay.
The second and third elements indicate whether the organism and accession
indices are okay. In list context, the array itself is returned.
.IP "$obj\->\fIindex_headers()\fR;" 4
.IX Item "$obj->index_headers();"
\&\fBDescription:\fR Used to the various header index. For each
data file, the first word in the header (delimited by white space)
is indexed for subsequent searching. For example, in a header of
the form:
.Sp
.Vb 3
\&  ">abc def..."
\&       or
\&  "> abc def..."
.Ve
.Sp
the indexed word is \*(L"abc\*(R".
.Sp
\&\fBParameters:\fR None. 
.Sp
\&\fBReturns:\fR None.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
This module does not set or read any environment variables.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
This module has a unit testing script in the Yank installation test
directory.
.SH "BUGS"
.IX Header "BUGS"
There are no known bugs at this time. Please contact the ANTware team
at antware@tigr.org, or submit a bug report to bits.antware@tigr.org
if you discover one.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 6
\& CDB_File
\& Data::Dumper - To print data structures.
\& File::Basename - to help determine index filenames and locations.
\& File::Path - for the mkpath function, to create missing directories.
\& Log::Log4perl - For logging messages and debugging.
\& TIGR::Yank::Indexer - Parent class.
.Ve
.SH "AUTHOR(S)"
.IX Header "AUTHOR(S)"
.Vb 3
\& The Institute for Genomic Research
\& 9712 Medical Center Drive
\& Rockville, MD 20850
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2004, The Institute for Genomic Research. All Rights Reserved.
