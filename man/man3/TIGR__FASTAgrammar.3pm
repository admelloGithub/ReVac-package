.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TIGR::FASTAgrammar 3"
.TH TIGR::FASTAgrammar 3 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
FASTAgrammar \- module for validating FASTA format records
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use TIGR::FASTAgrammar ':public';
.Ve
.PP
.Vb 4
\&  $header = FASTA header here...
\&  $data = FASTA data here...
\&  $return_value = isValidFASTARecord($header, $data);
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functions for verifying compliance with \s-1TIGR\s0's \s-1FASTA\s0
file and record definitions.
.IP "$result = isValidFASTArecord(@record_defn);" 4
.IX Item "$result = isValidFASTArecord(@record_defn);"
This method determines if a \s-1FASTA\s0 record, \f(CW@record_defn\fR, fits the \s-1TIGR\s0
definition for a \s-1FASTA\s0 record.  \f(CW@record_defn\fR is an array of lines over
which the record is defined.  The first line should be the \s-1FASTA\s0 header, and
subsequent lines the data definition.  This method checks line width, 
character composition, and header format.  If the record parses correctly,
this method returns 1.  Otherwise, this method returns 0.
.IP "$result = isValidFASTAheader($header);" 4
.IX Item "$result = isValidFASTAheader($header);"
This method determines if the \s-1FASTA\s0 header description, \f(CW$header\fR, is
a valid description.  It checks for a leading carot symbol and trailing non
white space characters.  Any number of white space characters
may be interleaved throughout the text portion of the header, with the
exception that there may be no space between the carot and the first word.
If the header is valid, this method returns 1.  Otherwise, this method
returns 0.
.IP "$result = isValidFASTAdata($data_def);" 4
.IX Item "$result = isValidFASTAdata($data_def);"
This method takes the scalar data definition of a \s-1FASTA\s0 record, \f(CW$data_def\fR.
It tests the data and returns 1 if the data conforms to nucleotide data or if 
it conforms to peptide data or both. If the data is not recognizable or is 
undefined, it returns 0.
.IP "$result = isValidFASTAlineLength($line);" 4
.IX Item "$result = isValidFASTAlineLength($line);"
This method returns \-1 if the data line, \f(CW$line\fR is less than
the \s-1TIGR\s0 definition requirement for line length, 0 if the data
line meets the \s-1TIGR\s0 definition requirement for line length, and
1 if the data line is greater than the \s-1TIGR\s0 definition requirement
for line length.
.IP "$result = setValidFASTAlineLength($);" 4
.IX Item "$result = setValidFASTAlineLength($);"
This method takes in the first data line in the data portion of a \s-1FASTA\s0 record.
The function returns the length of this line if it is positive. This length 
determines the line length for all the data lines following this first line.  
The function returns undefined if unsuccessful.
.SH "USAGE"
.IX Header "USAGE"
This module is not intended for developer use.  Instead, use the front
end modules \f(CW\*(C`TIGR::FASTAreader\*(C'\fR and \f(CW\*(C`TIGR::FASTArecord\*(C'\fR.
