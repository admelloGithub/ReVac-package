.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GENSCAN2BSML 1"
.TH GENSCAN2BSML 1 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
genscan2bsml.pl \- convert genscan output to BSML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1USAGE:\s0 genscan2bsml.pl 
        \-\-input_file=/path/to/genscan.raw.file 
        \-\-output=/path/to/output.bsml
        \-\-project=aa1 
        \-\-fasta_input=/path/to/somefile.fsa 
        \-\-id_repository=/path/to/repository
        \-\-sourcename=sourcename
        \-\-programversion='current'
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-\-input_file,\-f\fR 
    Input file file from a genscan run.  \-i, \-\-input_list, will take in a list
    of input files, all of which will be stored in a single output bsml.
.PP
\&\fB\-\-output,\-o\fR 
    Output \s-1BSML\s0 file (will be created, must not exist)
.PP
\&\fB\-\-project,\-p\fR 
    Project \s-1ID\s0.  Used in creating feature ids. 
.PP
\&\fB\-\-fasta_input,\-a\fR
    Needed to create a Seq-data-import element referencing this path.
.PP
\&\fB\-\-id_repository,\-r\fR
    path to \-\-project's id_repository
.PP
\&\fB\-\-programversion,\-v\fR
    Version string to be used as value for the analysis attribute 'programversion'
.PP
\&\fB\-\-sourcename,\-s\fR
    Sourcename string to be used as value for the analysis attribute 'sourcename'
    Due to a silly hack in analysis2bsml.pl, you might need to put /dummy/dir at
    the end of it.
.PP
\&\fB\-\-log,\-l\fR 
    Log file
.PP
\&\fB\-\-debug,\-d\fR 
    Debug level.  Use a large number to turn on verbose debugging. 
.PP
\&\fB\-\-help,\-h\fR 
    This help message
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script is used to convert the output from a genscan search into \s-1BSML\s0.
.SH "INPUT"
.IX Header "INPUT"
You define the input file using the \-\-input_file option.  This file does not need any
special file extension.  The regular prediction output of genscan looks like this:
(Excluding header lines)
.PP
Gn.Ex Type S .Begin ...End .Len Fr Ph I/Ac Do/T CodRg P.... Tscr..
\&\-\-\-\-\- \-\-\-\- \- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\- \*(-- \-\- \-\-\-\- \-\-\-\- \-\-\-\-\- \-\-\-\-\- \-\-\-\-\-\-
.PP
.Vb 2
\& 1.01 Term +   5651   6289  639  1  0   81   35   400 0.481  34.31
\& 1.02 PlyA +   6539   6544    6                              -2.62
.Ve
.PP
.Vb 7
\& 2.00 Prom +   6570   6609   40                              -6.39
\& 2.01 Init +   8942   9175  234  1  0   66   57   714 0.999  67.88
\& 2.02 Intr +   9209  11608 2400  1  0    9    6  2378 0.397 225.56
\& 2.03 Intr +  11642  12440  799  1  1   50  -60   947 0.007  74.06
\& 2.04 Intr +  12604  12679   76  2  1   43   87    13 0.006  -2.13
\& 2.05 Term +  13098  13374  277  0  1   51   46   232 0.275  14.16
\& 2.06 PlyA +  13643  13648    6                               0.77
.Ve
.PP
which has the general format shown below.  (Taken from
 http://genome.imim.es/courses/Bioinformatics2003_genefinding/results/genscan.html)
.PP
Gn.Ex : gene number, exon number (for reference)
Type  : Init = Initial exon (\s-1ATG\s0 to 5' splice site)
        Intr = Internal exon (3' splice site to 5' splice site)
        Term = Terminal exon (3' splice site to stop codon)
        Sngl = Single-exon gene (\s-1ATG\s0 to stop)
        Prom = Promoter (\s-1TATA\s0 box / initation site)
        PlyA = poly-A signal (consensus: \s-1AATAAA\s0)
S     : \s-1DNA\s0 strand (+ = input strand; \- = opposite strand)
Begin : beginning of exon or signal (numbered on input strand)
End   : end point of exon or signal (numbered on input strand)
Len   : length of exon or signal (bp)
Fr    : reading frame (a forward strand codon ending at x has frame x mod 3)
Ph    : net phase of exon (exon length modulo 3)
I/Ac  : initiation signal or 3' splice site score (tenth bit units)
Do/T  : 5' splice site or termination signal score (tenth bit units)
CodRg : coding region score (tenth bit units)
P     : probability of exon (sum over all parses containing exon)
Tscr  : exon score (depends on length, I/Ac, Do/T and CodRg scores)
.SH "OUTPUT"
.IX Header "OUTPUT"
Base positions from the input file are renumbered so that positions start at zero and
reflect interbase numbering.  Also, the stop coordinates of each terminal \s-1CDS\s0 is
extended 3bp to include the stop codon.
.SH "CONTACT"
.IX Header "CONTACT"
.Vb 2
\&    Jason Inman
\&    jinman@tigr.org
.Ve
