.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SPLIT_MULTIFASTA 1"
.TH SPLIT_MULTIFASTA 1 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
split_multifasta.pl \- split a single FASTA file containing multiple sequences into separate files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1USAGE:\s0 split_multifasta.pl 
            \-\-input_file=/path/to/some_file.fsa 
            \-\-output_dir=/path/to/somedir
          [ \-\-output_list=/path/to/somefile.list 
            \-\-output_subdir_size=1000
            \-\-output_subdir_prefix=fasta
            \-\-seqs_per_file=1
            \-\-total_files=1
            \-\-compress_output=1
          ]
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-\-input_file,\-i\fR
    The input multi-fasta file to split.
.PP
\&\fB\-\-output_dir,\-o\fR
    The directory to which the output files will be written.
.PP
\&\fB\-\-output_list,\-s\fR
    Write a list file containing the paths of each of the regular output files.  This may be useful
    for later scripts that can accept a list as input.
.PP
\&\fB\-\-output_file_prefix,\-f\fR
    If defined, each file created will have this string prepended to its name.  This is ignored unless
    writing multiple sequences to each output file using the \-\-seqs_per_file option with a value greater
    than 1, else each file created will just be a number.
.PP
\&\fB\-\-output_subdir_size,\-u\fR
    If defined, this script will create numbered subdirectories in the output directory, each
    containing this many sequences files.  Once this limit is reached, another subdirectory
    is created.
.PP
\&\fB\-\-output_subdir_prefix,\-p\fR
    To be used along with \-\-output_subdir_size, this allows more control of the names of the
    subdirectories created.  Rather than just incrementing numbers (like 10), each subdirectory 
    will be named with this prefix (like prefix10).
.PP
\&\fB\-\-total_files, \-t\fR
    Used if the user wants to specify the total outputs files to be created. The script will
    determine the amount of sequences per file to meet this parameter. Cannot be used in conjunction
    with the seqs_per_file parameter.
.PP
\&\fB\-\-compress_output,\-c\fR
    Output fasta files will be gzipped when written.
.PP
\&\fB\-\-debug,\-d\fR 
    Debug level.  Use a large number to turn on verbose debugging. 
.PP
\&\fB\-\-log,\-l\fR 
    Log file
.PP
\&\fB\-\-help,\-h\fR
    This help message
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script is used to split a single \s-1FASTA\s0 file containing multiple sequences into separate
files containing one sequence each.
.SH "INPUT"
.IX Header "INPUT"
The input is defined with \-\-input_file and should be a single fasta file.  File extensions are
ignored.  When creating this multi-entry \s-1FASTA\s0 file, one should take care to make the first
*word* after the > symbol a unique value, as it will be used as the file name for that sequence.
For example:
.PP
.Vb 4
\&    >gi53791237 Tragulus javanicus p97bcnt gene for p97Bcnt
\&    ACAGGAGAAGAGACTGAAGAGACACGTTCAGGAGAAGAGCAAGAGAAGCCTAAAGAAATGCAAGAAGTTA
\&    AACTCACCAAATCACTTGTTGAAGAAGTCAGGTAACATGACATTCACAAACTTCAAAACTAGTTCTTTAA
\&    AAAGGAACATCTCTCTTTTAATATGTATGCATTATTAATTTATTTACTCATTGGCGTGGAGGAGGAAATG
.Ve
.PP
.Vb 4
\&    >gi15387669 Corynebacterium callunae pCC1 plasmid
\&    ATGCATGCTAGTGTGGTGAGTATGAGCACACACATTCATGGGCACCGCCGGGGTGCAGGGGGGCTTGCCC
\&    CTTGTCCATGCGGGGTGTGGGGCTTGCCCCGCCGATAGAGACCGGCCACCACCATGGCACCCGGTCGCGG
\&    GGTGATCGGCCACCACCACCGCCCCCGGCCACTCTCCCCCTGTCTAGGCCATATTTCAGGCCGTCCACTG
.Ve
.PP
Whitespace is ignored within the input file.  See the \s-1OUTPUT\s0 section for more on creation of 
output files.
.SH "OUTPUT"
.IX Header "OUTPUT"
The name of each output sequence file is pulled from the \s-1FASTA\s0 header of that sequence.  The
first *word* after the > symbol will be used as the file name, along with the extension .fsa.
The word is defined as all the text after the > symbol up to the first whitespace.
.PP
If the above example were your input file, two files would be created:
.PP
.Vb 2
\&    gi53791237.fsa
\&    gi15387669.fsa
.Ve
.PP
Any characters other than a\-z A\-Z 0\-9 . _ \- in the \s-1ID\s0 will be changed into an
underscore.  This only occurs in the file name; the original \s-1FASTA\s0 header within the file
will be unmodified.
.PP
You can pass a path to the optional \-\-output_list to create a text file containing the full paths
to each of the \s-1FASTA\s0 files created by this script.
.PP
Two other optional arguments, \-\-output_subdir_size and \-\-output_subdir_prefix, can be used
on input sets that are too large to write out to one directory.  This depends on the limitations
of your file system, but you usually don't want 100,000 files written in the same directory.
.PP
If you have an \s-1FASTA\s0 file containing 95000 sequences, and use the following option:
.PP
.Vb 2
\&    --output_dir=/some/path
\&    --output_subdir_size=30000
.Ve
.PP
The following will be created:
.PP
.Vb 6
\&    directory              file count
\&    ---------------------------------
\&    /some/path/1/          30000
\&    /some/path/2/          30000
\&    /some/path/3/          30000
\&    /some/path/4/           5000
.Ve
.PP
If you choose to create a list file (and you probably want to), it will contain these proper paths.
.PP
You may not want the subdirectories to simply be numbers, as above, so you can use the
\&\-\-output_subdir_prefix option.  For example:        
.PP
.Vb 3
\&    --output_dir=/some/path
\&    --output_subdir_size=30000
\&    --output_subdir_prefix=fasta
.Ve
.PP
The following will be created:
.PP
.Vb 6
\&    directory              file count
\&    ---------------------------------
\&    /some/path/fasta1/     30000
\&    /some/path/fasta2/     30000
\&    /some/path/fasta3/     30000
\&    /some/path/fasta4/      5000
.Ve
.PP
Finally, you can write multiple sequences to each output file using the \-\-seqs_per_file option, which
can be used along with \-\-outupt_subdir_size and \-\-output_subdir_prefix.  The main difference to note
is that, if you use \-\-seqs_per_file, the fasta file created will no longer be named using values
taken from the header, since it will contain multiple headers.  Instead, the file will simply be
named using sequential numbers starting at 1 (like 1.fsa).  For example: 
.PP
.Vb 4
\&    --output_dir=/some/path
\&    --output_subdir_size=3000
\&    --output_subdir_prefix=fasta
\&    --seqs_per_file=10
.Ve
.PP
The following will be created:
.PP
.Vb 6
\&    directory              file count
\&    ---------------------------------
\&    /some/path/fasta1/     3000
\&    /some/path/fasta2/     3000
\&    /some/path/fasta3/     3000
\&    /some/path/fasta4/      500
.Ve
.SH "CONTACT"
.IX Header "CONTACT"
.Vb 2
\&    Joshua Orvis
\&    jorvis@tigr.org
.Ve
