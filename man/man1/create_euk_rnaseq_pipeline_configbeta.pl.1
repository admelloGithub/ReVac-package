.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CREATE_EUK_RNASEQ_PIPELINE_CONFIGBETA 1"
.TH CREATE_EUK_RNASEQ_PIPELINE_CONFIGBETA 1 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
create_euk_rnaseq_pipeline_config.pl \- Creates the pipeline.layout and pipeline.config for the
                                       automated eukaryotic rna\-seq pipeline
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    create_euk_rnaseq_pipeline_config.pl --s <samples_file> --c <config_file> --r <reference_fasta> 
\&                                         [--qual <quality_score_format>] [--gtf <annotation_file>] 
\&                                         [--bowtie_build] [--quality_stats] [--quality_trimming]
\&                                         [--split][--alignment] [--bwtidxfile <bowtie_index>] [--visualization] 
\&                                         [--diff_gene_expr] [--comparison_groups <str>] [--count]  
\&                                         [--file_type <SAM|BAM>] [--sorted <position|name>] 
\&                                         [--isoform_analysis] [--include_novel] 
\&                                         [--diff_isoform_analysis] [--use_ref_gtf]
\&                                         [--td <template_directory>] [--o <outdir>] [--v] 
\&                                         [--man] [--help]
.Ve
.PP
.Vb 2
\&    parameters in [] are optional
\&    do NOT type the carets when specifying options
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 1
\&    --s <samples_file>                = /path/to/samples file with information on all samples to be analyzed.
.Ve
.PP
.Vb 1
\&    --c <config_file>                 = /path/to/config file with parameter information for multiple components.
.Ve
.PP
.Vb 1
\&    --r <reference_fasta>             = /path/to/reference FastA file for all samples. Optional.
.Ve
.PP
.Vb 1
\&    --qual <quality_score_format>     = FastQ quality score format (33 or 64). Optional. [33]
.Ve
.PP
.Vb 2
\&    --gtf <annotation_file>           = /path/to/annotation file in GFF or GTF format.
\&                                        Required with '--diff_gene_expr, --alignment'.
.Ve
.PP
.Vb 1
\&    --annotation_format               = annotation file format (gtf/gff3). Required
.Ve
.PP
.Vb 1
\&    --bowtie_build                    = execute bowtie_build component. Requires '--r'.
.Ve
.PP
.Vb 1
\&    --quality_stats                   = execute fastx_quality_stats component.
.Ve
.PP
.Vb 1
\&    --quality_trimming                = execute fastx_trimming component. Also generates quality statistics.
.Ve
.PP
.Vb 1
\&    --split                           = excute fastq split component for shorter alignement time
.Ve
.PP
.Vb 2
\&      --bwtidxfile <bowtie_index>   = /path/to/bowtie index file for alignment of all samples.
\&                                        Required for '--alignment' if not specifying '--bowtie_build'.
.Ve
.PP
.Vb 3
\&   --alignment                       = execute tophat alignment component.
\&                                        Sample file should be in the following format
\&                                        #Sample_ID<tab>Group_ID<tab>Mate_Pair_1<tab>Mate_Pair_2
.Ve
.PP
.Vb 2
\&        --bwtidxfile <bowtie_index>   = /path/to/bowtie index file for alignment of all samples.
\&                                        Required for '--alignment' if not specifying '--bowtie_build'.
.Ve
.PP
.Vb 4
\&    --visualization                   = execute bam2bigwig component.
\&                                        Requires additional information in sample file if not specifying '--alignment'.
\&                                        Sample file should be in the following format
\&                                        #Sample_ID<tab>Group_ID<tab>Alignment_BAM_File
.Ve
.PP
.Vb 2
\&        --file_type <SAM|BAM>         = alignment file format (BAM or SAM). [BAM]
\&                                        Required if not specifying '--alignment' and providing alignment file information in sample file.
.Ve
.PP
.Vb 1
\&        --sorted <position>           = if alignment BAM/SAM file is already sorted by position. [undef]
.Ve
.PP
.Vb 4
\&    --rpkm_analysis                   = execute rpkm coverage analysis component.
\&                                        Requires additional information in sample file if not specifying '--alignment'.
\&                                        Sample file should be in the following format
\&                                        #Sample_ID<tab>Group_ID<tab>Alignment_BAM_File
.Ve
.PP
.Vb 2
\&        --file_type <SAM|BAM>         = alignment file format (BAM or SAM). [BAM]
\&                                        Required if not specifying '--alignment' and providing alignment file information in sample file.
.Ve
.PP
.Vb 1
\&        --sorted <position>           = if alignment BAM/SAM file is already sorted by position. [undef]
.Ve
.PP
.Vb 4
\&     --diff_gene_expr                  = execute differential gene expression analysis component.
\&                                        Requires additional information in sample file if not specifying '--alignment'.
\&                                        Sample file should be in the following format
\&                                        #Sample_ID<tab>Group_ID<tab>Alignment_File
.Ve
.PP
.Vb 2
\&        --comparison_groups <str>     = string of groups to compare. e.g. "GRP#2vsGRP#1,GRP#3vsGRP#1".
\&                                        Group Ids SHOULD match Group Names in column 2 of the sample info file
.Ve
.PP
.Vb 2
\&        --count                       = generate count files.
\&                                        Required if not specifying '--alignment' and providing alignment file information in sample file.
.Ve
.PP
.Vb 2
\&        --file_type <SAM|BAM>         = alignment file format (BAM or SAM).
\&                                        Required if specifying '--count'. [SAM]
.Ve
.PP
.Vb 1
\&        --sorted <name>               = if alignment SAM file is already sorted by name. [undef]
.Ve
.PP
.Vb 4
\&    --isoform_analysis                = execute isoform identification analysis component.
\&                                        Requires additional information in sample file if not specifying '--alignment'.
\&                                        Sample file should be in the following format
\&                                        #Sample_ID<tab>Group_ID<tab>Alignment_File
.Ve
.PP
.Vb 2
\&        --file_type <SAM|BAM>         = alignment file format (BAM or SAM). [BAM]
\&                                        Required if not specifying '--alignment' and providing alignment file information in sample file.
.Ve
.PP
.Vb 1
\&        --sorted <position>           = if alignment BAM/SAM file is already sorted by position. [undef]
.Ve
.PP
.Vb 1
\&        --include_novel               = will not use reference annotation to determine isoforms.
.Ve
.PP
.Vb 4
\&    --diff_isoform_analysis           = execute differential isoform expression analysis component.
\&                                        Requires additional information in sample file if not specifying '--alignment'.
\&                                        Sample file should be in the following format
\&                                        #Sample_ID<tab>Group_ID<tab>Alignment_File<tab>Cufflinks_GTF_File
.Ve
.PP
.Vb 2
\&        --comparison_groups <str>     = string of groups to compare. e.g. "GRP#2vsGRP#1,GRP#3vsGRP#1".
\&                                        Group Ids SHOULD match Group Names in column 2 of the sample info file
.Ve
.PP
.Vb 2
\&        --file_type <SAM|BAM>         = alignment file format (BAM or SAM). [BAM]
\&                                        Required if not specifying '--alignment' and providing alignment file information in sample file.
.Ve
.PP
.Vb 1
\&        --sorted <position>           = if alignment SAM file is already sorted by position. [undef]
.Ve
.PP
.Vb 1
\&        --use_ref_gtf                 = use reference gtf for with all cuffdiff analysis.
.Ve
.PP
.Vb 1
\&    --td <template_directory>         = /path/to/template directory. Optional. [present working directory]
.Ve
.PP
.Vb 1
\&    --o <output dir>                  = /path/to/output directory. Optional. [present working directory]
.Ve
.PP
.Vb 1
\&    --v                               = generate runtime messages. Optional
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 4
\&    This script will combine a series of components related to the eukaryotic RNA-Seq
\&    analysis pipeline and create a pipeline.layout and pipeline.config file.
\&    The config file can then be configured with the correct options and a pipeline
\&    can be run.
.Ve
.PP
.Vb 3
\&    This script will combine components from the provided templates directory and create
\&    a new pipeline. The following components will be looked for by this script and a config
\&    file for each component is expected in the templates directory:
.Ve
.PP
.Vb 12
\&    bowtie_build             : generates the bowtie index files for a given reference file.
\&    fastx_toolkit            : generates the quality stats and the trimmed sequence file(s) for the given sequence file(s).
\&    tophat                   : generates the TopHat alignment files for single-end or paired-end sequence(s).
\&    samtools_file_convert    : converts file formats for downstream analysis.
\&    samtools_alignment_stats : generates the alignment stats from the alignment BAM file(s).
\&    bam2bigwig               : converts the alignment BAM file(s) to BedGraph and BigWig file(s).
\&    rpkm_analysis            : generates rpkm coverage analysis utilizing the alignment BAM file(s).
\&    htseq                    : generates the count files from the alignment SAM file(s) sorted by name.
\&    deseq                    : generates the differential gene expression analysis results utilizing DESeq software.
\&    cufflinks                : generates the isoform identification analysis results utilizing the alignment BAM file(s).
\&    cuffcompare              : generates the isoform comparison analysis results utilizing the isoform GTF file(s).
\&    cuffdiff                 : generates the differential isoform expression analysis results utilizing the alignment SAM file(s).
.Ve
.PP
.Vb 1
\&    There are some restrictions about which component would precede or succeed other components.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 5
\& Amol Carl Shetty
\& Bioinformatics Software Engineer II
\& Institute of Genome Sciences
\& University of Maryland
\& Baltimore, Maryland 21201
.Ve
