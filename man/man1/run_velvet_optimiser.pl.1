.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RUN_VELVET_OPTIMISER 1"
.TH RUN_VELVET_OPTIMISER 1 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
run_velvet_optimiser.pl \- Eragtis wrapper script for running Velvet Optimiser.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 15
\& USAGE: run_velvet_optimiser.pl
\&       --shortPaired=/path/to/file.list
\&       --longPaired=/path/to/file.list
\&       --short=/path/to/file.list
\&       --long=/path/to/file.list
\&       --velvet_path=/abs/path/to/velvet_dir
\&       --start_hash_length=17
\&       --end_hash_length=31
\&       --other_optimiser_opts='-a yes'
\&       --output_directory=/path/to/out
\&       --output_list=/path/to/contig.fa.list
\&     [ --log=/path/to/file.log
\&       --debug=3
\&       --help
\&     ]
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-\-shortPaired,\-sp\fR
.PP
\&\fB\-\-longPaired,\-lp\fR
.PP
\&\fB\-\-short,\-s\fR
.PP
\&\fB\-\-long,\-l\fR
.PP
\&\fB\-\-velvet_path,\-p\fR
    Absolute directory of where the velvet executables are held
.PP
\&\fB\-\-file_format,\-f\fR
    Can be one of the following:
    [\-fasta|\-fastq|\-fasta.gz|\-fastq.gz|\-eland|\-gerald]
.PP
\&\fB\-\-read_type,\-r\fR
    Can be one of the following:
    [\-short|\-shortPaired|\-short2|\-shortPaired2|\-long|\-longPaired]
.PP
\&\fB\-\-start_hash_length,\-a\fR
    The hash length (or kmer) for the first iteration of velvet.
    Must be an odd number
.PP
\&\fB\-\-end_hash_length,\-e\fR
    The hash length (or kmer) for the last iteration of velvet
    Must be an odd number
.PP
\&\fB\-\-other_optimiser_opts,\-o\fR
    Right now, should only be \-a yes.  But will be passed directly
    into the executable. So don't break things and such.
.PP
\&\fB\-\-output_directory,\-O\fR
    Directory to write output
.PP
\&\fB\-\-output_list,\-u\fR
    The path to the list file which will contain the full path
    to the contigs.fa produced by velvet.  Optional; if not provided,
    no list will be made.
.PP
\&\fB\-\-log,\-L\fR
    Logfile.
.PP
\&\fB\-\-debug,\-d\fR
    1,2 or 3. Higher values more verbose.
.PP
\&\fB\-\-help,\-h\fR
    Print this message
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&    Will take in an input file and run velvet optimiser.
.Ve
.SH "INPUT Anything valid that velvet can handle."
.IX Header "INPUT Anything valid that velvet can handle."
.SH "OUTPUT"
.IX Header "OUTPUT"
.SH "CONTACT"
.IX Header "CONTACT"
.Vb 2
\&    Kevin Galens
\&    kgalens@gmail.com
.Ve
