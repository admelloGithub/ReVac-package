.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RUN_HMMSEARCH 1"
.TH RUN_HMMSEARCH 1 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
.Vb 1
\&    run_hmmsearch.pl - runs hmmsearch using multiple hmms against one seq_file
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1USAGE:\s0 bsml2legacydb.pl
        \-\-seq_file|i=/path/to/some/file.fasta
        \-\-hmm_list|l=/path/to/hmm.list
        \-\-hmm_file|f=/path/to/file.hmm
        \-\-output_file|o=/path/output.raw
	[
		\-\-other_opts|r='string of hmmsearch options'
        \-\-help|\-h
.PP
.Vb 1
\&        ]
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-\-seq_file,\-i\fR
    Location of the input sequence file
.PP
\&\fB\-\-hmm_list,\-l\fR
    List of hmm files.  Specific formats taken listed below. 
.PP
\&\fB\-\-hmm_file,\-f\fR
    The hmm file (if only one is being used).
.PP
\&\fB\-\-hmm_dir,\-d\fR
    A directory of hmm files.
.PP
\&\fB\-\-hmm_dir_ext,\-e\fR
    The extension of hmm files in the directory to be used to search.  Will only be used
    when \-\-hmm_dir option is provided.  If left blank, the program will try to use all files
    in that directory.
.PP
\&\fB\-\-output_file,\-o\fR
    The file to output the results of all the hmm's in list (or single hmm if hmm_file 
    option is given) against the given seq_file.
.PP
\&\fB\-\-other_opts,\-r\fR
    Other options which will be passed directly into hmmsearch.
.PP
\&\fB\-\-help,\-h\fR
    Prints this message.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 6
\&    This script is a wrapper to hmmsearch, allowing multiple hmms to be passed and run against
\&    one sequence file.  Currently, the list of hmms does not need to include the full path to
\&    the hmms (although it is much safer if it is included).  If the full path is not included,
\&    they will be searched for in the same directory that the list resides.  Also, if both of 
\&    these options do not exist, then the extensions _fwd.HMM and _rev.HMM are added to the end
\&    of the hmm names in the list and looked for in the directory where the list resides.
.Ve
.PP
.Vb 1
\&    For example:
.Ve
.PP
.Vb 1
\&    %cat /path/list.file
.Ve
.PP
.Vb 3
\&        RF00001
\&        RF00002
\&        ...
.Ve
.PP
.Vb 1
\&    %run_hmmsearch.pl -i some_file.fasta -l /path/list.file -o output.raw
.Ve
.PP
.Vb 1
\&    will run these hmmsearch commands (assuming /path/RF00001_fwd.HMM exists)
.Ve
.PP
.Vb 1
\&    'hmmsearch /path/RF00001_fwd.HMM some_file.fasta'
.Ve
.SH "INPUT"
.IX Header "INPUT"
.Vb 3
\&    The input to this script includes a sequence fasta file (can contain one or multiple fasta
\&    sequences) and an hmm file or list file.  For requirements of list file, see Description section
\&    above.
.Ve
.PP
.Vb 2
\&    The hmm files can be input to this program in three ways.  As a list of files (hmm_list), a single file
\&    (hmm_file) or a directory of files (--hmm_dir) with a specified extensions (--hmm_dir_ext).
.Ve
.SH "OUTPUT"
.IX Header "OUTPUT"
.Vb 3
\&    The output of this program involves an output file containing all the hmmsearch results from each
\&    hmm against each sequence in the fasta file.  Each time a new hmm is used, the string '//' to separate
\&    different outputs.
.Ve
.SH "CONTACT"
.IX Header "CONTACT"
.Vb 2
\&    Kevin Galens
\&    kgalens@tigr.org
.Ve
