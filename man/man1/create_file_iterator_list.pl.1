.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CREATE_FILE_ITERATOR_LIST 1"
.TH CREATE_FILE_ITERATOR_LIST 1 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
create_file_iterator_list.pl \- generates list file from various input sources of filenames.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1USAGE:\s0 create_file_iterator_list.pl 
        \-\-input_file_list=/path/to/some.list
        \-\-input_file=/path/to/somefile.fsa
        \-\-input_directory=/path/to/some/dir
        \-\-input_directory_extension=fsa
        [\-\-checksum_filenames=1
        \-\-log=/path/to/some.log
        \-\-debug=4 ]
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-\-input_file_list,\-l\fR 
    a plain text file containing the full paths to any number of files, one per line.  
    this can also be a comma-separated list of input file lists.
.PP
\&\fB\-\-input_file,\-f\fR 
    the full path to an input file. this can also be a comma-separated list of 
    input files.
.PP
\&\fB\-\-input_directory,\-d\fR 
    the full path to an input directory. this can also be a comma-separated list of 
    input directories.
.PP
\&\fB\-\-input_directory_extension,\-x\fR 
    to be used in conjuction with the input_directory option, this can be used to
    filter files by extension within any passed input directories.
.PP
\&\fB\-\-output_iterator_list,\-o\fR
    output file. Up to 7 lines with comma separated lists of limits
.PP
\&\fB\-\-output_iterator_list,\-o\fR
    comma separated list of iterator keys used in the output file.  Each key will be a separate line in the output file.  There are 7 lines in the output file listing \s-1FILE\s0, \s-1FILE_NAME\s0, \s-1FILE_BASE\s0, \s-1FILE_EXT\s0, \s-1DIRECTORY\s0, \s-1XML\s0 file
.PP
\&\fB\-\-checksum_filenames\fR 
    use checksums instead of the basename as the iterator name. The checksum will be based on the full path to the file.
.PP
\&\fB\-\-log\fR 
    optional.  path to a log file the script should create.  will be overwritten if
    already exists.
.PP
\&\fB\-\-debug\fR 
    optional.  the debug level for the logger (an integer)
.PP
\&\fB\-\-help,\-h\fR 
    This help message/documentation.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 5
\&    This script is used to accept a selection of inputs from either an input list, 
\&    directory, file, or any combination thereof.  Each of these options can also
\&    be specified using comma-separated lists.  These inputs will then be distributed
\&    randomly across a certain number of groups, specified using the --group_count
\&    option (usually somewhere around 150).
.Ve
.PP
.Vb 5
\&    To prevent too many files from being directly in one group, additional groups are 
\&    automatically created for large input sets.  You can control how many inputs are 
\&    in a group before another is created using the --group_size_limit option (default 
\&    1000).  Once the number of inputs in any group reaches this number, another group 
\&    is created until it is full, and so on.
.Ve
.SH "OUTPUT"
.IX Header "OUTPUT"
.Vb 2
\&    The location of the output is specified using the --output_directory option.  One
\&    numbered directory will be created under this for each group needed.
.Ve
.PP
.Vb 1
\&    MORE OUTPUT DESCRIPTIONS NEEDED
.Ve
.SH "CONTACT"
.IX Header "CONTACT"
.Vb 2
\&    Joshua Orvis
\&    jorvis@tigr.org
.Ve
