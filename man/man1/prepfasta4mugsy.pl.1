.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PREPFASTA4MUGSY 1"
.TH PREPFASTA4MUGSY 1 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1USAGE:\s0  bsml2fasta.pl 
          \-\-input_list
          \-\-mugsy_map
          \-\-output_dir
=cut
.PP
use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case bundling);
use File::Basename;
use IO::File;
use Digest::MD5 qw(md5 md5_hex md5_base64);
.PP
#######
## ubiquitous options parsing and logger creation
my \f(CW%options\fR = ();
my \f(CW$results\fR = GetOptions (\e%options, 
			  'input_list|i=s',
              'mugsy_map|m=s',
			  'output_dir|o=s',
                          'checksum_orgs:s',
			  'help|h') || \fIpod2usage()\fR;
.PP
## display documentation
if( \f(CW$options\fR{'help'} ){
    pod2usage( {\-exitval => 0, \-verbose => 2, \-output => \e*STDERR} );
}
.PP
&check_parameters(\e%options);
.PP
# Setting this to true for now.
\&\f(CW$options\fR{checksum_orgs}=1;
.PP
# First pull out the sequence \s-1ID\s0's for each file
open \s-1IN\s0, \*(L"<$options{input_list}\*(R" or die \*(L"Unable to open \f(CW$options\fR{input_list}\en\*(R";
my \f(CW$headers\fR;
while(<\s-1IN\s0>) {
    chomp; 
    push(@$headers, `grep \-H \e\e> \f(CW$_\fR`);
}
close \s-1IN\s0;
my \f(CW$seq_id_to_file\fR;
map {
    chomp; my($file,$id) = split(/:/,$_); 
    \f(CW$id\fR =~ s/^\e>//;
    \f(CW$id\fR =~ /^(\eS+)/;
    \f(CW$id\fR = \f(CW$1\fR;
    \f(CW$seq_id_to_file\fR\->{$id} = \f(CW$file\fR;
}@$headers;
.PP
# Next pull out the sequence \s-1ID\s0 and organism names from the mugsymap file
open \s-1IN2\s0, \*(L"<$options{mugsy_map}\*(R" or die \*(L"Unable to open \f(CW$options\fR{mugsy_map}\en\*(R";
my \f(CW$org_id_to_seq_ids\fR;
.PP
while(<\s-1IN2\s0>) {
    chomp;
    my \f(CW@fields\fR = split(/\et/,$_);
    if(!$org_id_to_seq_ids\->{$fields[7]}) {
        \f(CW$org_id_to_seq_ids\fR\->{$fields[7]} = {};
    }
    \f(CW$org_id_to_seq_ids\fR\->{$fields[7]}\->{$fields[1]} =1;
}
close \s-1IN2\s0;
.PP
my \f(CW$id_map\fR = \*(L"$options{output_dir}/id_map.txt\*(R";
open(\s-1FW\s0, \*(L"> \f(CW$id_map\fR\*(R") or die \*(L"Unable to open file \f(CW$id_map\fR for writing\en\*(R";
.PP
foreach my \f(CW$org_id\fR (keys %$org_id_to_seq_ids) {
    my \f(CW@files\fR;
    map {
        if (!defined($seq_id_to_file\->{$_})) {
            die \*(L"Unable to map \f(CW$_\fR to a sequence file\en\*(R";
        }
        push(@files,$seq_id_to_file\->{$_})
    } keys %{$org_id_to_seq_ids\->{$org_id}};
    if(!$options{checksum_orgs}) {
        \f(CW$org_id\fR =~ s/[\e/\e.\e+\e:\e;,\-]//g;
    }
.PP
.Vb 17
\&    my $prev_org_id = $org_id;
\&    if($options{checksum_orgs}) {
\&        $org_id = md5_hex($org_id);
\&    }
\&    print FW $prev_org_id."\et".$org_id."\en";
\&# Fix to concatenate FASTA files. The statement below joining the file paths and then running one cat command fails in case the number of arguments to cat exceed ~1500
\&    my $fsa = "$options{output_dir}/$org_id.fsa";
\&    if(-e $fsa) {
\&        `rm $fsa`;
\&    }
\&    foreach my $f (@files) {
\&        my $cat = "cat $f >> $options{output_dir}/$org_id.fsa";
\&        print STDERR "$cat\en";
\&        `$cat`;
\&    }
\&#    my $cat = "cat ".join(" ",@files)." > $options{output_dir}/$org_id.fsa";
\&}
.Ve
.PP
close(\s-1FW\s0);
sub check_parameters {
    my ($options) = \f(CW@_\fR;
        ## they have to pass some form of input
    unless ($options{input_list}) {
        print \s-1STDERR\s0 \*(L"You must specify input with \-\-input_list\*(R";
    }
    unless ($options{mugsy_map}) {
        print \s-1STDERR\s0 \*(L"You must specify a mugsymap with \-\-mugsy_map\*(R";
    }
}
