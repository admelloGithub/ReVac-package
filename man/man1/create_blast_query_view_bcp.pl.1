.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CREATE_BLAST_QUERY_VIEW_BCP 1"
.TH CREATE_BLAST_QUERY_VIEW_BCP 1 "2015-07-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
create_blast_query_view_bcp.pl \- reads blast results from a chado instance and creates a
bcp file to load a table (cm_blast) more appropriate for fast querying.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1USAGE:\s0 create_blast_query_view_bcp.pl 
            \-\-database=strep
            \-\-output_file=/path/to/somefile.bcp
            \-\-analysis_id=8
          [ \-\-first_id=1
            \-\-user=access
            \-\-pass=access
            \-\-server=SYBTIGR
          ]
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-\-database,\-d\fR
    Sybase database name to connect to.
.PP
\&\fB\-\-output_file,\-o\fR
    Output \s-1BCP\s0 file that will be created.  See \s-1OUTPUT\s0 section for more details.
.PP
\&\fB\-\-analysis_id,\-a\fR
    \s-1ID\s0 of a blast analysis to gather results for.  This should correspond to some
    analysis.analysis_id
.PP
\&\fB\-\-first_id,\-f\fR
    Optional.  The first column of the output is an integer and can serve as the
    row \s-1ID\s0.  Here you can specify the first value to use and all others will
    increment from it.  (default = 1)
.PP
\&\fB\-\-server,\-s\fR
    Optional.  Sybase server to connect to (default = \s-1SYBTIGR\s0).
.PP
\&\fB\-\-user,\-u\fR
    Optional.  User account with select privileges on the specified database. (default = 'access')
.PP
\&\fB\-\-password,\-p\fR
    Optional.  Password for user account specified. (default = 'access')
.PP
\&\fB\-\-log,\-l\fR 
    Log file
.PP
\&\fB\-\-help,\-h\fR
    This help message
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Chado is meant to be used as a flexible, extensible database schema and was not designed
with query speed in mind.  To query all \s-1BLAST\s0 results, including properties of all
sequences involved and \s-1HSP\s0 scoring statistics, requires fairly large queries that
join across multiple tables.  These can be prohibitively slow, especially when driving
the display of a web app where users can only be expected to wait a few seconds for a
page load.
.PP
A collection of materialized views, designed for fast querying, can solve many of these
problems.  Because Sybase doesn't support materialized views we have to generate them
on the fly.  This script generates the \s-1BCP\s0 file needed to load a materialized view
for fast \s-1BLAST\s0 querying.
.SH "INPUT"
.IX Header "INPUT"
\&\s-1BLAST\s0 storage convention expected should be entered here.
.SH "OUTPUT"
.IX Header "OUTPUT"
The output is written in \s-1BCP\s0 format to the file defined by the \-\-output_file option.  It
is made up of these columns:
.PP
.Vb 9
\&    1. unique row ID (auto-generated)
\&    2. query feature_id
\&    3. query organism_id
\&    4. hit feature_id
\&    5. hit organism_id
\&    6. percent identity
\&    7. percent similarity
\&    8. p value
\&    9. match feature_id
.Ve
.PP
Columns 1\-5 are straight\-forward.  Columns 5 and 6 are averages of the percent identity and 
percent similarity, respectively, of each of the HSPs of the match.  P value is the lowest
(best) p value of the HSPs of the match.
.PP
The columns are delimited by a null-byte character followed by a tab, and each line ends with 
null-byte character and a new line (\en).
.SH "LOADING"
.IX Header "LOADING"
Here is an example command to load this bcp file into a sybase instance:
.PP
.Vb 13
\&    /usr/local/devel/ANNOTATION/ard/current/bin/flatFileToChado 
\&        --username=chado_admin 
\&        --password=chado_admin99 
\&        --database=entamoeba 
\&        --server=SYBTIGR 
\&        --database_type=sybase 
\&        --bcp_ext=bcp 
\&        --bcpmode=in 
\&        --batchsize=3000 
\&        --infile=cm_blast.bcp 
\&        --debug_level=0 
\&        --ignore_empty_bcp=1 
\&        --logfile=cm_blast.load.log
.Ve
.SH "CONTACT"
.IX Header "CONTACT"
.Vb 2
\&    Joshua Orvis
\&    jorvis@tigr.org
.Ve
